<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | 立ち話</title>
    <link>https://tachibana-ai.netlify.app/post/</link>
      <atom:link href="https://tachibana-ai.netlify.app/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ja-jp</language><copyright>@SeeKT</copyright><lastBuildDate>Sat, 04 Sep 2021 17:26:46 +0900</lastBuildDate>
    <image>
      <url>https://tachibana-ai.netlify.app/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Posts</title>
      <link>https://tachibana-ai.netlify.app/post/</link>
    </image>
    
    <item>
      <title>研究室に入った後今までお世話になっている神サイト/ツールたち</title>
      <link>https://tachibana-ai.netlify.app/post/good_references/</link>
      <pubDate>Sat, 04 Sep 2021 17:26:46 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/good_references/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;研究室に残す予定のものをまとめているときに，色々と参考にしたウェブサイトや記事，使ったツールなどを記録しておこうと思った．&lt;/p&gt;
&lt;h5 id=&#34;目次&#34;&gt;目次&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;1 &lt;a href=&#34;#section1&#34;&gt;Ubuntu関連&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2 &lt;a href=&#34;#section2&#34;&gt;Python関連&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3 &lt;a href=&#34;#section3&#34;&gt;Docker関連&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4 &lt;a href=&#34;#section4&#34;&gt;進捗管理関連&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;5 &lt;a href=&#34;#section5&#34;&gt;文献管理関連&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;6 &lt;a href=&#34;#section6&#34;&gt;論文関連&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;7 &lt;a href=&#34;#section7&#34;&gt;プレゼン関連&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;8 &lt;a href=&#34;#section8&#34;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-a-namesection1ubuntu関連a&#34;&gt;1. &lt;a name=&#34;section1&#34;&gt;Ubuntu関連&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kkaneko.jp/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;金子邦彦研究室&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;OSやアプリケーションのインストールの方法がとても丁寧にまとめられている (&lt;a href=&#34;https://www.kkaneko.jp/tools/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;インストール，運用&lt;/a&gt;)．&lt;/li&gt;
&lt;li&gt;個人的には，新しいアプリケーションを使おうとするときに一番苦労するのがインストールなので，このように丁寧にまとめられていてとても助かった．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stackoverflow&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;UbuntuなどのオープンソースのOSを使っているときは，エラーが出た際のトラブルシューティングは自分で何とかしなければならない．&lt;/li&gt;
&lt;li&gt;出力されたエラーログを stackoverflow で検索すると，大抵自分と同じエラーが出た人の質問が出てくるので，かなり参考になる．&lt;/li&gt;
&lt;li&gt;また，プログラムを書いているときに，パッケージの依存関係のエラーが出ることがあるが，このようなときも同様にエラーログを調べられる．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linuxfan.info/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linux Fan Info&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntuを使うときにインストール直後にやった方が良いことや，パッケージのインストールの方法などが日本語で説明されているのが良い．&lt;/li&gt;
&lt;li&gt;特にUbuntuを使い始めた頃はかなり役立った．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-a-namesection2python関連a&#34;&gt;2. &lt;a name=&#34;section2&#34;&gt;Python関連&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://python.atelierkobato.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python 数値計算プログラミング&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;数値計算のためのパッケージの解説がとても丁寧なのが良い．&lt;/li&gt;
&lt;li&gt;Matplotlibの解説もあるのが最高．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://note.nkmk.me/python-post-summary/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;note.mkmk.me Python関連記事まとめ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Pythonの基本的な使い方，特に組み込み関数の使い方が丁寧にまとめられているのが良い．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-a-namesection3docker関連a&#34;&gt;3. &lt;a name=&#34;section3&#34;&gt;Docker関連&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/minato-naka/items/e9cd026747693759800c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dockerで環境構築するための最低限の概念理解&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Dockerの概念を理解するための助けになった．&lt;/li&gt;
&lt;li&gt;図を用いて説明してくれているので，イメージしやすい．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/gold-kou/items/44860fbda1a34a001fc1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;いまさらだけどDockerに入門したので分かりやすくまとめてみた&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;とても丁寧にまとめられている．&lt;/li&gt;
&lt;li&gt;コマンドの実行例を載せてくれているので，したい処理に対してどのようなコマンドを実行すればよいかわかる．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/Yuki_Oshima/items/d3b52c553387685460b0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VS CodeでDocker開発コンテナを便利に使おう&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;VSCodeの拡張機能の使い方が書いている．&lt;/li&gt;
&lt;li&gt;この拡張機能を使うと，コンテナ内の開発をローカルで行っているようにできる (remote sshとかremote wslみたいな感じ) ので，おすすめ．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-a-namesection4進捗管理関連a&#34;&gt;4. &lt;a name=&#34;section4&#34;&gt;進捗管理関連&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Git&lt;/a&gt;, &lt;a href=&#34;https://github.co.jp/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;書いているコードの管理や執筆している論文の管理．&lt;/li&gt;
&lt;li&gt;自宅のPCと研究室内のPCでのデータの同期にも使える．&lt;/li&gt;
&lt;li&gt;VSCodeやAtomの拡張機能を使えばリポジトリの管理が楽．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://evernote.com/intl/jp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Evernote&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;私は各週や日のタスクや目標をチェックボックスに書き，やる必要があることと無理してやらなくてもいいことを区別するために使っていた．&lt;/li&gt;
&lt;li&gt;複数端末でログインできるのも良い (アプリをダウンロードせずブラウザから入れば端末制限に引っかからない)．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-a-namesection5文献管理関連a&#34;&gt;5. &lt;a name=&#34;section5&#34;&gt;文献管理関連&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elsevier.com/ja-jp/solutions/mendeley&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mendeley&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;ある程度の容量を無料で使えるのが強い．&lt;/li&gt;
&lt;li&gt;引用のためのbibファイルを作るときに楽．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.papershipapp.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PaperShip&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;iPadで論文を読むときに便利．&lt;/li&gt;
&lt;li&gt;Mendeleyとのアカウント連携ができる．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/bibtex-entry-from-url/mgpmgkhhbjgkpnanlmlhibjfgpdpgjec?hl=ja&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BibTeX entry from URL&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Chromeの拡張機能で，URLからbibtexの形式を取得できるもの．&lt;/li&gt;
&lt;li&gt;記事やウェブサイトを引用するときに重宝する．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-a-namesection6論文関連a&#34;&gt;6. &lt;a name=&#34;section6&#34;&gt;論文関連&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ocoshite.me/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;minoblog&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;研究の方向性に迷っていたときにこのブログを読み，非常に感銘を受けた．&lt;/li&gt;
&lt;li&gt;特に以下の2つの記事はおすすめ．
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ocoshite.me/how-to-read-scientific-articles&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;【超重要】研究室に配属された学生が最初に学ぶべき論文の読み方【4つのポイント】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ocoshite.me/the-importance-and-benefits-of-reading-scientific-articles&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;【なぜ論文を読むのか？】研究におけるメリットと重要性【アイデアは知識から】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/sei88888/2020-dot-06-dot-01-m1mian-qiang-hui-lun-wen-falsedu-mifang-shu-kifang-yan-jiu-shi-falseguo-gosifang&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Seitaro Shinagawa, 2020.06.01 M1勉強会 論文の読み方・書き方・研究室の過ごし方&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;論文の読み方に関しては，特に「速読」と「精読」の部分が素晴らしいと思った．本当に参考になった．&lt;/li&gt;
&lt;li&gt;論文の書き方もとても参考になる．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yoshitakaushiku.net/how_to_write_references.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;参考文献の書き方&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;恥ずかしながら，私はM1まで教授に参考文献の書き方を直されていた．&lt;/li&gt;
&lt;li&gt;このサイトは，参考文献の書き方のルールがまとめられていて，論文を執筆するときの参考になった．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://app.grammarly.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Grammarly&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Googleアカウントがあれば使うことができる優秀なスペルチェッカー．&lt;/li&gt;
&lt;li&gt;自分で書いているときにはなかなか気付けないスペルや文法のミスを指摘してくれるので，論文執筆時に重宝する．&lt;/li&gt;
&lt;li&gt;専門用語もミスとして指摘することがあるが，それ以外は素晴らしいツールだと思う．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.deepl.com/ja/translator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DeepL&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;論文執筆時に英語の表現が思いつかないときや，論文を読んでいるときに意味がつかめないときにかなり使える．&lt;/li&gt;
&lt;li&gt;精度が良い．&lt;/li&gt;
&lt;li&gt;論文をDeepLを使って書くことについて色々言われているが，全部DeepLを使うのではなく，どうしても思いつかない表現で使うというような使い方をすれば良いのではないだろうか．&lt;/li&gt;
&lt;li&gt;Grammarlyと組み合わせるとある程度マシな英語が書けると思う．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特に上2つのような素晴らしいブログやスライドを見ると，自分が底辺に思えてきます．&lt;/p&gt;
&lt;h3 id=&#34;7-a-namesection7プレゼン関連a&#34;&gt;7. &lt;a name=&#34;section7&#34;&gt;プレゼン関連&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/ShinnosukeTakamichi/ss-48987441&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;研究発表のためのプレゼンテーション技術&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;プレゼンを構成する要素が分かりやすく書かれている．&lt;/li&gt;
&lt;li&gt;私はこの記事を参考にスライドの構成を考えている．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ocoshite.me/how-to-make-a-good-presentation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;わかりやすい研究発表をするための3つの手順【スライド・話し方】&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;minonさんの記事．&lt;/li&gt;
&lt;li&gt;スライドの作り方の他，発表の仕方などもとても参考になる．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://obsproject.com/ja/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OBS Studio&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;最近はオンライン学会が増えてきたり，学会発表がビデオ投稿のみであるものが多くなったりしている．また，学会発表の練習のために，自分の発表を録音して聞くことが有効だと考えられる (これはminonさんの記事でも挙げられている)．&lt;/li&gt;
&lt;li&gt;発表の録画に役立つのがOBS Studioである．録画が非常に容易に行えるのが良い．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;8-a-namesection8まとめa&#34;&gt;8. &lt;a name=&#34;section8&#34;&gt;まとめ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;この記事では，研究室に入った後から今までお世話になっている神のウェブサイトや記事，ツールをまとめた．他にも良いものがある (見つける) と思うので，気付いたらこの記事も更新していきたいと思う．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RStudio ServerをDockerで使うときのメモ</title>
      <link>https://tachibana-ai.netlify.app/post/docker_r/</link>
      <pubDate>Mon, 30 Aug 2021 09:15:39 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/docker_r/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;RとRStudioもDocker containerとして使えれば少しめんどくさかったインストール工程 (&lt;a href=&#34;https://tachibana-ai.netlify.app/post/ubuntu_rstudio/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ubuntu20.04にRとRStudioをインストールする&lt;/a&gt;) をやらなくても良いのではないだろうか，と考えた．&lt;/p&gt;
&lt;p&gt;調べたところ，RockerというものでRStudio ServerをDockerで使えるらしい&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;．&lt;/p&gt;
&lt;p&gt;今回は備忘録として，Rockerを使ったときのメモを残すことにした．&lt;/p&gt;
&lt;h3 id=&#34;1-準備&#34;&gt;1. 準備&lt;/h3&gt;
&lt;p&gt;最低限必要なことは，Docker Engineのインストールである．UbuntuへのDocker Engineのインストールは以前記事にした&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;．WindowsやMacについては他にも様々な記事があると思う．&lt;/p&gt;
&lt;h3 id=&#34;2-使い方&#34;&gt;2. 使い方&lt;/h3&gt;
&lt;p&gt;今回は，&lt;a href=&#34;https://hub.docker.com/r/rocker/tidyverse&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;rocker/tidyverse&lt;/code&gt;&lt;/a&gt; を使う．おそらく&lt;code&gt;rocker/verse&lt;/code&gt; なども同様の方法でできると思う．&lt;/p&gt;
&lt;p&gt;まず，イメージファイルをローカルなマシンに落とす．これは，&lt;code&gt;docker pull&lt;/code&gt; コマンドを用いればよい．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull rocker/tidyverse
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;イメージファイルがあるかどうかは，次のコマンドで調べられる．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker image ls | grep tidyverse
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例えば，私のマシンで実行すると以下のように出力された．確かに &lt;code&gt;rocker/tidyverse&lt;/code&gt; のイメージファイルがあることがわかる．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tcbn@tcbn-V530-15ICR:~$ docker image ls | grep tidyverse
rocker/tidyverse                                latest                  63d48e0c8338   9 days ago      2.41GB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;イメージファイルがある状態で，以下のように &lt;code&gt;docker run&lt;/code&gt; コマンドを実行すればバックグラウンドでRStudio Serverが立ち上がる．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -d -p 8787:8787 -e PASSWORD=[yourpasswordhere] -v [mountdir]:/home/rstudio rocker/tidyverse
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここで，それぞれのオプションは以下のようなものである．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--rm&lt;/code&gt;: コンテナの終了後にコンテナを削除する．&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt;: 端末から切り離してバックグラウンドで実行する．&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;: ポートマッピングを設定する．
&lt;pre&gt;&lt;code&gt;-p [port number (host)]:[port number (container)]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt;: 環境変数を設定する．&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v&lt;/code&gt;: ボリュームをマウントする．
&lt;pre&gt;&lt;code&gt;-v [host directory]:[container directory]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このコマンドの実行後，&lt;code&gt;http://localhost:8787/&lt;/code&gt; にアクセスすればユーザ名とパスワードの入力画面が出てくる．そこで，ユーザ名に &lt;code&gt;rstudio&lt;/code&gt; を入力し，パスワードに &lt;code&gt;-e&lt;/code&gt; で指定したパスワードを入力する．&lt;/p&gt;
&lt;p&gt;実際に私のマシンでやってみる．&lt;code&gt;~/r_sample&lt;/code&gt; というディレクトリをマウントする．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tcbn@tcbn-V530-15ICR:~/r_sample$ ls
requirements.r  test.r
tcbn@tcbn-V530-15ICR:~/r_sample$ docker run --rm -d -p 8787:8787 -e PASSWORD=mypassword -v $(pwd):/home/rstudio rocker/tidyverse
83136d6a3c656386e74d14899e0ad55d4b10603ade1bad0dfe7dbde88e07e75c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この状態で，&lt;code&gt;http://localhost:8787/&lt;/code&gt; にアクセスすると，以下のようにユーザ名とパスワードの入力画面が出てくる．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ユーザ名とパスワードの入力画面&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/input_userinfo.png&#34; alt=&#34;fig1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ユーザ名とパスワードの入力画面
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;ユーザ名に &lt;code&gt;rstudio&lt;/code&gt;，パスワードに指定したパスワードを入力し，サインインすると，次のような画面になる．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-rstudio-server&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/rstudio_server.png&#34; alt=&#34;fig2&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      RStudio Server
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;先程見た&lt;code&gt;~/rsample&lt;/code&gt; がマウントされていることがわかる．あとは必要なパッケージをインストールするなどしたら使えるようになる．&lt;/p&gt;
&lt;p&gt;コンテナ内のRStudio Server側でrのソースコードを書き換えるとそれがマウントしたローカルなディレクトリにも反映される．&lt;/p&gt;
&lt;p&gt;今起動しているDocker containerを &lt;code&gt;docker ps&lt;/code&gt; コマンドで見ると，&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tcbn@tcbn-V530-15ICR:~/r_sample$ docker ps
CONTAINER ID   IMAGE              COMMAND   CREATED         STATUS         PORTS                                       NAMES
83136d6a3c65   rocker/tidyverse   &amp;quot;/init&amp;quot;   7 minutes ago   Up 7 minutes   0.0.0.0:8787-&amp;gt;8787/tcp, :::8787-&amp;gt;8787/tcp   inspiring_nash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;となっている．コンテナを &lt;code&gt;docker stop&lt;/code&gt; コマンドで終了した後に &lt;code&gt;docker ps -a&lt;/code&gt; コマンドでコンテナ一覧を見る．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tcbn@tcbn-V530-15ICR:~/r_sample$ docker stop inspiring_nash 
inspiring_nash
tcbn@tcbn-V530-15ICR:~/r_sample$ docker ps -a | grep tidyverse
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;--rm&lt;/code&gt; オプションで指定したとおり，終了後のコンテナが削除されている．&lt;/p&gt;
&lt;h3 id=&#34;3-まとめ&#34;&gt;3. まとめ&lt;/h3&gt;
&lt;p&gt;今回は，RStudio ServerをDockerで使うときのやり方を簡単にまとめた．例えば，&lt;code&gt;rocker/tidyverse&lt;/code&gt; をイメージファイルに指定してDockerfileを作り，使いやすい環境を作るといったこともできる．&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://jsta.github.io/r-docker-tutorial/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Docker tutorial&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://tachibana-ai.netlify.app/post/ubuntu_docker/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ubuntu20.04にDocker Engineをインストールする&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>力学系の分岐現象: いろいろな力学系</title>
      <link>https://tachibana-ai.netlify.app/post/nonlinear_bifurcation_example/</link>
      <pubDate>Sat, 28 Aug 2021 17:11:39 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/nonlinear_bifurcation_example/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;この記事では，文献&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;の第3章の内容を簡単にまとめた．&lt;/p&gt;
&lt;h5 id=&#34;目次&#34;&gt;目次&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;1 &lt;a href=&#34;#section1&#34;&gt;物体の落下&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2 &lt;a href=&#34;#section2&#34;&gt;単振動&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3 &lt;a href=&#34;#section3&#34;&gt;ダフィング方程式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4 &lt;a href=&#34;#section4&#34;&gt;二重振り子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;5 &lt;a href=&#34;#section5&#34;&gt;1階微分方程式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;6 &lt;a href=&#34;#section6&#34;&gt;2階微分方程式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;7 &lt;a href=&#34;#section7&#34;&gt;ストレンジアトラクタ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;8 &lt;a href=&#34;#section8&#34;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-a-namesection1物体の落下a&#34;&gt;1. &lt;a name=&#34;section1&#34;&gt;物体の落下&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;原点 $O$ から鉛直上向きに $x$ 軸を取り，高さ $x_0$ の点から初速度 $v_0$ で投げ上げた質量 $m$ の物体の運動を考える．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;空気抵抗を無視した場合
$$
m \frac{d^2x}{dt^2} = -mg \tag{3.1}
$$
$\rightsquigarrow$ $dx/dt = v$とおくと，
$$
\begin{cases}
\frac{dx}{dt} = v \\ \frac{dv}{dt} = -g
\end{cases} \tag{3.2}
$$
$\rightsquigarrow$ 2次元自律ベクトル場．時刻 $t = 0$ のとき，$x = x_0, v = v_0$ を通る軌道は，
$$
\begin{cases}
x(t) = \frac{1}{2}gt^2 + v_0t + x_0 \\ v(t) = -gt + v_0
\end{cases} \tag{3.3}
$$
で与えられる．
















&lt;figure  id=&#34;figure-空気抵抗がないときのベクトル場&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.1_nonresistance_vector_field.svg&#34; alt=&#34;fig1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      空気抵抗がないときのベクトル場
    &lt;/figcaption&gt;&lt;/figure&gt;

















&lt;figure  id=&#34;figure-空気抵抗がないときの流れ&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.1_nonresistance_flow.svg&#34; alt=&#34;fig2&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      空気抵抗がないときの流れ
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;速度に比例する空気抵抗がある場合 (比例定数: $\gamma$)
$$
\begin{cases}
\frac{dx}{dt} = v \\ \frac{dv}{dt} = -g - \gamma v
\end{cases} \tag{3.4}
$$
である．
















&lt;figure  id=&#34;figure-空気抵抗があるときのベクトル場&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.1_resistance_vector_field.svg&#34; alt=&#34;fig3&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      空気抵抗があるときのベクトル場
    &lt;/figcaption&gt;&lt;/figure&gt;

















&lt;figure  id=&#34;figure-空気抵抗があるときの流れ&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.1_resistance_flow.svg&#34; alt=&#34;fig4&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      空気抵抗があるときの流れ
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2-a-namesection2単振動a&#34;&gt;2. &lt;a name=&#34;section2&#34;&gt;単振動&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;質点の運動が一直線上にあり，加速度が常にその直線上の一定点に向かい，大きさがその定点からの距離に比例している運動．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$L$: バネの自然長，$m$: おもりの質量，$O$: 原点(固定端)，$k$: ばね定数&lt;/li&gt;
&lt;li&gt;$L_0$: おもりに働く重力とばねの変形がつりあう位置
$$
k(L_0 - L) = mg \tag{3.5}
$$&lt;/li&gt;
&lt;li&gt;$y$: $L_0$からの変位
$$
y = x - L_0 \tag{3.6}
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;バネの質量が無視でき，空気抵抗などによる減衰がないとき
$$
m \frac{d^2 x}{dt^2} = -k(x - L) + mg \tag{3.7}
$$
$$
\Longleftrightarrow m \frac{d^2y}{dt^2} = -ky \tag{3.8}
$$
$$
\Longleftrightarrow \begin{cases}
\frac{dy}{dt} = v \\ \frac{dv}{dt} = - \frac{k}{m}y
\end{cases} \tag{3.9}
$$
$\rightsquigarrow$ 2次元自律系．ODEの一般解は，
$$
y = a \sin(\omega_0 t + \alpha), \ \omega_0 = \frac{k}{m}. \tag{3.10}
$$
ただし，$a, \alpha$ は任意定数．時刻 $t = 0$ で $y = y_0, v = v_0$ を通る解の場合，$a, \alpha$ は，
$$
\begin{cases}
y_0 = a \sin \alpha \\ v_0 = \frac{ak}{m} \cos \alpha
\end{cases} \tag{3.11}
$$
から定まる．
















&lt;figure  id=&#34;figure-空気抵抗がないときのベクトル場&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.2_nonresistance_vector_field.svg&#34; alt=&#34;fig5&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      空気抵抗がないときのベクトル場
    &lt;/figcaption&gt;&lt;/figure&gt;

















&lt;figure  id=&#34;figure-空気抵抗がないときの流れ&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.2_nonresistance_flow.svg&#34; alt=&#34;fig6&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      空気抵抗がないときの流れ
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;速さに比例する抵抗力 (粘性抵抗) が働く場合 ($c$: 比例定数)
$$
m \frac{d^2y}{dt^2} = -ky - c \frac{dy}{dt} \tag{3.12}
$$
$$
\Longleftrightarrow \begin{cases}
\frac{dy}{dt} = v \\ \frac{dv}{dt} = -\frac{k}{m}y - \frac{c}{m}v
\end{cases} \tag{3.13}
$$
















&lt;figure  id=&#34;figure-空気抵抗があるときのベクトル場&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.2_resistance_vector_field.svg&#34; alt=&#34;fig7&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      空気抵抗があるときのベクトル場
    &lt;/figcaption&gt;&lt;/figure&gt;

















&lt;figure  id=&#34;figure-空気抵抗があるときの流れ&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.2_resistance_flow.svg&#34; alt=&#34;fig8&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      空気抵抗があるときの流れ
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;おもりに鉛直方向の周期的外力が働く場合．周期的外力が
$$
F_{\mathrm{ex}} = B \sin \Omega t \tag{3.14}
$$
で与えられる場合，運動方程式は，
$$
m \frac{d^2y}{dt^2} = -ky + B \sin \Omega t \tag{3.15}
$$
$$
\Longleftrightarrow \begin{cases}
\frac{dy}{dt} = v \\ \frac{dv}{dt} = - \frac{k}{m}y + \frac{B}{m} \sin \Omega t
\end{cases} \tag{3.16}
$$
$\rightsquigarrow$ 2次元の非自律系ベクトル場．
















&lt;figure  id=&#34;figure-外力が働くときの軌道-拡大相空間&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.2_withforce_flow.svg&#34; alt=&#34;fig9&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      外力が働くときの軌道 (拡大相空間)
    &lt;/figcaption&gt;&lt;/figure&gt;

















&lt;figure  id=&#34;figure-外力が働くときの軌道&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.2_withforce_flow_2d.svg&#34; alt=&#34;fig10&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      外力が働くときの軌道
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;鉛直方向の周期的外力に加え，さらに粘性抵抗も働く場合．
$$
m \frac{d^2y}{dt^2} = -ky - c \frac{dy}{dt} + B \sin \Omega t \tag{3.17}
$$
$$
\Longleftrightarrow \begin{cases}
\frac{dy}{dt} = v \\ \frac{dv}{dt} = - \frac{k}{m}y - \frac{c}{m}v + \frac{B}{m} \sin \Omega t
\end{cases} \tag{3.18}
$$&lt;/li&gt;
&lt;li&gt;質点に直接外力は作用しないが，振動系の支台に周期的に変わる変位が加わる場合．ばねを支持する台が上下に
$$
x_1 = B \sin \Omega t \tag{3.19}
$$
で振動するとする．ただし，$y$ はおもりのつりあいの位置からの変位であるので，$y - x_1$ は支台に対するおもりの相対変位である．運動方程式は，
$$
m \frac{d^2y}{dt^2} = -k(y - x_1) \tag{3.20}
$$
$$
\Longleftrightarrow m\frac{d^2 y}{dt^2} = -k(y - B \sin \Omega t) \tag{3.21}
$$
$$
\Longleftrightarrow \begin{cases}
\frac{dy}{dt} = v \\ \frac{dv}{dt} = - \frac{k}{m}y + \frac{kB}{m} \sin \Omega t
\end{cases} \tag{3.22}
$$
$\rightsquigarrow$ おもりに鉛直方向の周期的外力
$$
F_{\mathrm{ex}} = kB \sin \Omega t \tag{3.23}
$$
が働く場合と同じ．&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3-a-namesection3ダフィング-duffing-方程式a&#34;&gt;3. &lt;a name=&#34;section3&#34;&gt;ダフィング (Duffing) 方程式&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;減衰的な駆動振動子のモデル
$$
\frac{d^2 x}{dt^2} + \delta \frac{dx}{dt} + \alpha x + \beta x^3 = \gamma \cos \Omega t  \tag{3.24}
$$
$$
\Longleftrightarrow \begin{cases}
\frac{dx}{dt} = v \\ \frac{dv}{dt} = -\alpha x - \beta x^3 - \delta v + \gamma \cos \Omega t
\end{cases} \tag{3.25}
$$
&lt;ul&gt;
&lt;li&gt;$\alpha$: 剛性の大きさ&lt;/li&gt;
&lt;li&gt;$\beta$: 復元力に含まれる非線形性&lt;/li&gt;
&lt;li&gt;$\gamma$: 周期駆動力の振幅&lt;/li&gt;
&lt;li&gt;$\Omega$: 周期駆動力の周波数&lt;/li&gt;
&lt;li&gt;$\delta$: 減衰の大きさ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Duffing方程式のパラメータを次のように設定する．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\alpha = -1, \beta = 1, \gamma = 1, \delta = 0.2, \Omega = 0.4\pi$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また，初期状態 $x(0), v(0)$ を次のようにする．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$x(0) = 0, v(0) = 0.05$&lt;/li&gt;
&lt;li&gt;$x(0) = 0, v(0) = 0.06$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;このとき，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;状態 $x$ の時間応答&lt;/li&gt;
&lt;li&gt;$x-v$ 空間 (相空間) の軌道&lt;/li&gt;
&lt;li&gt;$t-x-v$ 空間 (拡大相空間) の軌道&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を示す．&lt;/p&gt;
&lt;h6 id=&#34;状態-x-の時間応答&#34;&gt;状態 $x$ の時間応答&lt;/h6&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-1の場合の時間応答&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.3_time_response_1.svg&#34; alt=&#34;fig11&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      1の場合の時間応答
    &lt;/figcaption&gt;&lt;/figure&gt;

















&lt;figure  id=&#34;figure-2の場合の時間応答&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.3_time_response_2.svg&#34; alt=&#34;fig12&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      2の場合の時間応答
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;初期速度がわずかに異なると，状態の時間応答が大きく異なっていることがわかる．このように，初期値の非常に小さな差が将来の軌道に大きな影響を及ぼすという点で，カオス的な振る舞いであるといえる．&lt;/p&gt;
&lt;h6 id=&#34;x-v-空間-相空間-の軌道&#34;&gt;$x-v$ 空間 (相空間) の軌道&lt;/h6&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-1の場合の軌道&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.3_flow_1.svg&#34; alt=&#34;fig13&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      1の場合の軌道
    &lt;/figcaption&gt;&lt;/figure&gt;

















&lt;figure  id=&#34;figure-2の場合の軌道&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.3_flow_2.svg&#34; alt=&#34;fig14&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      2の場合の軌道
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-1の場合の軌道-gif&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.3_duffing.gif&#34; alt=&#34;gif1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      1の場合の軌道 (gif)
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h6 id=&#34;t-x-v-空間-拡大相空間-の軌道&#34;&gt;$t-x-v$ 空間 (拡大相空間) の軌道&lt;/h6&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-1の場合の軌道&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.3_expand_flow_1.svg&#34; alt=&#34;fig15&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      1の場合の軌道
    &lt;/figcaption&gt;&lt;/figure&gt;

















&lt;figure  id=&#34;figure-2の場合の軌道&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.3_expand_flow_2.svg&#34; alt=&#34;fig16&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      2の場合の軌道
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;4-a-namesection4二重振り子a&#34;&gt;4. &lt;a name=&#34;section4&#34;&gt;二重振り子&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;別の機会に書きたいと思っている．今回は略．&lt;/p&gt;
&lt;h3 id=&#34;5-a-namesection51階微分方程式a&#34;&gt;5. &lt;a name=&#34;section5&#34;&gt;1階微分方程式&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;$x$を独立変数，$y$を未知関数とする1階微分方程式が
$$
\frac{dy}{dx} = \frac{f(x, y)}{g(x, y)} \tag{3.33}
$$
で与えられているとする．&lt;/p&gt;
&lt;p&gt;$\rightsquigarrow$ $x \rightarrow t$とすると，1次元非自律ベクトル場が得られる．
$$
\frac{dy}{dt} = \frac{f(t, y)}{g(t, y)} \tag{3.34}
$$
$\rightsquigarrow$ 別の見方をする．&lt;/p&gt;
&lt;p&gt;$x, y$が媒介変数$t$の関数であることを考えると，
$$
\frac{dy}{dx} = \frac{\frac{dy}{dt}}{\frac{dx}{dt}} \tag{3.35}
$$
が成り立つ．&lt;/p&gt;
&lt;p&gt;$\rightsquigarrow$ 2次元の自律ベクトル場
$$
\begin{cases}
\frac{dx}{dt} = g(x, y) \\ \frac{dy}{dt} = f(x, y)
\end{cases} \tag{3.36}
$$
を考えると，解曲線 $(x(t), y(t))$ はODE (3.33) の解となる．&lt;/p&gt;
&lt;h6 id=&#34;ex-31-変数分離形微分方程式&#34;&gt;Ex 3.1. 変数分離形微分方程式&lt;/h6&gt;
&lt;p&gt;$$
\frac{dy}{dx} = \frac{f(x)}{g(y)} \tag{3.37}
$$
を変数分離形という．一般解は
$$
\int g(y) dy = \int f(x) dx + c \tag{3.38}
$$
で与えられる．&lt;/p&gt;
&lt;p&gt;$$
\frac{dy}{dx} = \frac{-(1 - x)y}{(1 - y)x} \tag{3.39}
$$
は変数分離形である．これは，次の2次元自律ベクトル場で表現される．
$$
\begin{cases}
\frac{dx}{dt} = (1 - y)x \\ \frac{dy}{dt} = -(1 - x)y
\end{cases} \tag{3.40}
$$&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ベクトル場&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.5_vector_field_1.svg&#34; alt=&#34;fig17&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ベクトル場
    &lt;/figcaption&gt;&lt;/figure&gt;

















&lt;figure  id=&#34;figure-流れの例&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.5_flow_1.svg&#34; alt=&#34;fig18&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      流れの例
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h6 id=&#34;ex-32-同次形微分方程式&#34;&gt;Ex 3.2. 同次形微分方程式&lt;/h6&gt;
&lt;p&gt;$$
\frac{dy}{dx} = f\left( \frac{x}{y} \right) \tag{3.41}
$$
変数変換
$$
\frac{y}{x} = v \tag{3.42}
$$
で変数分離形になる．&lt;/p&gt;
&lt;p&gt;$$
\frac{dy}{dx} = \frac{-y^2}{x(x - y)} \tag{3.43}
$$
は同次形．これは次の2次元自律ベクトル場で表現される．
$$
\begin{cases}
\frac{dx}{dt} = x(x - y) \\ \frac{dy}{dt} = -y^2
\end{cases} \tag{3.44}
$$&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ベクトル場&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.5_vector_field_2.svg&#34; alt=&#34;fig19&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ベクトル場
    &lt;/figcaption&gt;&lt;/figure&gt;

















&lt;figure  id=&#34;figure-流れの例&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.5_flow_2.svg&#34; alt=&#34;fig20&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      流れの例
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h6 id=&#34;ex-33-線形微分方程式&#34;&gt;Ex 3.3. 線形微分方程式&lt;/h6&gt;
&lt;p&gt;$$
\frac{dy}{dx} + P(x)y = Q(x) \tag{3.45}
$$
一般解は，
$$
y = e^{-\int P dx} \left(\int Q e^{\int P dx} dx + c \right) \tag{3.46}
$$&lt;/p&gt;
&lt;p&gt;$$
\frac{dy}{dx} = \frac{\cos^2 x + y \sin x}{\cos x} \tag{3.47}
$$
は線形微分方程式．これは次の2次元自律ベクトル場で表現できる．
$$
\begin{cases}
\frac{dx}{dt} = \cos x \\ \frac{dy}{dt} = \cos^2 x + y \sin x
\end{cases} \tag{3.48}
$$&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ベクトル場&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.5_vector_field_3.svg&#34; alt=&#34;fig21&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ベクトル場
    &lt;/figcaption&gt;&lt;/figure&gt;

















&lt;figure  id=&#34;figure-流れの例&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.5_flow_3.svg&#34; alt=&#34;fig22&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      流れの例
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h6 id=&#34;ex-34-ベルヌーイの微分方程式&#34;&gt;Ex 3.4. ベルヌーイの微分方程式&lt;/h6&gt;
&lt;p&gt;$$
\frac{dy}{dx} + P(x)y = Q(x)y^n \ (n \neq 0, 1) \tag{3.49}
$$
変数変換
$$
z = y^{1 - n} \tag{3.50}
$$
によって線形微分方程式になる．&lt;/p&gt;
&lt;p&gt;$$
\frac{dy}{dx} = \frac{-y + x^3 y^3}{x} \tag{3.51}
$$
はベルヌーイの微分方程式．これは次の2次元自律ベクトル場として表現される．
$$
\begin{cases}
\frac{dx}{dt} = x \\ \frac{dy}{dt} = -y + x^3 y^3
\end{cases} \tag{3.52}
$$&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ベクトル場&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.5_vector_field_4.svg&#34; alt=&#34;fig23&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ベクトル場
    &lt;/figcaption&gt;&lt;/figure&gt;

















&lt;figure  id=&#34;figure-流れの例&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.5_flow_4.svg&#34; alt=&#34;fig24&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      流れの例
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h6 id=&#34;ex-35-完全微分方程式&#34;&gt;Ex 3.5. 完全微分方程式&lt;/h6&gt;
&lt;p&gt;$$
P(x, y)dx + Q(x, y)dy = 0 \tag{3.53}
$$
の左辺がある関数 $u(x, y)$ の全微分 $du = u_x dx + u_y dy$ になっているとき，完全微分方程式という．一般解は，
$$
\int_a^x P(x, y) dx + \int_b^y Q(x, y)dy = c \tag{3.54}
$$
で与えられる．$a,b$: 定数，$c$: 任意定数．&lt;/p&gt;
&lt;p&gt;$$
\frac{dy}{dx} = \frac{-x^3 -2xy - y}{y^3 + x^2 + x} \tag{3.55}
$$
は完全微分方程式．これは次の2次元自律ベクトル場で表現される．
$$
\begin{cases}
\frac{dx}{dt} = y^3 + x^2 + x \\ \frac{dy}{dt} = -x^3 - 2xy - y
\end{cases} \tag{3.56}
$$&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ベクトル場&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.5_vector_field_5.svg&#34; alt=&#34;fig25&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ベクトル場
    &lt;/figcaption&gt;&lt;/figure&gt;

















&lt;figure  id=&#34;figure-流れの例&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.5_flow_5.svg&#34; alt=&#34;fig26&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      流れの例
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;6-a-namesection62階微分方程式a&#34;&gt;6. &lt;a name=&#34;section6&#34;&gt;2階微分方程式&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;$x$ を独立変数，$y$ を未知関数とする2階微分方程式が
$$
\frac{d^2y}{dx^2} = \frac{f(x, y, y^{\prime})}{g(x, y, y^{\prime})} \tag{3.57}
$$
で与えられているとする．$x, y$ が媒介変数 $t$ の関数であると考えると，
$$
\frac{dy^{\prime}}{dx} = \frac{\frac{dy^{\prime}}{dt}}{\frac{dx}{dt}} \tag{3.58}
$$
$$
\frac{dy}{dx} = y^{\prime} = \frac{\frac{dy}{dt}}{\frac{dx}{dt}} \tag{3.59}
$$
が成り立つ．&lt;/p&gt;
&lt;p&gt;3次元のベクトル場
$$
\begin{cases}
\frac{dx}{dt} = g(x, y, y^{\prime}) \\ \frac{dy}{dt} = y^{\prime}g(x, y, y^{\prime}) \\ \frac{dy^{\prime}}{dt} = f(x, y, y^{\prime})
\end{cases} \tag{3.60}
$$
を考えると，解曲線 $(x(t), y(t), y^{\prime}(t))$ は微分方程式(3.60)の解となる．&lt;/p&gt;
&lt;h6 id=&#34;ex-36&#34;&gt;Ex 3.6.&lt;/h6&gt;
&lt;p&gt;$$
\frac{d^2y}{dx^2} = -y \tag{3.61}
$$
は，$dy/dx = z$ とおくことで，次の3次元自律ベクトル場に表現される．
$$
\begin{cases}
\frac{dx}{dt} = 1 \\ \frac{dy}{dt} = z \\ \frac{dz}{dt} = -y
\end{cases} \tag{3.62}
$$&lt;/p&gt;
&lt;p&gt;(3.61)の一般解は，
$$
y = A \cos x + B \sin x \tag{3.63}
$$
で与えられる．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-流れの例&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.6_flow_1.svg&#34; alt=&#34;center&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      流れの例
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;7-a-namesection7ストレンジアトラクタを持つ3次元自律ベクトル場a&#34;&gt;7. &lt;a name=&#34;section7&#34;&gt;ストレンジアトラクタを持つ3次元自律ベクトル場&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;アトラクタ
&lt;ul&gt;
&lt;li&gt;力学系の相空間で，周囲の軌道を引き寄せて逃さない性質を持つ不変集合&lt;/li&gt;
&lt;li&gt;点アトラクタ，周期アトラクタ，準周期アトラクタ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ストレンジアトラクタ
&lt;ul&gt;
&lt;li&gt;1960年代にコンピュータの発達・普及により従来知られていなかったアトラクタが多く見つかった．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;ex-38-ローレンツアトラクタ&#34;&gt;Ex 3.8. ローレンツアトラクタ&lt;/h6&gt;
&lt;p&gt;$$
\begin{cases}
\frac{dx}{dt} = -\sigma (x - y) \\ \frac{dy}{dt} = -y - xz + rx \\ \frac{dz}{dt} = xy - bz
\end{cases} \tag{3.68}
$$&lt;/p&gt;
&lt;p&gt;温度差のある上下の境界を持つ容器に入った流体の流れをモデル化したもの．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$x$: 流れの関数をフーリエ展開したときの係数に対応．対流の強さを表す．&lt;/li&gt;
&lt;li&gt;$y$: 上昇流と下降流の温度差&lt;/li&gt;
&lt;li&gt;$z$: 上下方向の温度差&lt;/li&gt;
&lt;li&gt;$\sigma$: ブランドル数，$r$: レイリー数，$b$: 容器の高さと幅の比から定まる数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$\rightsquigarrow (\sigma, r, b) = (10, 28, 8/3)$ のとき，ローレンツアトラクタ．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ローレンツアトラクタの解軌道-gif&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/3.7_lorenz.gif&#34; alt=&#34;gif2&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ローレンツアトラクタの解軌道 (gif)
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;8-a-namesection8まとめa&#34;&gt;8. &lt;a name=&#34;section8&#34;&gt;まとめ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;この記事では，さまざまな力学系についてまとめ，ベクトル場や解軌道を図示した．プログラムは，GitHub (C++&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, Jupyter Notebook&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;) に上げている．&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;小室，&lt;a href=&#34;https://www.saiensu.co.jp/book_support/sgc-17/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基礎からの力学系&lt;/a&gt;，サイエンス社，2002.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tcbn-ai/TIL/tree/main/Study_Nonlinear_systems/code&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/tcbn-ai/TIL/tree/main/Study_Nonlinear_systems/code&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tcbn-ai/TIL/tree/main/Study_Nonlinear_systems/ipython_notebook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/tcbn-ai/TIL/tree/main/Study_Nonlinear_systems/ipython_notebook&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>力学系の分岐現象: 力学系の定義</title>
      <link>https://tachibana-ai.netlify.app/post/nonlinear_bifurcation_definition/</link>
      <pubDate>Sat, 28 Aug 2021 12:26:44 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/nonlinear_bifurcation_definition/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;この記事では，文献&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;の第2章の内容をまとめた．&lt;/p&gt;
&lt;h5 id=&#34;目次&#34;&gt;目次&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;1 &lt;a href=&#34;#section1&#34;&gt;連続時間力学系&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2 &lt;a href=&#34;#section2&#34;&gt;離散時間力学系&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3 &lt;a href=&#34;#section3&#34;&gt;ポアンカレ写像&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;3.1 &lt;a href=&#34;#section3.1&#34;&gt;自律系のポアンカレ写像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3.2 &lt;a href=&#34;#section3.2&#34;&gt;非自律系のポアンカレ写像&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;4 &lt;a href=&#34;#section4&#34;&gt;補足: プログラム&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-a-namesection1連続時間力学系--ベクトル場-a&#34;&gt;1. &lt;a name=&#34;section1&#34;&gt;連続時間力学系 ― ベクトル場 ―&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;この節では，通常の微分積分学の教科書で扱われる微分方程式の定義と，力学系理論で扱われる微分方程式との関係について扱う．独立変数を$t$とする．&lt;/p&gt;
&lt;h6 id=&#34;def-21&#34;&gt;Def 2.1&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;$F: D \ (\subset \mathbb{R}^{n + 2}) \to \mathbb{R}$: ($n + 2$) 変数実数値関数 $(n \geq 1)$
$$
F(t, x, x^{\prime}, \ldots, x^{(n)}) = 0 \tag{2.1}
$$
を &lt;strong&gt;$n$階常微分方程式&lt;/strong&gt; という．&lt;/li&gt;
&lt;li&gt;$f: D_0 \ (\subset \mathbb{R}^{n + 1}) \to \mathbb{R}$: ($n + 1$) 変数実数値関数
$$
x^{(n)} = f(t, x, x^{\prime}, \ldots, x^{(n - 1)}) \tag{2.2}
$$
を &lt;strong&gt;正規形の$n$階常微分方程式&lt;/strong&gt; という．&lt;/li&gt;
&lt;li&gt;$f_1, \ldots, f_n: D_0 \ (\subset \mathbb{R}^{n + 1}) \to \mathbb{R}$に対して，
$$
\begin{cases}
\frac{dx_1}{dt} = f_1(t, x_1, \ldots, x_n) \\ \cdots \\ \frac{dx_n}{dt} = f_n(t, x_1, \ldots, x_n)
\end{cases} \tag{2.3}
$$
を &lt;strong&gt;$1$階連立常微分方程式&lt;/strong&gt; (&lt;strong&gt;常微分方程式系&lt;/strong&gt;) という．&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$1$階連立常微分方程式は，$\boldsymbol{x} = (x_1, \ldots, x_n) \in \mathbb{R}^n$ および写像 $g: \mathbb{R} \times \mathbb{R}^n \to \mathbb{R}^n$,
$$
g(t, \boldsymbol{x}) = (f_1(t, x_1, \ldots, x_n), \ldots, f_n(t, x_1, \ldots, x_n)) \tag{2.4}
$$
によって，
$$
\frac{d \boldsymbol{x}}{dt} = g(t, \boldsymbol{x}) \tag{2.5}
$$
のように表される ($\mathbb{R}^n$における常微分方程式)．以下，$\dot{\boldsymbol{x}} := d\boldsymbol{x}/dt$とする．常微分方程式は，連続時間力学系を表現する代表的なモデルである．以降，常微分方程式をODEと略記する．&lt;/p&gt;
&lt;p&gt;ODE (2.5) において，写像$g$が時間$t$を陽に含むか含まないかは，力学系理論での扱いに違いが生じる．写像$g$が時間$t$を陽に含まない場合を &lt;strong&gt;自律系&lt;/strong&gt; といい，写像$g$が時間$t$を陽に含む一般の場合 (&lt;strong&gt;非自律系&lt;/strong&gt;) と区別する．&lt;/p&gt;
&lt;h6 id=&#34;def-22-自律系&#34;&gt;Def 2.2 (自律系)&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;$\boldsymbol{x} := (x_1, \ldots, x_n) \in \mathbb{R}^n$とする．$f: D \ (\subset \mathbb{R}^n) \to \mathbb{R}$を，
$$
f(\boldsymbol{x}) = (f_1(\boldsymbol{x}), \ldots, f_n(\boldsymbol{x}))^{\mathrm{T}} \tag{2.6}
$$
とする．このとき，ODE
$$
\dot{\boldsymbol{x}}  = f(\boldsymbol{x}) \tag{2.7}
$$
$$
\Longleftrightarrow \begin{cases}
\dot{x}_1 = f_1(x_1, \ldots, x_n) \\ \cdots \\ \dot{x}_n = f_n(x_1, \ldots, x_n)
\end{cases} \tag{2.8}
$$
を &lt;strong&gt;自律系&lt;/strong&gt; という．&lt;/li&gt;
&lt;li&gt;$D$を相空間，$D$の各点$\boldsymbol{x}$にベクトル$f(\boldsymbol{x})$を対応させる写像
$$
f: \boldsymbol{x} \mapsto f(\boldsymbol{x}) \tag{2.9}
$$
をベクトル場という．ベクトル場はODEを幾何学的に表現したもの．力学系の理論ではベクトル場はODEと同じ意味で使われることが多い．&lt;/li&gt;
&lt;li&gt;区間 $I \subset \mathbb{R}$ で定義された曲線 $\boldsymbol{x}: I \to \mathbb{R}^n$ が
$$
\dot{\boldsymbol{x}} = f(\boldsymbol{x}(t)) \tag{2.10}
$$
を満たすとき，$\boldsymbol{x}$はODE (2.7)の解 (解曲線) であるという．$\boldsymbol{x}(0)$: 初期値．ODEの解 $\boldsymbol{x}$ は，ベクトル場の &lt;strong&gt;軌道&lt;/strong&gt; (orbit) とも呼ばれる．&lt;/li&gt;
&lt;li&gt;$I \subset \mathbb{R}$ を $0$ を含む開区間，$D \subset \mathbb{R}^n$ とする．写像 $\varphi: I \times D \to \mathbb{R}^n$ が $\varphi(0, \boldsymbol{x}_0) = \boldsymbol{x}_0$ を満たし，各 $\boldsymbol{x}_0 \in D$ を固定するとき，
$$
\frac{d \varphi(t, \boldsymbol{x}_0)}{dt} = f(\varphi(t, \boldsymbol{x}_0)) \tag{2.11}
$$
を満たすならば，$\varphi$はODE (2.7)の &lt;strong&gt;流れ&lt;/strong&gt; (flow) であるという (ベクトル場(2.9)の流れとも呼ばれる)．&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;ex-21-2次元自律微分方程式&#34;&gt;Ex 2.1 (2次元自律微分方程式)&lt;/h6&gt;
&lt;p&gt;ここで，自律系について理解するために，2次元自律系微分方程式の例を考える．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$\boldsymbol{x} = (x, y)$, $f: \mathbb{R}^2 \to \mathbb{R}^2$を
$$
f(\boldsymbol{x}) = (f_1(x, y), f_2(x, y)) = (y, -x) \tag{2.12}
$$
で定義．このとき，
$$
\begin{cases}
\dot{x} = y \\ \dot{y} = -x
\end{cases} \tag{2.13}
$$
は$f$によって与えられる自律系のODE．&lt;/li&gt;
&lt;li&gt;ベクトル場は，$(x, y) \mapsto (y, -x)$である．相空間は$\mathbb{R}^2$．
ベクトル場は以下の図のようになる．
















&lt;figure  id=&#34;figure-自律系のベクトル場の例&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/2.1_autonomous.svg&#34; alt=&#34;fig_1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      自律系のベクトル場の例
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;曲線$\boldsymbol{x}: \mathbb{R} \to \mathbb{R}^2$を
$$
\boldsymbol{x}(t) = (x_0 \cos t + y_0 \sin t, -x_0 \sin t + y_0 \cos t) \tag{2.14}
$$
で定義すれば，$\boldsymbol{x}$は初期値$(x_0, y_0)$を持つ解曲線となる．&lt;/li&gt;
&lt;li&gt;$\varphi: \mathbb{R} \times \mathbb{R}^2 \to \mathbb{R}^2$を
$$
\varphi(t, x_0, y_0) = (x_0 \cos t + y_0 \sin t, -x_0 \sin t + y_0 \cos t) = (x_t, y_t) \tag{2.15}
$$
と定義．$\varphi$は上のODEの流れである．&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;次に，非自律系微分方程式について．&lt;/p&gt;
&lt;h6 id=&#34;def-23-非自律系&#34;&gt;Def 2.3 (非自律系)&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;$g: I \times D \to \mathbb{R}^n$とする．
&lt;ul&gt;
&lt;li&gt;$I \subset \mathbb{R}$, $D \subset \mathbb{R}^n$
$$
g(t, \boldsymbol{x}) = (g_1(t, \boldsymbol{x}), \ldots, g_n(t, \boldsymbol{x}))^{\mathrm{T}} \tag{2.19}
$$
このとき，ODE
$$
\dot{\boldsymbol{x}} = g(t, \boldsymbol{x}) \tag{2.20}
$$
$$
\Longleftrightarrow \begin{cases}
\dot{x}_1 = g_1(t, x_1, \ldots, x_n) \\ \cdots \\ \dot{x}_n = g_n(t, x_1, \ldots, x_n)
\end{cases} \tag{2.21}
$$
を &lt;strong&gt;非自律系&lt;/strong&gt; (non-autonomous system) という．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$I \times D$: 拡大相空間．
$$
(t, \boldsymbol{x}) \mapsto (1, g(t, \boldsymbol{x})) \tag{2.22}
$$
をベクトル場という．&lt;/li&gt;
&lt;li&gt;曲線$\boldsymbol{x}: I \to \mathbb{R}^n$が
$$
\dot{\boldsymbol{x}} = g(t, \boldsymbol{x}(t)) \tag{2.23}
$$
を満たすとき，$\boldsymbol{x}$はODE (2.20) の解 (解曲線) という．$\boldsymbol{x}(t_0)$: 初期値．&lt;/li&gt;
&lt;li&gt;$\varphi: \mathbb{R} \times \mathbb{R} \times \mathbb{R}^n \to \mathbb{R}^n$ が $\varphi(t_0, t_0, \boldsymbol{x}_0) = \boldsymbol{x}_0$ を満たし，各 $(t_0, \boldsymbol{x}_0) \in I \times D$ を固定するとき
$$
\frac{d \varphi(t, t_0, \boldsymbol{x}_0)}{dt} = g(t, \varphi(t, t_0, \boldsymbol{x}_0)) \tag{2.24}
$$
を満たすならば，$\varphi$はODE (2.20) の &lt;strong&gt;流れ&lt;/strong&gt; であるという．&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;ex-22-1次元非自律微分方程式&#34;&gt;Ex 2.2 (1次元非自律微分方程式)&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;$(t, x) \in \mathbb{R} \times \mathbb{R}$, $g: \mathbb{R} \times \mathbb{R} \to \mathbb{R}$ を
$$
g(x, t) = xt \tag{2.25}
$$
で定義．このとき，
$$
\dot{x} = g(t, x) = xt \tag{2.26}
$$
は$g$によって与えられる非自律系のODE．&lt;/li&gt;
&lt;li&gt;ベクトル場は$(t, x) \mapsto (1, xt)$．拡大相空間は$\mathbb{R} \times \mathbb{R}$．
















&lt;figure  id=&#34;figure-非自律系のベクトル場の例&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/2.2_non_autonomous.svg&#34; alt=&#34;fig_2&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      非自律系のベクトル場の例
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;曲線$\boldsymbol{x}: \mathbb{R} \to \mathbb{R}$を
$$
\boldsymbol{x}(t) = x_0 \exp\left(\frac{1}{2}(t^2 - t_0^2) \right) \tag{2.27}
$$
で定義すれば，$\boldsymbol{x}$は$t = t_0$のとき，$x_0$を初期値とする解曲線となる．&lt;/li&gt;
&lt;li&gt;写像$\varphi: \mathbb{R} \times \mathbb{R} \times \mathbb{R} \to \mathbb{R}$を，
$$
\varphi(t, t_0, x_0) = x_0 \exp\left( \frac{1}{2}(t^2 - t_0^2) \right) \tag{2.28}
$$
で定義．この$\varphi$は上のODEの流れである．&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2-a-namesection2離散時間力学系--写像-a&#34;&gt;2. &lt;a name=&#34;section2&#34;&gt;離散時間力学系 ― 写像 ―&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;離散時間力学系を表現する代表的な数学モデルは離散時間差分方程式である．&lt;/p&gt;
&lt;h6 id=&#34;def-24&#34;&gt;Def 2.4&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;$\boldsymbol{x} = (x_1, \ldots, x_n)^{\mathrm{T}} \in \mathbb{R}^n$, $f: \mathbb{R}^n \to \mathbb{R}^n$: 連続写像.
$$
f(\boldsymbol{x}) = (f_1(\boldsymbol{x}), \ldots, f_n(\boldsymbol{x}))^{\mathrm{T}} \tag{2.30}
$$
このとき，離散時間差分方程式
$$
\boldsymbol{x}(t + 1) = f(\boldsymbol{x}(t)), \ \ (t = 0, 1, 2, \ldots) \tag{2.31}
$$
$$
\Longleftrightarrow \begin{cases}
x_1(t + 1) = f_1(x_1(t), \ldots, x_n(t)) \\ \cdots \\ x_n(t + 1) = f_n(x_1(t), \ldots, x_n(t))
\end{cases} \tag{2.32}
$$
を &lt;strong&gt;離散時間力学系&lt;/strong&gt; という．単に &lt;strong&gt;写像&lt;/strong&gt; ということもある．&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点 $\boldsymbol{x}_0 \in \mathbb{R}^n$ に対して，&lt;/p&gt;
&lt;p&gt;$$\boldsymbol{x}_{t + 1} = f(\boldsymbol{x}_t), \ \ (t = 0, 1, 2, \ldots) \tag{2.33}$$
で与えられる ${\boldsymbol{x}_t: \ t = 0, 1, 2, \ldots}$ を点 $\boldsymbol{x}_0$ を通る &lt;strong&gt;正の半軌道&lt;/strong&gt; という．&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$f$が同相写像 (逆写像$f^{-1}$が存在し，逆写像も連続) であるとき，&lt;strong&gt;可逆系&lt;/strong&gt; といい，そうでないとき，&lt;strong&gt;非可逆系&lt;/strong&gt; という．可逆系の場合には，時間の負の時間方向 (過去) への軌道も考えることができる．
点$\boldsymbol{x}_0 \in \mathbb{R}^n$に対して，&lt;/p&gt;
&lt;p&gt;$$
\boldsymbol{x}_{t - 1} = f^{-1}(\boldsymbol{x}_t) \ \ (t = 0, -1, -2, \ldots) \tag{2.34}
$$
で与えられる点列${\boldsymbol{x}_t: \ t = -1, -2, \ldots}$を${\boldsymbol{x}_t: \ t = 0, 1, 2}$に加えて得られる点列${\boldsymbol{x}_t: \ t = 0, \pm 1, \pm 2, \ldots}$を$\boldsymbol{x}_0$を通る &lt;strong&gt;軌道&lt;/strong&gt; という．&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3-a-namesection3ポアンカレ写像a&#34;&gt;3. &lt;a name=&#34;section3&#34;&gt;ポアンカレ写像&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;連続時間力学系における周期軌道の解析は，1次元低い次元の空間における離散時間力学系の解析に帰着されることがある．この離散時間力学系はポアンカレ写像と呼ばれる．&lt;/p&gt;
&lt;h4 id=&#34;31-a-namesection31自律系のポアンカレ写像a&#34;&gt;3.1. &lt;a name=&#34;section3.1&#34;&gt;自律系のポアンカレ写像&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;3次元自律系ベクトル場&lt;/p&gt;
&lt;p&gt;$$
\dot{\boldsymbol{x}} = f(\boldsymbol{x}), \ \ \boldsymbol{x} \in \mathbb{R}^3 \tag{2.35}
$$&lt;/p&gt;
&lt;p&gt;を考える．このベクトル場が周期軌道 $\Gamma$ を持つとする．
このとき，$\Gamma$ と1点 $\boldsymbol{p}$ で横断的に交わる2次元平面 $\Sigma$ をとる．&lt;/p&gt;
&lt;p&gt;$\rightsquigarrow$ $\boldsymbol{p}$ は流れ $\varphi$ に沿って動く時，再び $\Sigma$ 上の点 $\boldsymbol{p}$ を打つ．&lt;/p&gt;
&lt;p&gt;$\rightsquigarrow$ $\boldsymbol{p}$ に十分近い $\Sigma$ 上の点 $\boldsymbol{q}$ が流れに沿って動くとき， $\boldsymbol{p}$ の近くの点 $\boldsymbol{q}^{\prime}$ を打つと考えられる ($\because$ 解の連続性，$\Sigma$ が $\Gamma$ に横断的であること)．&lt;/p&gt;
&lt;p&gt;上記のようにして， $\Sigma$ 上の $\boldsymbol{p}$ の近傍 $U$ から $\Sigma$ への写像が定義できる．&lt;/p&gt;
&lt;h6 id=&#34;def-25&#34;&gt;Def 2.5&lt;/h6&gt;
&lt;p&gt;$U$: $\Sigma$ における $\boldsymbol{p}$ の近傍．$\boldsymbol{q} \in U$ に対して，$\boldsymbol{q}^{\prime}$ を流れ $\varphi$ によって&lt;/p&gt;
&lt;p&gt;$$
\boldsymbol{q}^{\prime} = \varphi(T, \boldsymbol{q}), \ \ T = \min \{t &amp;gt; 0 \ | \ \varphi(t, \boldsymbol{q}) \in \Sigma  \} \tag{2.36}
$$&lt;/p&gt;
&lt;p&gt;で定義する．この写像&lt;/p&gt;
&lt;p&gt;$$
P: U \ni \boldsymbol{q} \mapsto \boldsymbol{q}^{\prime} \in \Sigma \tag{2.37}
$$&lt;/p&gt;
&lt;p&gt;を自律系ベクトル場の &lt;strong&gt;ポアンカレ写像&lt;/strong&gt; といい，$\Sigma$ を &lt;strong&gt;ポアンカレ断面&lt;/strong&gt; という．&lt;/p&gt;
&lt;h6 id=&#34;remark&#34;&gt;Remark&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ポアンカレ写像は有界な領域$U$で定義された写像&lt;/p&gt;
&lt;p&gt;$\rightsquigarrow$ $\boldsymbol{q}$に対して$P$で繰り返し変換すると，像が$U$の外に出てしまうことがある．&lt;/p&gt;
&lt;p&gt;$\rightsquigarrow$ 自律系のポアンカレ写像は，局所的に定義された離散時間力学系．&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ポアンカレ写像を使用する場面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;パラメータを持つベクトル場の周期軌道の安定性の変化や分岐を調べるとき&lt;/p&gt;
&lt;p&gt;$\rightsquigarrow$ 周期軌道の安定性や分岐は，ポアンカレ写像の不動点$\boldsymbol{p}$の安定性や分岐に帰着される&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;あらかじめ定めたポアンカレ断面がパラメータのどの範囲で有効に働くかは，ベクトル場や周期軌道の性質に依存する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;32-a-namesection32非自律系のポアンカレ写像a&#34;&gt;3.2. &lt;a name=&#34;section3.2&#34;&gt;非自律系のポアンカレ写像&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;時間に関して周期 $T$ の周期性を持つ2次元の非自律ベクトル場を考える．&lt;/p&gt;
&lt;p&gt;$$
\dot{\boldsymbol{x}} = g(t, \boldsymbol{x}), \ \ \boldsymbol{x} \in \mathbb{R}^2 \tag{2.38}
$$
$$
g(t, \boldsymbol{x}) = g(t + T, \boldsymbol{x}) \tag{2.39}
$$&lt;/p&gt;
&lt;p&gt;このベクトル場の流れを，$\varphi: \mathbb{R} \times \mathbb{R} \times \mathbb{R}^2 \to \mathbb{R}^2$ とする．&lt;/p&gt;
&lt;h6 id=&#34;def-26&#34;&gt;Def 2.6&lt;/h6&gt;
&lt;p&gt;$\boldsymbol{x} \in \mathbb{R}^2$に対して，$\varphi(T, 0, \boldsymbol{x}) \in \mathbb{R}^2$を対応させる写像
$$
P: \mathbb{R}^2 \ni \boldsymbol{x} \mapsto \varphi(T, 0, \boldsymbol{x}) \in \mathbb{R}^2 \tag{2.40}
$$
を非自律系の &lt;strong&gt;ポアンカレ写像&lt;/strong&gt; (&lt;strong&gt;ストロボ写像&lt;/strong&gt;) という．&lt;/p&gt;
&lt;p&gt;ベクトル場の解 $\boldsymbol{x}: \mathbb{R} \to \mathbb{R}^2$ が $t = 0$ のとき $\boldsymbol{x} = \boldsymbol{x}_0$ を初期値とし，&lt;/p&gt;
&lt;p&gt;$$
\boldsymbol{x}(t) = \boldsymbol{x}(t + T), \ \ t \in \mathbb{R}  \tag{2.41}
$$&lt;/p&gt;
&lt;p&gt;を満たすとき，$\boldsymbol{x}(0) = \boldsymbol{x}_0$ はポアンカレ写像 $P$ の不動点となる ($P(\boldsymbol{x}_0) = \boldsymbol{x}_0$)．&lt;/p&gt;
&lt;p&gt;また，解 $\boldsymbol{x}: \mathbb{R} \to \mathbb{R}^2$ が $t = 0$ のとき， $\boldsymbol{x} = \boldsymbol{x}_0$ を初期値とし，&lt;/p&gt;
&lt;p&gt;$$
\boldsymbol{x}(t) \neq \boldsymbol{x}(t + T) \tag{2.43}
$$
$$
\boldsymbol{x}(t) = \boldsymbol{x}(t + 2T) \tag{2.44}
$$
を満たすとき，$\boldsymbol{x}(0) = \boldsymbol{x}_0$ はポアンカレ写像 $P$ の2周期点となる．&lt;/p&gt;
&lt;p&gt;$\rightsquigarrow$ 非自律系ベクトル場の基本周期 $T$ の整数倍の周期を持つ解曲線の解析を，ポアンカレ写像の周期点の解析に帰着させることができる．&lt;/p&gt;
&lt;p&gt;自律系と非自律系のポアンカレ写像は，以下の図のように表される．
















&lt;figure  id=&#34;figure-ポアンカレ写像&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/poincare.svg&#34; alt=&#34;fig_3&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ポアンカレ写像
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;4-a-namesection4補足-プログラムa&#34;&gt;4. &lt;a name=&#34;section4&#34;&gt;補足: プログラム&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;自律系と非自律系のベクトル場を描画する際に用いたプログラムはGitHub&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;に上げている．&lt;/p&gt;
&lt;h3 id=&#34;5-a-namesection5まとめa&#34;&gt;5. &lt;a name=&#34;section5&#34;&gt;まとめ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;この記事では，力学系の定義についてまとめ，ベクトル場を描画した．&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;小室，&lt;a href=&#34;https://www.saiensu.co.jp/book_support/sgc-17/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基礎からの力学系&lt;/a&gt;，サイエンス社，2002.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tcbn-ai/TIL/tree/main/Study_Nonlinear_systems/code&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/tcbn-ai/TIL/tree/main/Study_Nonlinear_systems/code&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>力学系の分岐現象: 導入</title>
      <link>https://tachibana-ai.netlify.app/post/nonlinear_bifurcation_introduction/</link>
      <pubDate>Sat, 28 Aug 2021 12:26:25 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/nonlinear_bifurcation_introduction/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;私は研究で非線形系の分岐現象を扱っている．私が修士の間に勉強してまとめていた非線形力学系の分岐現象 (特に1次元の場合) の基本的なことをブログに書きたいと思う．&lt;/p&gt;
&lt;p&gt;私が勉強したことは研究に必要だった基礎的なことだけなので，それ以上のことは理解していないので，まとめ終わったらもっと勉強したいと思う．&lt;/p&gt;
&lt;h3 id=&#34;1-今後の予定といくつかの文献の紹介&#34;&gt;1. 今後の予定といくつかの文献の紹介&lt;/h3&gt;
&lt;p&gt;M1の冬からM2の春にかけて文献&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;を参考にして非線形力学系の分岐現象についてまとめ，プログラムを書いていた．これまでまとめた資料とプログラムをブログの記事で公開したいと思っている．&lt;/p&gt;
&lt;p&gt;非線形力学系については多くの優れた文献がある．例えば，文献&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;は，非線形システムの制御の教科書の名著として知られている．非線形システムの安定性の解析について分かりやすくまとめられていると思う．&lt;/p&gt;
&lt;p&gt;また，文献&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;は力学系とカオスの入門書の名著として知られている．日本語の訳書も出ており，直感的な説明も数学的な解説もあるのが良い．私はこの文献は辞書代わりに使っていたが，時間があり気が向いたらしっかり読んでみたいと思っている．&lt;/p&gt;
&lt;p&gt;文献&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;は分岐現象の条件の直感的な説明と証明が記述されており，論文を執筆するときに参考にした．&lt;/p&gt;
&lt;p&gt;他にも名著はたくさんあるが，私が修士の間に勉強に使ったのは主にこの4つの本である．特に分岐現象の勉強には，文献&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;を用いた．&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;小室，&lt;a href=&#34;https://www.saiensu.co.jp/book_support/sgc-17/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基礎からの力学系&lt;/a&gt;，サイエンス社，2002.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;H. K. Khalil, &lt;a href=&#34;https://www.egr.msu.edu/~khalil/NonlinearControl/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nonlinear Systems&lt;/a&gt;, 3rd ed., Prentice Hall, 2002.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;S. H. Strogatz, &lt;a href=&#34;http://www.stevenstrogatz.com/books/nonlinear-dynamics-and-chaos-with-applications-to-physics-biology-chemistry-and-engineering&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nonlinear Dynamics and Chaos: With Applications To Physics, Biology, Chemistry, And Engineering&lt;/a&gt;, CRC press, 2001.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;S. Wiggins, &lt;a href=&#34;https://www.researchgate.net/publication/258629276_Introduction_To_Applied_Nonlinear_Dynamical_Systems_And_Chaos&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Introduction to Applied Nonlinear Dynamical Systems and Chaos&lt;/a&gt;, 2nd ed., Springer, 2003.&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>大学生と大学院生のとき生活に必要だと思ったもの</title>
      <link>https://tachibana-ai.netlify.app/post/requirements/</link>
      <pubDate>Fri, 27 Aug 2021 23:32:00 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/requirements/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;最近自分の生活について振り返る機会があった．今回は生活に必要だなと思ったものを何個か挙げていくことにする．&lt;/p&gt;
&lt;p&gt;私は理系 (情報系? 制御系?) の大学に進学し，そのまま同じ大学の研究科に進学した．私が大学入学時に欲しかった情報を書くことにする．&lt;/p&gt;
&lt;h4 id=&#34;目次&#34;&gt;目次&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1 &lt;a href=&#34;#section1&#34;&gt;勉強・研究&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2 &lt;a href=&#34;#section2&#34;&gt;日常生活&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3 &lt;a href=&#34;#section3&#34;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-a-namesection1勉強研究a&#34;&gt;1. &lt;a name=&#34;section1&#34;&gt;勉強・研究&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;勉強と研究に必要だと思ったものをいくつか挙げる．&lt;/p&gt;
&lt;h5 id=&#34;ある程度スペックの良い-ノートパソコン&#34;&gt;(ある程度スペックの良い) ノートパソコン&lt;/h5&gt;
&lt;p&gt;学部で使うノートパソコンは最低限，メモリ8GBとSSD256GBは欲しい．特にWindowsを使うことを考えると，徐々に必要なマシンスペックが上がっている中で，比較的快適に使うことのできるスペックの下限がこの程度だと思う．欲を言えば，メモリ16GB以上，SSD512GB以上は欲しい．&lt;/p&gt;
&lt;p&gt;一般にノートパソコンの寿命は4年ほどと言われている．院進する予定の人であれば，学部4年もしくは修士1年で買い直すのが良いと思う (研究室で買ってくれるかもしれないが)．そのときはスペックを盛ってもいいと思う．計算を回し続けることが必要な場合は，デスクトップPCを買っても良いかもしれない．私は既成品のデスクトップPCを買って色々魔改造をした．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SSD換装．&lt;/li&gt;
&lt;li&gt;WindowsとUbuntuのデュアルブート．&lt;/li&gt;
&lt;li&gt;GPU搭載．&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;ディスプレイ&#34;&gt;ディスプレイ&lt;/h5&gt;
&lt;p&gt;私は1人暮らしにTVは不要だと思っている．集金が鬱陶しいし，ニュースを見る分にはインターネットで事足りるし．私はTVを買うくらいなら，モニターを買うのが良いと思っている．23インチのモニターも1万円代で買うことができる．&lt;/p&gt;
&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;padding-bottom: 52.5%; padding-top: 120px;&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/gp/product/B06VT3DVBD/ref=ppx_yo_dt_b_asin_title_o06_s01?ie=UTF8&amp;amp;psc=1&#34; data-iframely-url=&#34;//cdn.iframe.ly/NeNbqe3&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;これは私が買ったモニターである．デュアルモニターにすると作業効率が3倍くらいになると思う (と実感している)．特に，公式ドキュメントを横に置きながらプログラムを書くときなどに重宝している．&lt;/p&gt;
&lt;h5 id=&#34;キーボード&#34;&gt;キーボード&lt;/h5&gt;
&lt;p&gt;ノートパソコンのキーボードは打ちづらいと思ったことはないだろうか．私は何度も感じていたが，我慢して使っていた．&lt;/p&gt;
&lt;p&gt;キーボードの打ちやすさも作業効率に大きく関わってくる (と思っている)．キーボードに5千円くらい課金して作業効率が上がるなら，買うのが良いと思う．私は最近キーボードを購入したが，何故今まで購入しなかったのか，と後悔している．&lt;/p&gt;
&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;padding-bottom: 52.5%; padding-top: 120px;&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/gp/product/B08X2HNBVK/ref=ppx_yo_dt_b_asin_title_o01_s00?ie=UTF8&amp;amp;psc=1&#34; data-iframely-url=&#34;//cdn.iframe.ly/eHag0fT&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;これは私が最近買ったキーボードである．テンキーレスでコンパクト，打ちやすい，慣れている日本語配列，といった利点からかなり重宝している．ノートパソコンにUSB接続して使うこともできるので，かなり良い．&lt;/p&gt;
&lt;h5 id=&#34;ノートパソコンスタンド&#34;&gt;ノートパソコンスタンド&lt;/h5&gt;
&lt;p&gt;ノートパソコンを使っていて，画面が見づらいと思うことがあると思う．例えば机にノートパソコンを置いて使うとすると，視線は下向きになりがちである．&lt;/p&gt;
&lt;p&gt;その見づらさを解消してくれるものがノートパソコンスタンドである．M1のときにドクターの先輩に紹介してもらったが，ノートパソコンの画面が見やすくなり，かなり良い．&lt;/p&gt;
&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;padding-bottom: 52.5%; padding-top: 120px;&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/gp/product/B088H1QQ46/ref=ppx_yo_dt_b_asin_title_o02_s00?ie=UTF8&amp;amp;psc=1&#34; data-iframely-url=&#34;//cdn.iframe.ly/EWCMfof&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;これは私が買ったノートパソコンスタンドである (今は在庫切れだが)．ノートパソコンを置くだけでなく，本を置くときにも使えるのが良い．&lt;/p&gt;
&lt;p&gt;余談だが，就職活動のオンライン面接では，&amp;ldquo;上から目線&amp;rdquo;  にならないようになどという &amp;ldquo;マナー&amp;rdquo; がある．このようなノートパソコンスタンドを使えば，このマナーに違反することはないだろう．&lt;/p&gt;
&lt;h5 id=&#34;ヘッドセット&#34;&gt;ヘッドセット&lt;/h5&gt;
&lt;p&gt;COVID-19の影響で，講義や研究活動，就職活動におけるオンラインでの交流が増え，イヤホンを付ける機会が増えたように思う．イヤホンを長時間付けていると耳が痛くならないだろうか．&lt;/p&gt;
&lt;p&gt;ヘッドセットはそんな悩みを解決してくれると思う．特にゲーミングヘッドセットはデザイン性に優れ，マイクの性能が優れているので良いと思う．&lt;/p&gt;
&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;padding-bottom: 52.5%; padding-top: 120px;&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/%E3%82%A8%E3%83%AC%E3%82%B3%E3%83%A0-%E3%82%B2%E3%83%BC%E3%83%9F%E3%83%B3%E3%82%B0%E3%83%98%E3%83%83%E3%83%89%E3%82%BB%E3%83%83%E3%83%88-%E4%B8%A1%E8%80%B3%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%83%98%E3%83%83%E3%83%89-%E9%AB%98%E9%9F%B3%E8%B3%AA%E3%83%A2%E3%83%87%E3%83%AB-HS-G40BK/dp/B07Y3FX2KV/ref=sr_1_1?dchild=1&amp;amp;keywords=HS-G40BK&amp;amp;qid=1630078146&amp;amp;sr=8-1&#34; data-iframely-url=&#34;//cdn.iframe.ly/otclaig&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;私はイヤホン専門店でこのヘッドセットを見つけ，つい買ってしまった．買って後悔はしていない．&lt;/p&gt;
&lt;p&gt;私はこのヘッドセットを就職活動でも利用していた．就活サイトなどでは，「イヤホンやヘッドホンはシンプルなものが良い」であったり，「ヘッドセットはおすすめしない」などと言われているが，就職活動の説明会や面接でこのヘッドセットを付けて行っても何も言われなかったし，むしろ話を展開するために使えたので，このヘッドセットを付けていて良かったと思っている．&lt;/p&gt;
&lt;h5 id=&#34;ipad&#34;&gt;iPad&lt;/h5&gt;
&lt;p&gt;オンライン講義になり，講義資料もPDF形式で配布するといった講義も多いように思う．講義ノートを取る際，iPadを使うとかなり良かった．これは様々な人がYouTubeなどで紹介しているので，私から特に追加で言うことは少ない．&lt;/p&gt;
&lt;p&gt;私が思うiPadを使う利点をいくつか挙げる．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;講義ノートをiPadのアプリで取ることができる．つまり，講義ノートが1つのiPadで完結する．&lt;/li&gt;
&lt;li&gt;ペンシルが優秀．&lt;/li&gt;
&lt;li&gt;他のタブレットよりも操作性や性能が良い．&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私は研究室の予算で買ったiPadを使っているので，卒業のタイミングで返す必要がある．社会人になって給料が入ったらすぐ買いたいと思っている．&lt;/p&gt;
&lt;p&gt;私はタブレットでノートを取るのは良いと思っているが，タブレットで専門書を読むのは好きではない．同時に複数のページを開くことが難しいということが主な理由である．特に専門書では，定義を振り返って読むことが多く，一度に複数のページを開きたいということが多い．現状電子書籍でこれを行うのは難しい．やはり専門書は紙のものに限ると思う (たくさん読む論文は別．印刷した論文が溜まるのが鬱陶しいので)．&lt;/p&gt;
&lt;h3 id=&#34;2-a-namesection2日常生活a&#34;&gt;2. &lt;a name=&#34;section2&#34;&gt;日常生活&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;私はズボラなので，家事はめんどくさいと感じるタイプである．また，汚れている水回りに触れるのは嫌だと感じるし，虫は大の苦手である．しかし，1人暮らしをする以上，ある程度は我慢しなければならない．&lt;/p&gt;
&lt;p&gt;そんな私が重宝しているものをいくつか挙げる．&lt;/p&gt;
&lt;h5 id=&#34;使い捨てのダスター&#34;&gt;使い捨てのダスター&lt;/h5&gt;
&lt;p&gt;(特にキッチンの) 水回りの掃除で，ステンレスが汚れていたり濡れていたりするときなどに，使うことが多い．大量にあるから汚れたら捨てれば良く，汚くなった水回りの掃除に重宝する．&lt;/p&gt;
&lt;p&gt;ホームセンターなどに安く売られているので，足りなくなったら買うようにしている．&lt;/p&gt;
&lt;h5 id=&#34;使い捨てのゴム手袋&#34;&gt;使い捨てのゴム手袋&lt;/h5&gt;
&lt;p&gt;久しぶりに掃除をするときに，汚れている水回りは素手で触りたくない．そんなときは，使い捨てのゴム手袋をすれば良い．いくら汚れていても素手では触れないからまだマシであろう．&lt;/p&gt;
&lt;h5 id=&#34;殺虫剤&#34;&gt;殺虫剤&lt;/h5&gt;
&lt;p&gt;家の中に虫が出ることもあるだろう．小さな虫なら良いが，大きな虫は見るだけで気持ち悪いし，触りたくない．そんなときは遠慮せずに殺虫剤を使うと精神衛生に良いだろう．キンチョールあたりは強力なので，ホームセンターあたりで買って常備しておくと良いだろう．&lt;/p&gt;
&lt;h3 id=&#34;3-a-namesection3まとめa&#34;&gt;3. &lt;a name=&#34;section3&#34;&gt;まとめ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;今回は，大学入学時に知っておきたかった，大学生活に必要だと思うものについてまとめた．私と同じような学科の人にはもしかしたら参考になるかもしれない．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>最適制御問題: 直接法 (プログラム)</title>
      <link>https://tachibana-ai.netlify.app/post/optimal_control_direct_method/</link>
      <pubDate>Fri, 27 Aug 2021 23:15:59 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/optimal_control_direct_method/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://tachibana-ai.netlify.app/post/optimal_control_numerical/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最適制御問題: 最適制御問題の数値解法&lt;/a&gt; のdirect single shootingを実装したものを載せる．&lt;/p&gt;
&lt;h3 id=&#34;1-コード&#34;&gt;1. コード&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;########## Packages ##########
from casadi import *
import numpy as np
import os 
import matplotlib.pyplot as plt 
##############################

########### plt ##########
plt.rcParams[&amp;quot;font.family&amp;quot;] = &amp;quot;serif&amp;quot;       # fonts
plt.rcParams[&amp;quot;font.serif&amp;quot;] = &amp;quot;Times New Roman&amp;quot;
plt.rcParams[&amp;quot;font.size&amp;quot;] = 18              
plt.rcParams[&amp;quot;mathtext.cal&amp;quot;] = &amp;quot;serif&amp;quot;      
plt.rcParams[&amp;quot;mathtext.rm&amp;quot;] = &amp;quot;serif&amp;quot;       
plt.rcParams[&amp;quot;mathtext.it&amp;quot;] = &amp;quot;serif:italic&amp;quot;
plt.rcParams[&amp;quot;mathtext.bf&amp;quot;] = &amp;quot;serif:bold&amp;quot;  
plt.rcParams[&amp;quot;mathtext.fontset&amp;quot;] = &amp;quot;cm&amp;quot;     
###########################
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Direct_single_shooting():
    &amp;quot;&amp;quot;&amp;quot;
    Solve optimal control problem numerically using direct single shooting method.
    &amp;quot;&amp;quot;&amp;quot;
    def __init__(self, T, N):
        self.T = T  # time horizon
        self.N = N  # number of control intervals
    
    def model_equation(self, x0, x1, u):
        &amp;quot;&amp;quot;&amp;quot;
        model equation
        dx_0/dt = (1 - x_1^2)x_0 - x_1 + u
        dx_1/dt = x_0
        &amp;quot;&amp;quot;&amp;quot;
        return vertcat((1 - x1**2)*x0 - x1 + u, x0)
    
    def stage_cost(self, x0, x1, u):
        &amp;quot;&amp;quot;&amp;quot;
        stage cost
        L(x, u) = x_0^2 + x_1^2 + u^2
        &amp;quot;&amp;quot;&amp;quot;
        return x0**2 + x1**2 + u**2 
    
    def discrete_dynamics(self, x0, x1, u):
        &amp;quot;&amp;quot;&amp;quot;
        Formulate discrete time dynamics
        &amp;quot;&amp;quot;&amp;quot;
        x = vertcat(x0, x1)
        xdot = self.model_equation(x0, x1, u)
        L = self.stage_cost(x0, x1, u)
        # CVODES from the SUNDIALS suite
        dae = {&#39;x&#39;: x, &#39;p&#39;: u, &#39;ode&#39;: xdot, &#39;quad&#39;: L}
        opts = {&#39;tf&#39;: self.T/self.N}
        F = integrator(&#39;F&#39;, &#39;cvodes&#39;, dae, opts)
        return F 
    
    def nlp(self, x0, x1, u, xinit):
        &amp;quot;&amp;quot;&amp;quot;
        Formulate and solve the NLP
        Given
        - x, u: MX.sym 
        - xinit: initial value of x
        &amp;quot;&amp;quot;&amp;quot;
        # discrete time dynamics
        F = self.discrete_dynamics(x0, x1, u)

        # empty
        w = []
        w0 = []
        lbw = []
        ubw = []
        J = 0 
        g = []
        lbg = []
        ubg = []

        # Formulate the NLP
        Xk = MX(xinit)
        for k in range(self.N):
            # New NLP variable for the control
            Uk = MX.sym(&#39;U_&#39; + str(k))
            w += [Uk]
            lbw += [-1]         # lower bound of u
            ubw += [1]          # upper bound of u
            w0 += [0]

            # Integrate till the end of the interval
            Fk = F(x0=Xk, p=Uk)
            Xk = Fk[&#39;xf&#39;]
            J = J + Fk[&#39;qf&#39;]

            # Add inequality constraints
            g += [Xk[0]]
            lbg += [-0.25]         # lower bound of x 
            ubg += [inf]          # upper bound of x
        
        # Create an NLP slver
        prob = {&#39;f&#39;: J, &#39;x&#39;: vertcat(*w), &#39;g&#39;: vertcat(*g)}
        solver = nlpsol(&#39;solver&#39;, &#39;ipopt&#39;, prob)

        # Solve the NLP 
        sol = solver(x0=w0, lbx=lbw, ubx=ubw, lbg=lbg, ubg=ubg)
        return sol 
    
    def plot_solution(self, x0, x1, u, xinit):
        &amp;quot;&amp;quot;&amp;quot;
        Plot the solution
        Given
        - x, u: MX.sym 
        - xinit: initial value of x
        &amp;quot;&amp;quot;&amp;quot;
        F = self.discrete_dynamics(x0, x1, u)
        sol = self.nlp(x0, x1, u, xinit)
        u_opt = sol[&#39;x&#39;]
        x_opt = [xinit]
        for k in range(self.N):
            Fk = F(x0=x_opt[-1], p=u_opt[k])
            x_opt.append(Fk[&#39;xf&#39;].full())
        x0_opt = [r[0] for r in x_opt]
        x1_opt = [r[1] for r in x_opt]

        tgrid = [self.T/self.N*k for k in range(self.N + 1)]

        fig = plt.figure(figsize=(10, 7.5))
        ax = fig.add_subplot(1,1,1)
        ax.plot(tgrid, x0_opt, &#39;--&#39;, label=r&#39;$x_0$&#39;)
        ax.plot(tgrid, x1_opt, &#39;-&#39;, label=r&#39;$x_1$&#39;)
        ax.step(tgrid, vertcat(DM.nan(1), u_opt), &#39;-.&#39;, label=r&#39;$u$&#39;)
        ax.legend(loc=&#39;best&#39;)
        ax.set_xlabel(r&#39;$t$&#39;); ax.set_ylabel(r&#39;$x_0, x_1, u$&#39;)
        ax.set_xlim([0, self.T])
        ax.grid(True)
        plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;########## Parameters ##########
T = 10
N = 20
################################

########## Instance ##########
direct_single_shooting = Direct_single_shooting(T=T, N=N)
##############################

########## figure ##########
x0 = MX.sym(&#39;x0&#39;)
x1 = MX.sym(&#39;x1&#39;)
u = MX.sym(&#39;u&#39;)
xinit = [0, 1]
direct_single_shooting.plot_solution(x0=x0, x1=x1, u=u, xinit=xinit)
############################
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>最適制御問題: 最適制御問題の数値解法</title>
      <link>https://tachibana-ai.netlify.app/post/optimal_control_numerical/</link>
      <pubDate>Fri, 27 Aug 2021 22:55:15 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/optimal_control_numerical/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;先日，6章の内容をまとめた (&lt;a href=&#34;https://tachibana-ai.netlify.app/post/optimal_control_dp/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最適制御問題: 動的計画法と最小原理&lt;/a&gt;)．7章の数値解法のあたりでかなり詰まってしまっていた．今回は他の文献も用いてまとめたいと思う．&lt;/p&gt;
&lt;p&gt;理解が間違えている箇所もあるかもしれないので，ミスに気付いたら修正したいと思っている．&lt;/p&gt;
&lt;h4 id=&#34;01-目次&#34;&gt;0.1. 目次&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1 &lt;a href=&#34;#section1&#34;&gt;導入&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;1.1 &lt;a href=&#34;#section1.1&#34;&gt;最適制御のアプローチ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2 &lt;a href=&#34;#section2&#34;&gt;直接法&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;2.1 &lt;a href=&#34;#section2.1&#34;&gt;Direct Single Shooting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2.2 &lt;a href=&#34;#section2.2&#34;&gt;Collocation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2.3 &lt;a href=&#34;#section2.3&#34;&gt;Direct Multiple Shooting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3 &lt;a href=&#34;#section3&#34;&gt;実装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4 &lt;a href=&#34;#section4&#34;&gt;手書きメモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;5 &lt;a href=&#34;#section5&#34;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-a-namesection1導入a&#34;&gt;1. &lt;a name=&#34;section1&#34;&gt;導入&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ここで扱う最適制御問題は，以下の形式をしているものとする．&lt;/p&gt;
&lt;p&gt;$$\underset{x(\cdot), u(\cdot)}{\mathrm{minimize}} \ \ \varphi(x(T)) + \int_0^T L(x(t), u(t)) dt \tag{1}$$
subject to
$$\begin{cases} x(0) - x_0 = 0, &amp;amp; (\text{initial value}) \\ \dot{x}(t) - f(x(t), u(t)) = 0, \ \forall t \in [0, T], &amp;amp; (\text{state equation}) \\ h(x(t), u(t)) \geq 0, \ \forall t \in [0, T], &amp;amp; (\text{path constraints}) \\ r(x(T)) = 0. &amp;amp; (\text{terminal constraints}) \end{cases}$$&lt;/p&gt;
&lt;p&gt;例えば，ロボットがトルクや角度に関する制約を満たしながらある所望の終端状態になるように動作するというものはこのような問題として記述される．&lt;/p&gt;
&lt;h4 id=&#34;11-a-namesection11最適制御のアプローチa&#34;&gt;1.1. &lt;a name=&#34;section1.1&#34;&gt;最適制御のアプローチ&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;最適制御問題の数値解法として，主に以下の3つのアプローチがある&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Dynamic programming&lt;/li&gt;
&lt;li&gt;Indirect methods&lt;/li&gt;
&lt;li&gt;Direct methods&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;dynamic-programming-動的計画法&#34;&gt;Dynamic programming (動的計画法)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;最適性の原理を使用して任意の時刻$t$および任意の初期状態$x_0$に対するフィードバック制御を再帰的に計算する．&lt;/li&gt;
&lt;li&gt;連続時間の場合，Hamilton-Jacobi-Bellman (HJB) 方程式という状態空間上の偏微分方程式が導かれる．&lt;/li&gt;
&lt;li&gt;近似的に数値計算する方法はあるが，「次元の呪い」によって小さい次元に制限される．&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;indirect-methods-間接法&#34;&gt;Indirect methods (間接法)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;無限次元の最適化の必要条件を使用して，常微分方程式の初期値境界値問題を導出する．&lt;/li&gt;
&lt;li&gt;&amp;ldquo;first optimize, then discretize&amp;rdquo;&lt;/li&gt;
&lt;li&gt;変分法&lt;/li&gt;
&lt;li&gt;初期値境界値問題を解くのが難しい．&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;direct-methods-直接法&#34;&gt;Direct methods (直接法)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;無限次元の最適化問題を有限次元の非線形計画問題に変換し，非線形計画問題を数値的に解く．&lt;/li&gt;
&lt;li&gt;&amp;ldquo;first discretize, then optimize&amp;rdquo;&lt;/li&gt;
&lt;li&gt;制御軌道の有限次元のパラメータ化に基づく．&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実世界への実装ではdirect methodsが広く用いられている．次節でdirect methodsについて簡単にまとめる．&lt;/p&gt;
&lt;h3 id=&#34;2-a-namesection2直接法a&#34;&gt;2. &lt;a name=&#34;section2&#34;&gt;直接法&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;直接法は，無限次元の最適制御問題 (1) を有限次元の非線形計画問題 (NLP)
$$\underset{w}{\text{minimize}} \ a(w) \ \ \text{subject to} \  b(w) = 0, \ c(w) \geq 0 \tag{2}$$
に帰着させる方法である．ただし，$w$は最適化の自由度を表す有限次元ベクトル，$a$ は微分可能関数 (スカラー)，$b, c$は微分可能関数 (ベクトル) である． 直接法はまず制御軌道をパラメータ化するが，状態軌道の処理方法は&amp;quot;sequential&amp;quot; approach と &amp;ldquo;simultaneous&amp;rdquo; approachに分けられる．&lt;/p&gt;
&lt;h5 id=&#34;sequential-approach&#34;&gt;Sequential approach&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;状態の軌道$x(t)$は制御入力$u(t)$と初期状態$x_0$の陰関数とみなされる．&lt;/li&gt;
&lt;li&gt;(例) Direct single shooting. ODE solverによるforward simulation.&lt;/li&gt;
&lt;li&gt;Simulationとoptimizationのiterationsは順番に進む．&lt;/li&gt;
&lt;li&gt;離散化された制御入力が得られる．&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;simultaneous-approach&#34;&gt;Simultaneous approach&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;状態の軌道$x(t)$をNLP内の最適化変数として記述し，ODEモデルを表す等式制約を追加する．&lt;/li&gt;
&lt;li&gt;Simulationとoptimizationは同時に進行する．&lt;/li&gt;
&lt;li&gt;制御入力の軌道に対応する状態の軌道がNLPの解として得られる．&lt;/li&gt;
&lt;li&gt;(例) Direct collocation, direct multiple shooting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;次に，直接法の代表的な3つの手法，(i) direct single shooting, (ii) direct collocation, (iii) direct multiple shooting の考え方についてまとめる．&lt;/p&gt;
&lt;h4 id=&#34;21-a-namesection21direct-single-shootinga&#34;&gt;2.1. &lt;a name=&#34;section2.1&#34;&gt;Direct Single Shooting&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Single shootingではまず，制御入力を離散化する．評価区間$[0, T]$を$0 = t_0 &amp;lt; t_1 &amp;lt; \cdots &amp;lt; t_N = T$の$N$個に分割し，制御入力$u(t)$を
$$u(t) = q_i \ \ \text{for} \ \ t \in [t_i, t_{i + 1}]$$
のようにpiecewise constantになるようにする．つまり，$u(t)$は制御パラメータ$q = (q_0, q_1, \ldots, q_{N - 1})$にのみ依存し，$u(t; q)$と書くことができる．よって，初期値問題
$$x(0) = x_0, \ \dot{x}(t) = f(x(t), u(t; q)), \ \ \forall t \in [0, T]$$
を考え，$t \in [0, T]$における状態$x(t)$を従属変数として$x(t; q)$と表す．Direct single shootingは例えば下の図のように表される．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-direct-single-shootingの例&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./direct_single_shooting.png&#34; alt=&#34;fig_1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Direct single shootingの例
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Semi-infinite problemにならないようにするために，Path constraintsも離散化することを考える．例えば，$h(x(t), u(t)) \geq 0$が点$t_i$でのみ成り立つようにする．&lt;/p&gt;
&lt;p&gt;以上をまとめると，以下のような有限次元の非線形計画問題を得る．&lt;/p&gt;
&lt;p&gt;$$\underset{q}{\text{minimize}} \ \ \varphi(x(T; q)) + \int_0^T L(x(t; q), u(t;q)) dt \tag{3}$$
subject to
$$\begin{cases} h(x(t_i; q), u(t_i; q)) \geq 0, \ \ i = 0, \ldots, N &amp;amp; (\text{discretized path constraints}) \\ r(x(T; q)) = 0 &amp;amp; (\text{terminal constraints}) \end{cases}$$&lt;/p&gt;
&lt;p&gt;この問題は有限次元の最適化ソルバで解くことができる．例えば，&lt;a href=&#34;https://github.com/coin-or/Ipopt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IPOPT&lt;/a&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; (主双対内点法という方法を利用した連続最適化問題を解くライブラリ) などを用いることができる．&lt;/p&gt;
&lt;h5 id=&#34;direct-single-shootingの利点&#34;&gt;Direct single shootingの利点&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;最先端のODEまたはDAEソルバーを使用できること．&lt;/li&gt;
&lt;li&gt;大規模なODEまたはDAEシステムでも最適化の自由度が少ないこと．&lt;/li&gt;
&lt;li&gt;必要なことが制御入力の自由度の初期推定のみであること．&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;direct-single-shootingの欠点&#34;&gt;Direct single shootingの欠点&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;初期化で状態の軌道$x$の知識を使用できない．&lt;/li&gt;
&lt;li&gt;ODEの解$x(t; q)$が$q$の非線形性に依存する可能性がある．&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;実装の容易さなどからsingle shooting approachは工学的応用の観点ではよく用いられる．&lt;/p&gt;
&lt;h4 id=&#34;22-a-namesection22collocationa&#34;&gt;2.2. &lt;a name=&#34;section2.2&#34;&gt;Collocation&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;ここでは，collocationの考え方について簡単にまとめる．まず，制御入力と状態を離散化する．特に，制御入力が各$[t_i, t_{i + 1}]$で$q_i$である (piecewise constantである) ように選ぶ．また，点$t_i$における状態が$s_i \approx x(t_i)$であるとする．&lt;/p&gt;
&lt;p&gt;このとき，無限次元のODE
$$\dot{x}(t) - f(x(t), u(t)) = 0, \ \ t \in [0, T]$$
は有限個の等式制約
$$c_i(q_i, s_i, s_i^{\prime}, s_{i + 1}) = 0, \ \ i = 0, \ldots, N - 1$$
に置き換えられる．ただし，$s_i^{\prime}$は区間$[t_i, t_{i + 1}]$中の &amp;ldquo;collocation points&amp;rdquo; における状態の軌道を表すものとする．これらの点の位置を適切に選択することで，高いオーダーでの近似が達成される．通常$s_i^{\prime}$は直交多項式の零点になるように選ばれる．&lt;/p&gt;
&lt;p&gt;ここでは簡単のため，中間変数$s_i^{\prime}$が存在しない場合について述べる．このとき，追加の等式制約は以下のように表される．
$$c(q_i, s_i, s_{i + 1}) := \frac{s_{i + 1} - s_i}{t_{i + 1} - t_i} - f\left( \frac{s_i + s_{i + 1}}{2}, q_i \right).$$&lt;/p&gt;
&lt;p&gt;次に，collocation intervals内の積分を近似する．例えば，
$$l_i(q_i, s_i, s_{i + 1}) := L\left( \frac{s_i + s_{i + 1}}{2}, q_i \right) (t_{i + 1} - t_i) \approx \int_{t_i}^{t_{i + 1}} L(x(t), u(t)) dt$$
のようにする．このような離散化をすると，巨大だがスパースなNLPを得る．&lt;/p&gt;
&lt;p&gt;$$\underset{s, q}{\text{minimize}} \ \ \varphi(s_N) + \sum_{i = 0}^{N - 1} l(q_i, s_i, s_{i + 1})$$
subject to
$$\begin{cases} s_0 - x_0 = 0, &amp;amp; (\text{fixed initial value}) \\ c_i(q_i, s_i, s_{i + 1}) = 0, \ i = 0, \ldots, N - 1, &amp;amp; (\text{discretized ODE model}) \\ h(s_i, q_i) = 0, \ i = 0, \ldots, N, &amp;amp; (\text{discretized path constraints}) \\ r(s_N) = 0. &amp;amp; (\text{terminal constraints}) \end{cases}$$&lt;/p&gt;
&lt;p&gt;この問題は内点法を用いたソルバで解くことができる．効率的なNLPの手法では通常，反復が実行可能に保たれないので，離散化されたODE modelの方程式はNLPの解でのみ満たされる．つまり，simulationとoptimizationが同時に進行する．&lt;/p&gt;
&lt;h5 id=&#34;collocation-methodsの利点&#34;&gt;Collocation methodsの利点&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;非常にスパースなNLPが得られること．&lt;/li&gt;
&lt;li&gt;初期化で状態軌道$x$の知識を使用できること．&lt;/li&gt;
&lt;li&gt;局所収束が高速であること．&lt;/li&gt;
&lt;li&gt;不安定なシステムを扱うことができること．&lt;/li&gt;
&lt;li&gt;状態と終端制約の処理が容易であること．&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;collocation-methodsの欠点&#34;&gt;Collocation methodsの欠点&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;離散化の誤差を適応的に制御しようとすると，再度grid化を行う必要があり，NLPの次元を変更する必要があること．
&lt;ul&gt;
&lt;li&gt;そのため，collocationのapplicationでは適切な離散化誤差の制御の問題に対処しないことがよくある．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Collocation methodsは実用的な最適制御問題にも使われている．&lt;/p&gt;
&lt;h4 id=&#34;23-a-namesection23direct-multiple-shootinga&#34;&gt;2.3. &lt;a name=&#34;section2.3&#34;&gt;Direct Multiple Shooting&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Direct multiple shooting methodは，simultaneous method (e.g. collocation) とsingle shootingの利点を組み合わせ，adaptive, error controlled ODE solversを使えるようにしたものである．&lt;/p&gt;
&lt;p&gt;まず，制御入力を
$$u(t) = q_i \ \ \text{for} \ \ t \in [t_i, t_{i + 1}]$$
のようにpicewise constantになるようにする．ただし，$t_i$と$t_{i + 1}$の間隔はsingle shootingと同じになるようにする．&lt;/p&gt;
&lt;p&gt;次に，各時間区間$[t_i, t_{i + 1}]$において独立に，人工的な初期値$s_i$からODEを解く．
$$\dot{x}_i(t) = f(x_i(t), q_i), \ \ t \in [t_i, t_{i + 1}],$$
$$x_i(t_i) = s_i.$$
ここまでで得られる制御入力と軌道は，例えば下の図のようになる．
















&lt;figure  id=&#34;figure-direct-multiple-shootingの例&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./direct_multiple_shooting.png&#34; alt=&#34;fig_2&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Direct Multiple Shootingの例
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;この初期値問題を数値的に解くことによって，軌道$x(t; s_i, q_i)$を得る．このODEの解の計算と同時に積分
$$l_i(s_i, q_i) := \int_{t_i}^{t_{i + 1}} L(x_i(t_i; s_i, q_i)) dt$$
を数値的に計算する．&lt;/p&gt;
&lt;p&gt;人工的な変数$s_i$を物理的に意味のある値に拘束するために，連続性の条件
$$s_{i + 1} = x_i(t_{i + 1}; s_i, q_i)$$
を課す．このようにして，single shootingで得られたNLPと等価でありながら，余剰の変数$s_i$を含み，block sparse structureを持つNLPの定式化を得る．&lt;/p&gt;
&lt;p&gt;$$\underset{s, q}{\text{minimize}} \ \ \varphi(s_N) + \sum_{i = 0}^{N - 1} l_i(s_i, q_i) \tag{4}$$
subject to
$$\begin{cases} s_0 - x_0 = 0, &amp;amp; (\text{initial value}) \\ s_{i + 1} - x_i(t_{i + 1}; s_i, q_i) = 0, \ \ i = 0, \ldots, N - 1, &amp;amp; (\text{continuity}) \\ h(s_i, q_i) \geq 0, \ \ i = 0, \ldots, N, &amp;amp; (\text{discretized path constraints}) \\ r(s_N) = 0. &amp;amp; (\text{terminal constraints}) \end{cases}$$&lt;/p&gt;
&lt;p&gt;すべての変数を$w := (s_0, q_0, s_1, q_1, \ldots, s_N)$とまとめると，(2)の形式のNLPを得る．&lt;/p&gt;
&lt;p&gt;Direct multiple shootingは，sequential methodとsimultaneous methodの利点を両方持つ．オフラインの最適制御問題の数値計算の他，オンライン最適化やMPCにも応用されている．&lt;/p&gt;
&lt;h3 id=&#34;3-a-namesection3実装a&#34;&gt;3. &lt;a name=&#34;section3&#34;&gt;実装&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;以下の例題を数値的に解く．
$$\underset{x(\cdot) \in \mathbb{R}^2, u(\cdot) \in \mathbb{R}}{\text{minimize}} \ \ \int_0^T (x_1^2 + x_2^2 + u^2) dt$$
subject to
$$\begin{cases} x(0) = x_0, &amp;amp; (\text{initial value}) \\ \dot{x}_0 = (1 - x_1^2)x_0 - x_1 + u, \ \ \dot{x}_1 = x_0 \ \ t \in [0, T], &amp;amp; (\text{state equation})  \\ x_1 \geq -0.25, |u(t)| \leq 1, \ \ t \in [0, T], &amp;amp; (\text{bounds}) \end{cases}$$
初期値を$x_0 = [0, 1]^{\mathrm{T}}$とし，$T = 10, N = 20$とする．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://web.casadi.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CasADi&lt;/a&gt;&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; を用いてdirect single shooting methodを実装した．実装したコードは&lt;a href=&#34;https://tachibana-ai.netlify.app/post/optimal_control_direct_method/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最適制御問題: 直接法 (プログラム)&lt;/a&gt; に載せている．&lt;/p&gt;
&lt;p&gt;実行後得られた最適制御および状態を以下に示す．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-得られた最適制御と状態&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./direct_single_shooting_2_3.svg&#34; alt=&#34;fig_3&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      得られた最適制御と状態
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;4a-namesection4手書きメモa&#34;&gt;4.&lt;a name=&#34;section4&#34;&gt;手書きメモ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;非線形最適制御問題入門&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;の7章では，最適制御問題の数値解法がいくつか紹介されている．&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;数値解法&lt;/th&gt;
&lt;th&gt;長所&lt;/th&gt;
&lt;th&gt;短所&lt;/th&gt;
&lt;th&gt;適する用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;勾配法&lt;/td&gt;
&lt;td&gt;$H$の高階導関数が不要&lt;/td&gt;
&lt;td&gt;最適解近傍での収束が遅い&lt;/td&gt;
&lt;td&gt;最適解のおおよその様子を手軽に知りたいとき&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;シューティング法&lt;/td&gt;
&lt;td&gt;未知量が有限次元&lt;/td&gt;
&lt;td&gt;計算が発散しやすい&lt;/td&gt;
&lt;td&gt;良好な初期推定解が選べるとき&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;入力関数のニュートン法&lt;/td&gt;
&lt;td&gt;最適解近傍での収束が速い&lt;/td&gt;
&lt;td&gt;$H$の2階偏導関数が必要で，各反復での計算量が多い&lt;/td&gt;
&lt;td&gt;最適解を精度よく求めたいとき&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;動的計画法&lt;/td&gt;
&lt;td&gt;状態フィードバック制御が得られる&lt;/td&gt;
&lt;td&gt;状態の次元が高いと記憶量が膨大&lt;/td&gt;
&lt;td&gt;状態の次元が低いか，狭い範囲だけ考慮すればよいとき&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以下に手書きメモを掲載する．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tachibana-ai.netlify.app/files/optimal_control/Sec7.1.pdf&#34; target=&#34;_blank&#34;&gt;7.1節&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tachibana-ai.netlify.app/files/optimal_control/Sec7.2.pdf&#34; target=&#34;_blank&#34;&gt;7.2節&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tachibana-ai.netlify.app/files/optimal_control/Sec7.3.pdf&#34; target=&#34;_blank&#34;&gt;7.3節&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tachibana-ai.netlify.app/files/optimal_control/Sec7.4-7.6.pdf&#34; target=&#34;_blank&#34;&gt;7.4 - 7.6節&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5a-namesection5まとめa&#34;&gt;5.&lt;a name=&#34;section5&#34;&gt;まとめ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;この記事では，最適制御の数値解法について簡単にまとめ，例題を数値的に解いた．理解が間違えている箇所があるかもしれないので，もう一度確認したいと思っている．&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;M. Diehl, et al., &amp;ldquo;&lt;a href=&#34;https://www.researchgate.net/publication/29603798_Fast_Direct_Multiple_Shooting_Algorithms_for_Optimal_Robot_Control&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fast direct multiple shooting algorithms for optimal robot control&lt;/a&gt;,&amp;rdquo; Fast motions in biomechanics and robotics, pp. 66-93, Springer, 2006.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;A. Wächter and L. T. Biegler, &amp;ldquo;&lt;a href=&#34;https://link.springer.com/article/10.1007%2Fs10107-004-0559-y&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;On the Implementation of a Primal-Dual Interior Point Filter Line Search Algorithm for Large-Scale Nonlinear Programming&lt;/a&gt;,&amp;rdquo; Mathematical Programming vol. 106, no. 1, pp. 25-57, 2006 (&lt;a href=&#34;http://www.optimization-online.org/DB_HTML/2004/03/836.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;preprint&lt;/a&gt;)&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;J. A. E.Andersson, et al, &amp;ldquo;&lt;a href=&#34;https://link.springer.com/article/10.1007/s12532-018-0139-4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CasADi - A software framework for nonlinear optimization and potimal control&lt;/a&gt;,&amp;rdquo; Mathematical Programming Computation, In Press, 2018.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;大塚，&lt;a href=&#34;https://www.coronasha.co.jp/np/isbn/9784339033182/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;非線形最適制御問題入門&lt;/a&gt;，コロナ社，2011.&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>学部生の頃バーに行っていた話と学部卒業時にガールズバーに行った話</title>
      <link>https://tachibana-ai.netlify.app/post/blog_bar/</link>
      <pubDate>Sun, 08 Aug 2021 21:56:49 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/blog_bar/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;最近体調が優れない (低気圧の影響) ことが多く，やる気も起こらず，研究の進捗もそれほど良くないということが続いている．このままでは良くない&amp;hellip;と思い，来週は1週間休みを取り，研究のことはあまり考えずにリフレッシュすることにした．来週休みを取るために，今週金曜までは集中講義に参加するほか，論文の修正作業を少しだけ頑張っていた．&lt;/p&gt;
&lt;p&gt;話は変わるが，私は学部1年から近所のバーに行くことが好きだった．今回はバーについて書こうと思う．&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;流れてきたキャバクラ漫画見てこれ思い出した &lt;a href=&#34;https://t.co/TqsBKW9YWW&#34;&gt;https://t.co/TqsBKW9YWW&lt;/a&gt;&lt;/p&gt;&amp;mdash; 橘 あい (@tcbn_ai) &lt;a href=&#34;https://twitter.com/tcbn_ai/status/1424250246838636544?ref_src=twsrc%5Etfw&#34;&gt;August 8, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;キャバクラの漫画を見て，これを思い出したので．&lt;/p&gt;
&lt;h3 id=&#34;1-通っていた近所のバー&#34;&gt;1. 通っていた近所のバー&lt;/h3&gt;
&lt;p&gt;先に書いておくが，私が学部1年から行っていたバーはガールズバーではなく，普通の (?) お酒を提供しているバーであった．学部1年のときは1ヶ月に1回くらい夕食をそこで食べたりノンアルコールの飲み物を飲んだりしていた．&lt;/p&gt;
&lt;p&gt;そのバーで30代の方や40代の方と知り合って，話すようになった．自分はコミュ障だと思っていたが，意外と大人とは話せるということに気付いた (この「大人と話せる」というものは就活や研究室でのミーティングで大いに活かされている)．同年代の人と話すのは少し苦手意識がある．&lt;/p&gt;
&lt;p&gt;恋愛的な相談をしたり，将来のことを話したり，常連の方と話したり，常連の方のお子さんの勉強について少し話したり，といろいろなことがあり，学部時代の楽しみの1つになっていた．&lt;/p&gt;
&lt;p&gt;そのバーの常連さんの1人に，かなりお金持ちでほぼ毎回奢ってくれる方 (以降Aさん) がいた．学部卒業のとき，学位記授与の前日にAさんにガールズバーに連れて行ってもらった．&lt;/p&gt;
&lt;h3 id=&#34;2-一度だけ行ったガールズバー&#34;&gt;2. 一度だけ行ったガールズバー&lt;/h3&gt;
&lt;p&gt;人生で初めて入ったガールズバーのレポートを1年半後にする，というのはなかなか面白い試みである．かなり衝撃を受けたのを覚えており，今でもレポートが書けてしまう．&lt;/p&gt;
&lt;h4 id=&#34;21-ガールズバーに行くことになった経緯&#34;&gt;2.1. ガールズバーに行くことになった経緯&lt;/h4&gt;
&lt;p&gt;卒論発表が終わった翌週くらいに近所のバーに行っていた．そのときAさんもバーにいて，卒業前に一緒にご飯に行こう，と誘ってくれた．&lt;/p&gt;
&lt;p&gt;Aさんの仕事終わりに駅前の居酒屋で軽くご飯を食べて，軽く飲んでいた．その後，Aさんから「ガールズバー行く？おっぱい揉みたい？」と言われた．そういう店が近くにあるかは疑問だったが，私はこれまで入ったことのないガールズバーというものに惹かれ，「行きたいです！」と答えた．&lt;/p&gt;
&lt;h4 id=&#34;22-ガールズバーの中&#34;&gt;2.2. ガールズバーの中&lt;/h4&gt;
&lt;p&gt;Aさんが予約してくれた．お店に入り，席につくと，私とAさんが座ったところに女の子2人がついてくれた．1人は私より若かった．服装は，キャバクラの漫画に出てくるような女性の服装をイメージしていただければ幸いである．当然谷間を出して胸を強調した服装である．&lt;/p&gt;
&lt;p&gt;こういうことに耐性のない私は当然緊張していた．ゲームをして負けたら一気みたいなことをすることになった．私と女の子が2人負けで一緒に飲むということになり，「優しいね」とその子が言ってくれた．リップサービスと分かっていても，嬉しくなった．また，当然のようにボディータッチもしてきて，耐性のない私はずっとどぎまぎしていた．さまざまな意味で変な反応をしてしまわないように，お酒が入った状態で必死に理性を保とうとしていた．&lt;/p&gt;
&lt;p&gt;1時間半程経過して，女の子のチェンジが入った．席の交代で来てくださった方の1人は私より年上で，日中は他の仕事をしている方だった．興味がわき，その人の話を聞いていた．私も，自分が大学でやっていたことなどを話していた．&lt;/p&gt;
&lt;p&gt;その方はかなり頭の切れる方で，私も話していてとても楽しかった．やはり私は知的好奇心を満たしてくれる方や理知的な方が人間的に好きなのだろう，と実感した．&lt;/p&gt;
&lt;p&gt;3時間ほどお店にいた後，Aさんが潰れたので帰ることになった．料金はAさんが全て払ってくれた．ありがたかった．&lt;/p&gt;
&lt;h3 id=&#34;3-まとめ&#34;&gt;3. まとめ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;バーに通っていた&lt;/li&gt;
&lt;li&gt;学部卒業の際，ガールズバーに行った&lt;/li&gt;
&lt;li&gt;リップサービスでも嬉しいものは嬉しいが，私には慣れない&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>最適制御問題: 動的計画法と最小原理</title>
      <link>https://tachibana-ai.netlify.app/post/optimal_control_dp/</link>
      <pubDate>Mon, 02 Aug 2021 21:12:28 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/optimal_control_dp/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;

&lt;p&gt;先日は，5章の内容をまとめた (&lt;a href=&#34;https://tachibana-ai.netlify.app/post/optimal_control_continuous/&#34;&gt;最適制御問題: 連続時間システムの最適制御&lt;/a&gt;)．少し間が空いてしまったが，今回は6章の内容をまとめる．&lt;/p&gt;

&lt;h3 id=&#34;1-6章の概要&#34;&gt;1. 6章の概要&lt;/h3&gt;

&lt;p&gt;6章では，最適制御問題に動的計画法を適用して，HJB方程式という偏微分方程式を導出している．変分法で導かれた常微分方程式の2点境界値問題であるオイラー・ラグランジュ方程式と，動的計画法から導かれた偏微分方程式であるHJB方程式は何らかのつながりがある．動的計画法から最小原理と呼ばれる条件を経由してオイラー・ラグランジュ方程式が導かれる．&lt;/p&gt;

&lt;p&gt;以下に，各節の内容をまとめた手書きのメモを掲載する．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tachibana-ai.netlify.app/files/optimal_control/Sec6.1.pdf&#34; target=&#34;_blank&#34;&gt;6.1節&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tachibana-ai.netlify.app/files/optimal_control/Sec6.2.pdf&#34; target=&#34;_blank&#34;&gt;6.2節&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tachibana-ai.netlify.app/files/optimal_control/Sec6.3.pdf&#34; target=&#34;_blank&#34;&gt;6.3節&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-まとめ&#34;&gt;2. まとめ&lt;/h3&gt;

&lt;p&gt;ここまで読んで，オイラー・ラグランジュ方程式とHJB方程式の関係が何となく分かってきた．実際の数値計算をどうするか，ということで少し詰まってしまって時間がかかっている．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>アルバイトの経験談</title>
      <link>https://tachibana-ai.netlify.app/post/blog_part_time/</link>
      <pubDate>Sat, 24 Jul 2021 21:44:24 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/blog_part_time/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;これまで体験したアルバイトと，経験したことについて書こうと思う．遊ぶためにバイトをしていたので，企業でプログラミングや機械学習の勉強をしながらバイト，というような経験をしてこなかったのは反省点である．&lt;/p&gt;
&lt;p&gt;私は学部入学が2016年4月，学部卒業が2020年3月であり，修士課程入学が2020年4月である．&lt;/p&gt;
&lt;h4 id=&#34;アルバイト歴&#34;&gt;アルバイト歴&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;年&lt;/th&gt;
&lt;th&gt;アルバイト先&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2016.5 - 2017.3&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#section1&#34;&gt;本屋&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017.4 - 2019.3&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#section2&#34;&gt;飲食店 (24時間営業)&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017.6 - 2018.6&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#section3&#34;&gt;採点バイト&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2018.12 - 2019.1&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#section4&#34;&gt;郵便局 (短期バイト)&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020.4 - 現在&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;#section5&#34;&gt;TA (不定期)&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;1-a-namesection1本屋のバイトa&#34;&gt;1. &lt;a name=&#34;section1&#34;&gt;本屋のバイト&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;11-始めたきっかけ&#34;&gt;1.1. 始めたきっかけ&lt;/h4&gt;
&lt;p&gt;学部入学後，本屋でバイトをしていた (これが初バイトだった)．本屋でバイトを始めようと思った理由は主に2つある．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本屋のバイトは楽だと思っていた&lt;/li&gt;
&lt;li&gt;(当時) 普通に読書が好きだった&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1つ目の理由は，本屋のバイトが楽そうだったからである．レジ打ち，掃除，予約注文くらいできれば良いのかなと思っていた．2つ目の理由は，高校まで普通に読書が好きで (氷菓という作品の影響)，本屋なら苦痛なくバイトできるのではないか，と考えたからである．&lt;/p&gt;
&lt;h4 id=&#34;12-バイト体験と印象に残っているエピソード&#34;&gt;1.2. バイト体験と印象に残っているエピソード&lt;/h4&gt;
&lt;p&gt;本屋のバイトでは，レジに入ることよりも，雑誌を回収して並べるというような肉体労働が多かった．イメージしていた本屋のバイトとは違ったような気がした．&lt;/p&gt;
&lt;p&gt;バイトをしていて一番印象に残っているエピソードがあるので，紹介したいと思う．かなり汚い話だが，ご容赦願いたい．&lt;/p&gt;
&lt;p&gt;バイトを初めて半年ほど経過した頃のこと．閉店作業をしている際，店の外のベンチに男が座っていた．流石にどいてもらわないと片づけられないな，と思い，声をかけようとしたところ，男の前に茶色くて嫌なにおいのするブツが落ちていた．頭に疑問符を浮かべながら近づくと異臭がした．これはやばい&amp;hellip;と思い，男に「もう店終わるので帰ってもらっていいですか？」と言って帰し，社長に報告した．社長に「片づけといて」と言われたので，水で流すなどして片づけた．&lt;/p&gt;
&lt;p&gt;その茶色いブツは明らかに人間のモノではあったが，その男のものだったのかは分からない．監視カメラがついていない角度だったので，状況が分からない．だが，落ちている異臭を放っている誰のモノか分からないブツを片づける，という強烈な体験をしたことは5年ほど経過した今でも忘れられない．&lt;/p&gt;
&lt;h4 id=&#34;13-辞めようと思った理由&#34;&gt;1.3. 辞めようと思った理由&lt;/h4&gt;
&lt;p&gt;辞めようと思った理由は主に3つある．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;シフト固定制だった&lt;/li&gt;
&lt;li&gt;腰痛&lt;/li&gt;
&lt;li&gt;時給が最低賃金だった&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;学部1年終わり頃から2次元コンテンツを追いかけることにハマってしまった．事前にシフトが固定されており，代わりの人を見つけないといけないということから，毎回イベントに参加しようとするたびにこのようなことを連絡するのはしんどいな，と思った．&lt;/p&gt;
&lt;p&gt;(これは甘えだが，) 腰痛がひどくなってしまったことも理由の1つである．本屋のバイトでは古い週刊誌を箱詰めして新しい週刊誌を並べる，ということをする必要があったが，箱詰めした本を運ぶ際に腰を痛めてしまい，それが長続きしてしまったので，この働き方は無理だと感じ，辞めようかな，と思った．&lt;/p&gt;
&lt;p&gt;最大の理由は，最低賃金だったことである．最低賃金と他のバイト先の時給に100円以上の差があることを知り，何故自分は最低賃金で働いているのだろうと思い，辞めようと思った．&lt;/p&gt;
&lt;h4 id=&#34;14-その他&#34;&gt;1.4. その他&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;良かったこと
&lt;ul&gt;
&lt;li&gt;ある程度の常識は身に付けられたのではないかと思う&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;悪かったこと
&lt;ul&gt;
&lt;li&gt;(自業自得) 本への興味が薄れた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;反省点
&lt;ul&gt;
&lt;li&gt;最低賃金と時給を比較する&lt;/li&gt;
&lt;li&gt;業務内容は面接の際に聞いておく&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-a-namesection2飲食店のバイトa&#34;&gt;2. &lt;a name=&#34;section2&#34;&gt;飲食店のバイト&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;21-始めたきっかけ&#34;&gt;2.1. 始めたきっかけ&lt;/h4&gt;
&lt;p&gt;上記のバイトを辞めた後すぐにバイトを探し始めた．条件としては，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;シフト固定ではない&lt;/li&gt;
&lt;li&gt;時給が最低賃金よりはそこそこ高い&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;というもので探した．友人が24時間営業の飲食店でバイトをしていたこともあり，私も24時間営業の飲食店でバイトをすることにした．&lt;/p&gt;
&lt;h4 id=&#34;22-バイト体験と印象に残っているエピソード&#34;&gt;2.2. バイト体験と印象に残っているエピソード&lt;/h4&gt;
&lt;p&gt;このアルバイトは比較的長く続いた．朝，昼，夜，深夜など，色々な時間帯に入った．&lt;/p&gt;
&lt;p&gt;アルバイトをしていて印象に残ったエピソードはいくつもあるが，3つほど紹介させていただく．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;バイト先の社員とパートの人の不倫騒動&lt;/li&gt;
&lt;li&gt;深夜勤務の人が飛ぶ&lt;/li&gt;
&lt;li&gt;社員が来ない&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;221-不倫騒動&#34;&gt;2.2.1. 不倫騒動&lt;/h5&gt;
&lt;p&gt;一番印象に残っているのは，不倫騒動である．バイト先は主婦の方が多かったので，これはかなり話題になった．&lt;/p&gt;
&lt;p&gt;特定されそうなので詳細は話せないが，一言でまとめると，社員が某店舗のパートの人と不倫してそれがバレてクビになった，というものである．&lt;/p&gt;
&lt;p&gt;自業自得である．&lt;/p&gt;
&lt;h5 id=&#34;222-深夜勤務の人が飛ぶ&#34;&gt;2.2.2. 深夜勤務の人が飛ぶ&lt;/h5&gt;
&lt;p&gt;深夜勤務の30代の人が飛ぶ，ということがあった．ディナーの時間帯 (17時 - 22時) に勤務して，21時半頃から引継ぎの準備をしていた．21時50分頃に深夜勤務の人のうち1人来た．もう1人来る予定だったが，来ず，連絡もつかない．これはまずい，と思い，社員の方に来ていただくように連絡をしたが，しばらく来れない，とのことで3時間程 (1時頃まで) 残業した．&lt;/p&gt;
&lt;p&gt;社会にはいろんな人がいる，ということを実感したエピソードの1つである．&lt;/p&gt;
&lt;h5 id=&#34;223-社員が来ない&#34;&gt;2.2.3. 社員が来ない&lt;/h5&gt;
&lt;p&gt;土曜の昼は忙しい，というのは飲食店に勤務したことがある方，もしくは飲食店に土曜の昼に入ったことのある方なら納得のいくことであろう．たまたまその日は私以外に主婦の方と社員の方の3人で回すことになっていた．&lt;/p&gt;
&lt;p&gt;忙しくなければいいですね，主婦の方と話していた矢先，社員から「今日他の店舗に行くことになったから来れない」という電話がかかってきた．来れないなら仕方ないが，他の人の手配もしていないと聞き，主婦の方も私も呆れた．その日はかなり忙しかったので，2人で回すのはかなり無理があった．実際かなりお客さんを待たせてしまった．&lt;/p&gt;
&lt;p&gt;私はその日まで5連勤していた，ということもあり，かなり機嫌は悪かった．その社員が入っているグループLINEで長文メッセを送ってしまった (店長に言われたので)．&lt;/p&gt;
&lt;p&gt;ちなみにその社員はこのことがあった2週間後くらいに別の地域に飛ばされた．店長も嫌っていたし，仕方ない．次入った社員の方からはかなり謝られた．別に良かったのに．&lt;/p&gt;
&lt;p&gt;大人になっても人の手配すらできないような人がいるのだな，と実感したエピソードの1つである．&lt;/p&gt;
&lt;h4 id=&#34;23-辞めた理由&#34;&gt;2.3. 辞めた理由&lt;/h4&gt;
&lt;p&gt;辞めた理由は学部4年の研究室配属である．&lt;/p&gt;
&lt;p&gt;私は学部3年まではバイトして遊んでテスト前だけ勉強して，という底辺大学生であった．研究室配属をきっかけに変わろうと思い，収入源であるバイトを辞め，2次元コンテンツやアニソンシンガーを追いかけるのも控えて，勉強と研究に集中しよう，と思った．&lt;/p&gt;
&lt;p&gt;色々あったが，飲食店のバイトは満足している．店長は厳しかったが，優しく気にかけてくださった．同年代の方もみんな良い人ばかりで話が合う人も多かった．大阪を離れる前に一度立ち寄ろうかな，と思っている．&lt;/p&gt;
&lt;h4 id=&#34;24-その他&#34;&gt;2.4. その他&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;良かったこと
&lt;ul&gt;
&lt;li&gt;結構長続きした&lt;/li&gt;
&lt;li&gt;いろんなタイプの人と交流できた&lt;/li&gt;
&lt;li&gt;かなり金が入った&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;悪かったこと
&lt;ul&gt;
&lt;li&gt;社員&amp;hellip;&lt;/li&gt;
&lt;li&gt;他の方に苦しめられたこと (仕方ない)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;a-namesection33-採点バイトa&#34;&gt;&lt;a name=&#34;section3&#34;&gt;3. 採点バイト&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;31-始めたきっかけ&#34;&gt;3.1. 始めたきっかけ&lt;/h4&gt;
&lt;p&gt;学部2年のとき，全休を作ることができたので，1日フルでバイトしようと思った．所属していたサークルの先輩が採点バイトをしているというのを聞き，私もやろうかなと思った．&lt;/p&gt;
&lt;h4 id=&#34;32-バイト体験と印象に残っているエピソード&#34;&gt;3.2. バイト体験と印象に残っているエピソード&lt;/h4&gt;
&lt;p&gt;初めて2週間ほどでバイトリーダーに呼び出され，「バイトリーダーをやってみないか」と言われた．時給が少し上がるし，交流もできると言われた．私はそのとき飲食店でバイトしているという理由で断った．&lt;/p&gt;
&lt;p&gt;今更ながら，2週間ほどしか勤務をしていないただの学部生にバイトリーダーをやらないか，と招待するのは謎だった．&lt;/p&gt;
&lt;h4 id=&#34;33-辞めた理由&#34;&gt;3.3. 辞めた理由&lt;/h4&gt;
&lt;p&gt;化学の採点をしていたが，大学で化学を使っておらず，高校当時程化学ができないことに気付いた．また，単調な作業だったので，金は入ってくるが飽きてしまった．&lt;/p&gt;
&lt;h4 id=&#34;34-その他&#34;&gt;3.4. その他&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;良かったこと
&lt;ul&gt;
&lt;li&gt;フルタイムの勤務 (9:00 - 18:00) でもそれほど疲れない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;悪かったこと
&lt;ul&gt;
&lt;li&gt;単調すぎて飽きる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;a-namesection44-郵便局a&#34;&gt;&lt;a name=&#34;section4&#34;&gt;4. 郵便局&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;41-始めたきっかけ&#34;&gt;4.1. 始めたきっかけ&lt;/h4&gt;
&lt;p&gt;3回生の頃，必要単位を取りきっていたことと，院試で必要なTOEICで良い点数を取れたという理由で遊びまくっていた (反省)．飲食店のバイトもしていたが，別のバイトも少しするか，と思い，郵便局の年賀状仕分けのバイトをすることにした．&lt;/p&gt;
&lt;h4 id=&#34;42-バイト体験と印象に残っているエピソード&#34;&gt;4.2. バイト体験と印象に残っているエピソード&lt;/h4&gt;
&lt;p&gt;年末年始に飲食店バイトと合わせて14連勤をしたこと．12/30の昼に郵便局でバイト，1時間後に飲食店でバイト (深夜1:30まで)，大晦日の昼に郵便局でバイト，飲食店で夜勤バイトというときが一番きつかった．栄養ドリンクを毎日飲んでいた．もうできないなと思う．&lt;/p&gt;
&lt;p&gt;その月の給料は両方合わせて15万円だった．3月までに全て使い切った．&lt;/p&gt;
&lt;h4 id=&#34;43-辞めた理由&#34;&gt;4.3. 辞めた理由&lt;/h4&gt;
&lt;p&gt;短期バイトだからなし．&lt;/p&gt;
&lt;h4 id=&#34;44-その他&#34;&gt;4.4. その他&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;良かったこと
&lt;ul&gt;
&lt;li&gt;勤務後に飲食店のバイトができる程度には体力的な余裕がある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;悪かったこと
&lt;ul&gt;
&lt;li&gt;特になし&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;a-namesection55-taa&#34;&gt;&lt;a name=&#34;section5&#34;&gt;5. TA&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;51-始めたきっかけ&#34;&gt;5.1. 始めたきっかけ&lt;/h4&gt;
&lt;p&gt;私の研究テーマと内容がかぶっていたので，指導教員からTAをするように頼まれた．&lt;/p&gt;
&lt;h4 id=&#34;52-バイト体験と印象に残っているエピソード&#34;&gt;5.2. バイト体験と印象に残っているエピソード&lt;/h4&gt;
&lt;p&gt;オンラインでTAなんてできるのか，と思ったが，意外と何とかなっている．&lt;/p&gt;
&lt;h4 id=&#34;53-その他&#34;&gt;5.3. その他&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;良かったこと
&lt;ul&gt;
&lt;li&gt;小遣い稼ぎになる&lt;/li&gt;
&lt;li&gt;時給がそこそこ高い&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;悪かったこと
&lt;ul&gt;
&lt;li&gt;今のところはそれほどない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-まとめ&#34;&gt;6. まとめ&lt;/h3&gt;
&lt;p&gt;これまでのバイト経験を書いた．意外と長くなった．過去を思い出すと後悔が残るが，この経験で今の自分が構成されていると思うと別に良いかなとも思える．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>最適制御問題: 連続時間システムの最適制御</title>
      <link>https://tachibana-ai.netlify.app/post/optimal_control_continuous/</link>
      <pubDate>Thu, 22 Jul 2021 16:14:47 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/optimal_control_continuous/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;

&lt;p&gt;先日は，4章の内容をまとめた (&lt;a href=&#34;https://tachibana-ai.netlify.app/post/optimal_control_validation/&#34;&gt;最適制御問題: 変分法&lt;/a&gt;)．今回は，5章の内容をまとめる．&lt;/p&gt;

&lt;h3 id=&#34;1-5章の概要&#34;&gt;1. 5章の概要&lt;/h3&gt;

&lt;p&gt;5章では，連続時間システムに対する最適制御問題を扱っている．最適制御問題の基本的な問題設定，変分法から導出した停留条件 (オイラー・ラグランジュ方程式)，局所最適性の十分条件，最適解の摂動についてまとめられている．このブログではオイラー・ラグランジュ方程式までをまとめる (詳しい導出は省略)．詳しい導出とそれ以降の内容は手書きの資料に載せている．&lt;/p&gt;

&lt;p&gt;ここで扱う最適制御問題は連続時間システム&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\dot{x}(t) = f(x(t), u(t), t) \tag{5.1}\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;(ただし，&lt;span  class=&#34;math&#34;&gt;\(x(t) \in \mathbb{R}^n\)&lt;/span&gt;は状態ベクトル，&lt;span  class=&#34;math&#34;&gt;\(u(t) \in \mathbb{R}^m\)&lt;/span&gt;は制御入力ベクトル) に対して，初期時刻&lt;span  class=&#34;math&#34;&gt;\(t_0\)&lt;/span&gt;，終端時刻&lt;span  class=&#34;math&#34;&gt;\(t_f\)&lt;/span&gt;，初期状態&lt;span  class=&#34;math&#34;&gt;\(x(t_0) = x_0\)&lt;/span&gt;が与えられた下で評価関数&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[J = \varphi(x(t_f)) + \int_{t_0}^{t_f} L(x(t), u(t), t) dt \tag{5.2}\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;が与えられ，それを最小化するような最適制御&lt;span  class=&#34;math&#34;&gt;\(u(t)\)&lt;/span&gt;を求める，というような問題である．つまり，ここで考える最適制御問題は，関数&lt;span  class=&#34;math&#34;&gt;\(x(t)\)&lt;/span&gt;と&lt;span  class=&#34;math&#34;&gt;\(u(t)\)&lt;/span&gt;の汎関数である評価関数&lt;span  class=&#34;math&#34;&gt;\(J\)&lt;/span&gt;を，等式制約である状態方程式の下で最小化する変分問題である．&lt;/p&gt;

&lt;p&gt;等式制約&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[f(x, u, t) - \dot{x} = 0\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;に対応するラグランジュ乗数のベクトルを&lt;span  class=&#34;math&#34;&gt;\(\lambda(t) \in \mathbb{R}^n\)&lt;/span&gt;として，制約条件の下での停留条件を求めるための汎関数&lt;span  class=&#34;math&#34;&gt;\(\overline{J}\)&lt;/span&gt;を構成すると，&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\overline{J} = \varphi(x(t_f)) + \int_{t_0}^{t_f} \{L(x, u, t + \lambda^{\mathrm{T}} (f - \dot{x}) \}dt \tag{5.3}\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;となる．ここで，スカラー値関数&lt;span  class=&#34;math&#34;&gt;\(H\)&lt;/span&gt;を&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[H(x, u, \lambda, t) := L(x, u, t) + \lambda^{\mathrm{T}} f(x, u, t)\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;と定義する．&lt;span  class=&#34;math&#34;&gt;\(H\)&lt;/span&gt;は最適制御問題の&lt;strong&gt;ハミルトン関数&lt;/strong&gt;と呼ばれる．この&lt;span  class=&#34;math&#34;&gt;\(H\)&lt;/span&gt;を用いると，汎関数&lt;span  class=&#34;math&#34;&gt;\(\overline{J}\)&lt;/span&gt;は，以下のように&lt;span  class=&#34;math&#34;&gt;\(\dot{x}\)&lt;/span&gt;の項とそれ以外の項に分けて書き直される．&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\overline{J} = \varphi(x(t_f)) + \int_{t_0}^{t_f} \left(H(x, u, \lambda, t) - \lambda^{\mathrm{T}}\dot{x}\right)  dt\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;上記の問題設定の下で，評価関数 (5.2) を最小にする最適制御 &lt;span  class=&#34;math&#34;&gt;\(u(t) \ (t_0 \leq t \leq t_f)\)&lt;/span&gt; が存在するとし，対応する最適軌道を&lt;span  class=&#34;math&#34;&gt;\(x(t)\)&lt;/span&gt;とすると，&lt;span  class=&#34;math&#34;&gt;\(n\)&lt;/span&gt;次元ベクトル値関数&lt;span  class=&#34;math&#34;&gt;\(\lambda(t)\)&lt;/span&gt;が存在して以下の&lt;strong&gt;オイラー・ラグランジュ方程式&lt;/strong&gt;が成り立つ．&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\dot{x} = f(x, u, t), \ x(t_0) = x_0 \tag{5.4}\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\dot{\lambda} = - \left(\frac{\partial H}{\partial x} \right)^{\mathrm{T}}(x, u, \lambda, t), \ \lambda(t_f) = \left( \frac{\partial \varphi}{\partial x} \right)(x(t_f)) \tag{5.5}\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\frac{\partial H}{\partial u}(x, u, \lambda, t) = 0 \tag{5.6}\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;これは，&lt;span  class=&#34;math&#34;&gt;\(x(t)\)&lt;/span&gt;と&lt;span  class=&#34;math&#34;&gt;\(u(t)\)&lt;/span&gt;の連立微分方程式とみなすことができるが，&lt;span  class=&#34;math&#34;&gt;\(x(t)\)&lt;/span&gt;は初期状態&lt;span  class=&#34;math&#34;&gt;\(x(t_0)\)&lt;/span&gt;が与えられているのに対し，&lt;span  class=&#34;math&#34;&gt;\(\lambda(t)\)&lt;/span&gt;は終端値&lt;span  class=&#34;math&#34;&gt;\(\lambda(t_f)\)&lt;/span&gt;に対する条件が与えられている．このような問題を&lt;strong&gt;2点境界値問題&lt;/strong&gt;という．多くの場合，非線形の微分方程式の解析解は得られないので，初期状態を未知のパラメータとして終端条件が成り立つための条件を書き下すことは困難である．&lt;/p&gt;

&lt;p&gt;以下に，各節の内容をまとめた手書きのメモを掲載する．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tachibana-ai.netlify.app/files/optimal_control/Sec5.1.pdf&#34; target=&#34;_blank&#34;&gt;5.1節&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tachibana-ai.netlify.app/files/optimal_control/Sec5.2.pdf&#34; target=&#34;_blank&#34;&gt;5.2節&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tachibana-ai.netlify.app/files/optimal_control/Sec5.3.pdf&#34; target=&#34;_blank&#34;&gt;5.3節&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tachibana-ai.netlify.app/files/optimal_control/Sec5.4.pdf&#34; target=&#34;_blank&#34;&gt;5.4節&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-まとめ&#34;&gt;2. まとめ&lt;/h3&gt;

&lt;p&gt;ここまで読んで，最適制御問題は状態と入力の汎関数である評価関数を等式制約である状態方程式の下で最小化する変分問題であり，最適制御と最適軌道，ラグランジュ乗数に対してオイラー・ラグランジュ方程式が成り立つことは分かったが，その後どうするのかまだ分かっていない．連休中にやる気があれば6章と7章を読みたいと思っている．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>最適制御問題: 変分法</title>
      <link>https://tachibana-ai.netlify.app/post/optimal_control_validation/</link>
      <pubDate>Sun, 18 Jul 2021 16:18:58 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/optimal_control_validation/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;

&lt;p&gt;研究で最適制御問題を扱うことになったが，これまでまともに勉強してこなかったので，勉強する．研究では連続時間の最適制御問題を扱う予定なので，連続時間の最適制御問題の文献を読んでまとめた手書きのメモを公開することにした．&lt;/p&gt;

&lt;p&gt;次の本を参考にしている．4章から7章まで勉強する予定である．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coronasha.co.jp/np/isbn/9784339033182/&#34;&gt;大塚，非線形最適制御問題入門，コロナ社，2011&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;01-方針&#34;&gt;0.1. 方針&lt;/h4&gt;

&lt;p&gt;GoodNotesを使ってメモを取りながら，本を読んで数式を追っている．ある程度まとめたらメモを載せることにする．誤字や記述が怪しい箇所，理解が足りていない箇所も多いと思う．&lt;/p&gt;

&lt;p&gt;普段，定理や補題の主張を読み，証明は読み飛ばすか流れだけを見ることが多いので，今回もそうなると思う．&lt;/p&gt;

&lt;h3 id=&#34;1-4章の概要とまとめ&#34;&gt;1. 4章の概要とまとめ&lt;/h3&gt;

&lt;p&gt;4章では，変分法の基本がまとめられている．最適制御問題は，時間の関数である状態 $x(t)$ と入力 $u(t)$ の &lt;strong&gt;汎関数&lt;/strong&gt; である評価関数 $J$ を，&lt;strong&gt;等式制約&lt;/strong&gt; (状態方程式) の下で最小化する問題であり，これは変分問題である．よって，変分法は最適制御問題の基礎になっている．&lt;/p&gt;

&lt;p&gt;以下に，各節の内容をまとめた手書きのメモを掲載する．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tachibana-ai.netlify.app/files/optimal_control/Sec4.1.pdf&#34; target=&#34;_blank&#34;&gt;4.1節&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tachibana-ai.netlify.app/files/optimal_control/Sec4.2.pdf&#34; target=&#34;_blank&#34;&gt;4.2節&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tachibana-ai.netlify.app/files/optimal_control/Sec4.3.pdf&#34; target=&#34;_blank&#34;&gt;4.3節&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tachibana-ai.netlify.app/files/optimal_control/Sec4.4.pdf&#34; target=&#34;_blank&#34;&gt;4.4節&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>古いバージョンのKali linuxをインストールしようとした</title>
      <link>https://tachibana-ai.netlify.app/post/kali-linux-log/</link>
      <pubDate>Tue, 13 Jul 2021 21:47:32 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/kali-linux-log/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://s-akademeia.sakura.ne.jp/main/books/lab/faq.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ハッキング・ラボのつくりかた&lt;/a&gt;という本を読み進めていたところ，最新版のKali linux 2021.2では実行できない部分があったので (4章, 252ページ等)，書籍の環境である Kali linux 2018.2に合わせることにした．インストールにかなり苦戦した．&lt;/p&gt;
&lt;p&gt;後から気付いたが，&lt;code&gt;apt update&lt;/code&gt;と&lt;code&gt;apt upgrade&lt;/code&gt;をしてしまうとmetasploitも更新される．苦労してインストールしたが，同一の環境を作ることが目的であれば，実行しない方が良い．私はこの仮想マシンが翌日にグラフィカルモードで起動しなくなったので，消した．&lt;/p&gt;
&lt;p&gt;このようなことは二度としないと思うが，自分への戒めとして，また，もし今後このような状況があったときに備えて記事に残すが，真似はしない方が良い．可能であれば安定起動版か最新版を入れた方が良いし，わざわざ少し古いバージョンを入れて更新するのは手間である．&lt;/p&gt;
&lt;h4 id=&#34;01-概要&#34;&gt;0.1. 概要&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;インストール
&lt;ul&gt;
&lt;li&gt;DNSサーバに&lt;code&gt;8.8.8.8&lt;/code&gt;を指定する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;署名
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;archive.kali.org&lt;/code&gt;から入手する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;依存関係
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ruby-http-parser.rb&lt;/code&gt;の依存関係
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apt-get install&lt;/code&gt;する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thin&lt;/code&gt;のエラー
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/var/lib/dpkg/info&lt;/code&gt;にある該当ファイルを削除して，&lt;code&gt;apt install&lt;/code&gt;する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ruby-progressbar&lt;/code&gt;のエラー
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dpkg -i --force-overwrite&lt;/code&gt;する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-kali-linux-20182のインストール&#34;&gt;1. Kali linux 2018.2のインストール&lt;/h3&gt;
&lt;p&gt;ovaがないので，isoファイルをダウンロードする．ここでは，&lt;code&gt;kali-linux-2018.2-amd64.iso&lt;/code&gt;を以下からダウンロードした．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://old.kali.org/kali-images/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Index of /kali-images&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あとはVirtualboxで仮想マシンを入れるのと同様にすれば良いが，nameserverに&lt;code&gt;8.8.8.8&lt;/code&gt;を指定することを忘れないようにする (名前解決の問題)．&lt;/p&gt;
&lt;h3 id=&#34;2-インストール後の処理&#34;&gt;2. インストール後の処理&lt;/h3&gt;
&lt;h4 id=&#34;21-署名&#34;&gt;2.1. 署名&lt;/h4&gt;
&lt;p&gt;1でインストールしたkali linuxで&lt;code&gt;apt update&lt;/code&gt;しようとすると，&amp;ldquo;The following signatures were invalid&amp;quot;のエラーが出る．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-signatureのエラー&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_1_apt_error.png&#34; alt=&#34;signature&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      signatureのエラー
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;同様のエラーをStackExchangeで探し，同じように解決しようと試みた．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://unix.stackexchange.com/questions/421821/invalid-signature-for-kali-linux-repositories-the-following-signatures-were-i&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Invalid signature for Kali Linux repositories : “The following signatures were invalid: EXPKEYSIG ED444FF07D8D0BF6 Kali Linux Repository”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gpg --keyserver hkp://keys.gnupg.net --recv-key 7D8D0BF6
gpg --fingerprint 7D8D0BF6
gpg -a --export 7D8D0BF6 | apt-key add -
apt update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;と&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget -q -O - https://archive.kali.org/archive-key.asc | apt-key add
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;が紹介されていた．前者でうまくいかなかったので，後者を試した．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-gpgキーを追加する&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_2_key_add.png&#34; alt=&#34;key&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      gpgキーを追加する
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;22-依存関係&#34;&gt;2.2. 依存関係&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;apt update&lt;/code&gt;はできたので，&lt;code&gt;apt upgrade&lt;/code&gt;しようとしたところ，&lt;code&gt;ruby-http-parser.rb&lt;/code&gt;に依存関係の問題があるらしく，できなかった．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-依存関係&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_3_cannot_apt_upgrade.png&#34; alt=&#34;dependencies&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      依存関係
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ruby-http-parser.rb&lt;/code&gt;をインストールすれば良いかもしれない．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://5.9.10.113/64784465/kali-the-following-packages-have-unmet-dependencies&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kali &amp;lsquo;the following packages have unmet dependencies&amp;rsquo;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ruby-http-parserrbのインストール&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_4_apt_listchanges.png&#34; alt=&#34;ruby_parser&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ruby-http-parser.rbのインストール
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get install ruby-http-parser.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;を実行したところ，上のapt-listchangesが出力された．末尾まで見てqで進めた．途中に質問されたが，そのまま答えた．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-質問&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_5.png&#34; alt=&#34;question&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      質問
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-cron&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_6_cron.png&#34; alt=&#34;cron&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      cron
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;最後まで進めたところ，エラーが出た．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-thinのエラー&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_7.png&#34; alt=&#34;error_thin&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      thinのエラー
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;とりあえず，&lt;code&gt;apt-get clean&lt;/code&gt;と&lt;code&gt;apt-get -f install&lt;/code&gt;をしてみることにしたが，同じエラーが残っている．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-同様のエラー&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_8.png&#34; alt=&#34;same_error&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      同様のエラー
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;同様のエラーを解決している記事を発見したので，以下の記事のようにしてエラーを解消する．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://engetu21.hatenablog.com/entry/2014/12/06/004525&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;【LIVA】【Ubuntu server14.04】apt-getでエラー発生（post-installationスクリプトエラー）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ikkuntech.blogspot.com/2012/03/apt-get.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;apt-getのpost-installationスクリプトエラー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dpkg --audit
dpkg --configure thin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-dpkgコマンド&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_9.png&#34; alt=&#34;dpkg_command&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      dpkgコマンド
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;参考サイトによると，&lt;code&gt;/var/lib/dpkg/info&lt;/code&gt;以下の関連するファイルを削除すれば良いらしい．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /var/lib/dpkg/info
rm -rf thin.postinst thin.postrm thin.prerm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ファイルの削除&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_10.png&#34; alt=&#34;remove&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ファイルの削除
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;この後に&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dpkg --configure thin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;をすれば良いらしいが，何故かうまくいかなかった．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-thinのsetup&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_11.png&#34; alt=&#34;thin_config&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      thinのsetup
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;仕方ないので，thinをインストールすることにした．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt install thin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-thinのインストール&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_12.png&#34; alt=&#34;install_thin&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      thinのインストール
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;エラーが出なかったので，確認する．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dpkg -s thin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-status&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_13.png&#34; alt=&#34;noterror&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      status
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Status install ok installed&lt;/code&gt;になっているので，良さそう．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://serverlog.jp/apt-get-dependence/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;apt-getによる依存関係の解決方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;apt update&lt;/code&gt;と&lt;code&gt;apt upgrade&lt;/code&gt;を試す．&lt;/p&gt;
&lt;p&gt;途中で&amp;quot;Configuring macchanger&amp;quot;と&amp;quot;sslh configuration&amp;quot;について聞かれたが，それぞれ&amp;quot;Yes&amp;quot;と&amp;quot;from inetd&amp;quot;にした．&lt;/p&gt;
&lt;p&gt;また，&amp;ldquo;Configuring base-passwd&amp;quot;というのも聞かれた．今変更しなくても後から変更できるらしいので，&amp;ldquo;No&amp;quot;を選択した．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-エラー&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_14.png&#34; alt=&#34;error2&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      エラー
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;またエラーが出たので，原因を探す．とりあえず，&lt;code&gt;apt-get clean&lt;/code&gt;とかを実行する．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-apt-get-cleanを実行&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_15.png&#34; alt=&#34;apt-get-clean&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      apt-get cleanを実行
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&amp;ldquo;ruby-cms-scanner: &amp;ldquo;の行から，依存関係の問題があることが分かった．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt install ruby-progressbar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;でインストールしようとしたが，先ほどと同様のエラーが出た．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-上と同様のエラー&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_16.png&#34; alt=&#34;error3&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      上と同様のエラー
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;以下のサイトと類似しているエラーだったので，関連debを上書きインストールする方法を試してみた．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dpkg -i --force-overwrite /var/cache/apt/archives/ruby-progressbar_1.10.1-1_all.deb
apt --fix-broken install
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;参考
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.tizen.moe/entry/2020/12/16/000000&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;apt &amp;ndash;fix-broken installしろと言われた場合の対応&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;ldquo;Configuring postgresql-common&amp;quot;について聞かれたので，&amp;ldquo;Ok&amp;quot;とした．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-apt---fix-broken後&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_17.png&#34; alt=&#34;unerror&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      apt &amp;ndash;fix-broken後
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;いけたように見える．一応&lt;code&gt;apt update&lt;/code&gt;と&lt;code&gt;apt upgrade&lt;/code&gt;を確認する．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-not-upgraded&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_18.png&#34; alt=&#34;not-upgraded&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      not-upgraded
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&amp;ldquo;not-upgraded&amp;quot;となっているが，一応エラーは消えているようなので，この処理は終了．&lt;/p&gt;
&lt;h4 id=&#34;23-ネットワーク設定&#34;&gt;2.3. ネットワーク設定&lt;/h4&gt;
&lt;p&gt;書籍第2章に合わせる．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アダプター1
&lt;ul&gt;
&lt;li&gt;ホストオンリーアダプター&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アダプター2
&lt;ul&gt;
&lt;li&gt;NAT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kali linux 2021.2に&lt;code&gt;10.0.0.2&lt;/code&gt;を割り振っているので，Kali linux 2018.2には&lt;code&gt;10.0.0.3&lt;/code&gt;を割り振る．&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_19.png&#34; alt=&#34;network_config&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;24-ユーザの追加&#34;&gt;2.4. ユーザの追加&lt;/h4&gt;
&lt;p&gt;&amp;ldquo;ai&amp;quot;というユーザを追加する．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;useradd -m ai
passwd ai
usermod -a -G sudo ai
chsh -s /bin/bash ai
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ユーザを追加&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_20.png&#34; alt=&#34;useradd&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ユーザを追加
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;25-ssh環境&#34;&gt;2.5. ssh環境&lt;/h4&gt;
&lt;h5 id=&#34;1-sshホスト鍵の再生成&#34;&gt;(1) SSHホスト鍵の再生成&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /etc/ssh
mkdir default_keys
mv ssh_host_* default_keys/
dpkg-reconfigure openssh-server
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-sshdの起動&#34;&gt;(2) sshdの起動&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;service ssh start
update-rc.d ssh enable
apt install sysv-rc-conf -y
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3-ログインできるか確認&#34;&gt;(3) ログインできるか確認&lt;/h5&gt;
&lt;p&gt;ローカルから&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh ai@localhost
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ローカルからssh接続&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_21.png&#34; alt=&#34;ssh&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ローカルからssh接続
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Windows側から&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh ai@10.0.0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-windowsからssh接続&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_22.png&#34; alt=&#34;ssh_win&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Windowsからssh接続
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;どちらも接続できている．&lt;/p&gt;
&lt;h5 id=&#34;4-rootログインの許可&#34;&gt;(4) rootログインの許可&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;を編集して&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PermitRootLogin yes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;にする．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-rootログイン&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_23.png&#34; alt=&#34;root&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      rootログイン
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h5 id=&#34;5-公開鍵認証&#34;&gt;(5) 公開鍵認証&lt;/h5&gt;
&lt;p&gt;Windows側で公開鍵があるディレクトリで，&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scp .\id_rsa.pub root@10.0.0.3:/root/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;とする．&lt;/p&gt;
&lt;p&gt;kali linux側で，&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat id_rsa.pub &amp;gt;&amp;gt; ./.ssh/authorized_keys
chmod -R 700 ./.ssh/
chmod -R 600 ./.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;を実行．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;の&lt;code&gt;PubkeyAuthentication&lt;/code&gt;と&lt;code&gt;AuthorizedKeysFile&lt;/code&gt;のコメントを外す．&lt;/p&gt;
&lt;p&gt;Windows側の&lt;code&gt;.ssh/config&lt;/code&gt;に以下を追加．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Host kali_2018
    HostName 10.0.0.3
    User root
    IdentityFile [authorized_keysに対応する秘密鍵のパス]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh kali_2018
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;でログインできることを確認する．&lt;/p&gt;
&lt;h3 id=&#34;3-まとめ&#34;&gt;3. まとめ&lt;/h3&gt;
&lt;p&gt;kali linux 2018.2を導入し，初期設定をした．2018を入れたつもりだが，アップグレードされていた．結局消したが，苦労したので戒めとして残した．真似はしない方が良い．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>書籍を読みながらMetasploitを使ってみて詰まったところ</title>
      <link>https://tachibana-ai.netlify.app/post/hacking-lab_1/</link>
      <pubDate>Tue, 13 Jul 2021 21:24:32 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/hacking-lab_1/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;最近，&lt;a href=&#34;https://s-akademeia.sakura.ne.jp/main/books/lab/faq.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ハッキング・ラボのつくりかた&lt;/a&gt;という本を読んでいる．ツイートされていた方もいらっしゃったが，書籍第4章のWindowsに紹介されているmeterpreterのプロンプトで&lt;code&gt;run hashdump&lt;/code&gt;や&lt;code&gt;run scraper&lt;/code&gt;が実行できない．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/K88336374/status/1409822251797471238?s=20&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;該当ツイート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-runのエラー&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2021_1.png&#34; alt=&#34;scraper_error&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      runのエラー
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Meterpreterがスクリプトの実行をサポートしなくなったことが原因の1つだと考えたので，何とか書籍のコードを実行できないか試してみたいと思った．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/DeXhCjktu3ABTLZ/status/1413171321475780608?s=20&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;該当ツイートへのリプライ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/iagox86/metasploit-framework-webexec/blob/master/scripts/meterpreter/enum_chrome.rb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHubのmetasploit-framework-webexec&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は，書籍の環境に合わせることで実行した．もっと良い方法があるはずだが，知識のない私にはこれが限界だった．&lt;/p&gt;
&lt;h3 id=&#34;1-環境について&#34;&gt;1. 環境について&lt;/h3&gt;
&lt;h4 id=&#34;11-これまで用いていた環境&#34;&gt;1.1. これまで用いていた環境&lt;/h4&gt;
&lt;p&gt;私がこれまで使っていた環境を記載する．Virtualbox上で仮想マシンを動かしている．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ホストOS
&lt;ul&gt;
&lt;li&gt;Windows11
&lt;ul&gt;
&lt;li&gt;IP address (ホストオンリーネットワーク): 10.0.0.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ゲストOS
&lt;ul&gt;
&lt;li&gt;Kali Linux 2021.2
&lt;ul&gt;
&lt;li&gt;LANアダプター1 (ホストオンリーネットワーク): 10.0.0.2&lt;/li&gt;
&lt;li&gt;LANアダプター2 (NAT): DHCP&lt;/li&gt;
&lt;li&gt;metasploit v6.0.52-dev&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows7 (ターゲット端末)
&lt;ul&gt;
&lt;li&gt;LANアダプター1 (ホストオンリーネットワーク): DHCP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;12-書籍の環境と今回比較のために用いる環境&#34;&gt;1.2. 書籍の環境と今回比較のために用いる環境&lt;/h4&gt;
&lt;p&gt;書籍では，Kali Linux 2018.2を用いている．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;書籍の環境
&lt;ul&gt;
&lt;li&gt;Kali Linux 2018.2
&lt;ul&gt;
&lt;li&gt;LANアダプター1 (ホストオンリーネットワーク): 10.0.0.2&lt;/li&gt;
&lt;li&gt;LANアダプター2 (NAT): DHCP&lt;/li&gt;
&lt;li&gt;metasploit v4.16.65-dev (書籍pp.240より)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は，1.1で作った環境を壊したくなかったので，Virtualbox上に新しく特定のバージョンのKali linuxをisoファイルからインストールして，それを用いる．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;今回作った環境
&lt;ul&gt;
&lt;li&gt;Kali Linux 2018.2
&lt;ul&gt;
&lt;li&gt;LANアダプター1 (ホストオンリーネットワーク): 10.0.0.3&lt;/li&gt;
&lt;li&gt;metasploit v4.16.48-dev&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここで，Kali Linux 2018.2に関しては，インターネットに接続せず，Windows7との通信のためだけに用いることにする．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apt update&lt;/code&gt;や&lt;code&gt;apt upgrade&lt;/code&gt;を行うとmetasploitのバージョンが更新される可能性がある．&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt update&lt;/code&gt;や&lt;code&gt;apt upgrade&lt;/code&gt;をしようとしたときにエラーが出た．何とか改善したが，metasploitのバージョンまで更新された(1敗)．
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tachibana-ai.netlify.app/post/kali-linux-log/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;古いバージョンのKali linuxをインストールしようとした&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また，旧バージョンのisoファイルは，以下からダウンロードした．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://old.kali.org/kali-images/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Index of /kali-images&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-kali-linux-20182での実行&#34;&gt;2. Kali Linux 2018.2での実行&lt;/h3&gt;
&lt;h4 id=&#34;21-環境構築&#34;&gt;2.1. 環境構築&lt;/h4&gt;
&lt;p&gt;isoファイルを使って仮想マシンを構築する．途中のDNSサーバを指定するところで，&lt;code&gt;8.8.8.8&lt;/code&gt;を指定するのを忘れない．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hackcrack89.blog.fc2.com/blog-entry-30.html?sp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kali Linux on Linux Deploy - resolv.confの編集&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;うまくいくと，以下のようなデスクトップとして起動できる．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-デスクトップの起動&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_1.png&#34; alt=&#34;kali_2018_1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      デスクトップの起動
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;IPアドレスの編集を行う．Virtualbox側でホストオンリーネットワークを指定し，Kali linux側の&lt;code&gt;/etc/network/interfaces&lt;/code&gt;に以下を追加．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;allow-hotplug eth0
iface eth0 inet static
address 10.0.0.3
netmask 255.255.255.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;設定後再起動し，うまく割り振られているか，ホストOSにpingが飛ぶか確認した．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-pingの確認&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_2.png&#34; alt=&#34;kali_2018_2&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      pingの確認
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;22-metasploitの起動と確認&#34;&gt;2.2. metasploitの起動と確認&lt;/h4&gt;
&lt;p&gt;次に，msfconsoleでmetasploitを起動し，バージョンを確認する．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-metasploitのバージョンの確認&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_3.png&#34; alt=&#34;kali_2018_3&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      metasploitのバージョンの確認
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;v4.16.48-devであることが分かり，書籍よりも前のバージョンであることが分かる．&lt;/p&gt;
&lt;p&gt;書籍の処理を実行してみる．まず，ペイロードを作成し，実行した．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ペイロードの実行&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_4.png&#34; alt=&#34;kali_2018_4&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ペイロードの実行
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;次に，SYSTEM権限を奪取して，&lt;code&gt;run hashdump&lt;/code&gt;を実行した．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-hashdumpの実行&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_5.png&#34; alt=&#34;kali_2018_5&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      hashdumpの実行
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;注意は出たが，止まらずに実行できているようである．期待できそうだったので，&lt;code&gt;run scraper&lt;/code&gt;もやってみる．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-run-scraperの実行&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_6.png&#34; alt=&#34;kali_2018_6&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      run scraperの実行
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;実行できた．&lt;code&gt;run persistence&lt;/code&gt;も実行できた．&lt;/p&gt;
&lt;h3 id=&#34;3-まとめ&#34;&gt;3. まとめ&lt;/h3&gt;
&lt;p&gt;書籍の環境に合わせたら一応実行はできた．もっと良い方法があるとは思うが，演習だと思えば&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ファイルサーバを構築したときのログ (Ubuntu18.04)</title>
      <link>https://tachibana-ai.netlify.app/post/create_server/</link>
      <pubDate>Fri, 09 Jul 2021 18:39:46 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/create_server/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;以前ファイルサーバを構築したので，そのときのログを残す．&lt;/p&gt;
&lt;p&gt;色々と怪しい部分もあるかもしれないので，一個人の記録として見ていただければ幸いである．&lt;/p&gt;
&lt;p&gt;以下，LinuxサーバをUbuntu18.04とし，クライアント側はWindows10もしくはUbuntu20.04とする．Windows10の場合はGit Bashが導入済みであるものとする．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SSH接続の設定&lt;/li&gt;
&lt;li&gt;Sambaの設定&lt;/li&gt;
&lt;li&gt;バックアップの設定&lt;/li&gt;
&lt;li&gt;CUI運用にする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という流れで実行した．&lt;/p&gt;
&lt;h3 id=&#34;1-ssh接続&#34;&gt;1 SSH接続&lt;/h3&gt;
&lt;p&gt;サーバにリモートで接続して手元で扱うときには，SSH (Secure Shell) 接続を用いることが多い．SSHは，セキュアな通信でリモートアクセスするためのプロトコルであり，強固な認証と暗号化の機能がある (詳しい説明は省略)．ここでは，LinuxサーバのSSH設定の手順について述べる．認証方式は公開鍵認証とする．&lt;/p&gt;
&lt;p&gt;以下，サーバ側のシェルに&lt;code&gt;(server)&lt;/code&gt;とし，接続するクライアント側のシェルに&lt;code&gt;(client)&lt;/code&gt;と書くものとする．&lt;/p&gt;
&lt;h4 id=&#34;1-sshdのインストールと自動起動の設定-サーバ側&#34;&gt;(1) sshdのインストールと自動起動の設定 (サーバ側)&lt;/h4&gt;
&lt;p&gt;ホスト側でsshをインストールして，自動起動の設定を行う．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) sudo apt update &amp;amp;&amp;amp; sudo apt -y upgrade
(server) sudo apt -y install ssh
(server) sudo systemctl start ssh.service
(server) sudo systemctl enable ssh.service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この後サーバを再起動し，以下のコマンドを実行．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) sudo systemctl is-enabled ssh.service
(server) sudo systemctl status ssh.service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上のコマンドを実行し，&lt;code&gt;enabled&lt;/code&gt;と出力されれば，ブート時に起動する．下のコマンドを実行し，&lt;code&gt;Active: active (running)&lt;/code&gt;と出力されれば現在sshdが起動している．&lt;/p&gt;
&lt;p&gt;この時点でサーバ側にパスワード認証で入ることができる．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(client) ssh [user]@[IP address of the server]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(userはサーバのユーザ名)とすると，特に設定が間違えていなければ接続できる．&lt;/p&gt;
&lt;p&gt;今回の目的は公開鍵認証で入ることなので，以下の手順を&lt;/p&gt;
&lt;h4 id=&#34;2-キーペアを作る-クライアント側&#34;&gt;(2) キーペアを作る (クライアント側)&lt;/h4&gt;
&lt;p&gt;クライアント側でキーペアを作る．キーペアの作り方については以下の記事を参考にした．&lt;/p&gt;
&lt;p&gt;Git Bash (Ubuntuはterminal)で，以下のコマンドを実行する．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(client) ssh-keygen -t rsa -b 4096 -C &amp;quot;comment&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記のコマンドを実行すると，鍵のパスを変えるか，パスフレーズは必要か聞かれる．鍵はデフォルトでは&lt;code&gt;&amp;lt;user&amp;gt;/.ssh&lt;/code&gt;直下に&lt;code&gt;id_rsa&lt;/code&gt;と&lt;code&gt;id_rsa.pub&lt;/code&gt;として保存されるが，複数の鍵を作る場合は新しいディレクトリを&lt;code&gt;.ssh&lt;/code&gt;以下に作るなどすれば良いと思う．&lt;/p&gt;
&lt;p&gt;commentは任意だが，複数人が管理するファイルサーバという機能を持たせると考えると，自分の名字にするのが良いように思う．&lt;/p&gt;
&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/suthio/items/2760e4cff0e185fe2db9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;お前らのSSH Keysの作り方は間違っている&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-クライアント側からホスト側に公開鍵を送信する&#34;&gt;(3) クライアント側からホスト側に公開鍵を送信する&lt;/h4&gt;
&lt;p&gt;(1)でSSH接続ができているとすると，クライアント側でscpコマンドを実行すると，サーバ側のuserのホームディレクトリ直下に公開鍵を転送できる．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(client) scp [client rsa pub key path] [user]@[IP address of the server]:/home/[user]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここで，scpはSSHを使ってリモートホストとローカルホストの通信を暗号化した上で，ファイルの送信をするコマンドであり，&lt;code&gt;scp [from] [to]&lt;/code&gt;のように書けば，fromのパスで指定したファイルがtoのパスの下に送られる．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[client rsa pub key path]&lt;/code&gt;は，キーペアを作るときに変えていなければ，(Windowsの場合は)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\Users\[user]\.ssh\id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;である．&lt;/p&gt;
&lt;h4 id=&#34;4-authorized_keysファイルを作る&#34;&gt;(4) &lt;code&gt;authorized_keys&lt;/code&gt;ファイルを作る&lt;/h4&gt;
&lt;p&gt;次に，サーバ側で鍵の設定をする．(3)で，ホームディレクトリ直下に公開鍵が送られたとする．このファイルの内容を&lt;code&gt;authorized_keys&lt;/code&gt;ファイルにコピーする．その後，&lt;code&gt;chmod&lt;/code&gt;コマンドで所有者のみが読めるようにする．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) cat id_rsa.pub &amp;gt;&amp;gt; ./.ssh/authorized_keys
(server) chmod 700 ./.ssh
(server) chmod 600 ./.ssh/authorized_keys
(server) rm -rf id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-sshd_configの設定-サーバ側&#34;&gt;(5) &lt;code&gt;sshd_config&lt;/code&gt;の設定 (サーバ側)&lt;/h4&gt;
&lt;p&gt;公開鍵認証を有効化するために，sshdの設定ファイルを編集する．一旦バックアップをとる．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) cd /etc/ssh
(server) sudo cp sshd_config sshd_config.bk
(server) sudo vim sshd_config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以下の行のコメントを外し，有効化する．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;#PubkeyAuthentication yes
#AuthorizedKeysFile .ssh/authorized_keys  .ssh/authorized_keys2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一応Rootでのログインはできないようにしておく．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;PermitRootLogin no
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;参考-1&#34;&gt;参考&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/gotohiro55/items/36a22516de2b381b3c6e&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SSHの鍵認証設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;6-sshのconfigファイルの設定-クライアント側&#34;&gt;(6) &lt;code&gt;.ssh&lt;/code&gt;のconfigファイルの設定 (クライアント側)&lt;/h4&gt;
&lt;p&gt;(5)までで公開鍵認証でSSH接続できるようになった．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;ssh -i [client rsa private key path] [user]@[IP address of the server]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接続のたびにこのコマンドを打つのはめんどくさいので，エイリアス設定をする．&lt;code&gt;.ssh/config&lt;/code&gt;ファイルに以下を追加 (Windowsの場合．秘密鍵が&lt;code&gt;.ssh&lt;/code&gt;直下にあるとする)．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Host [server name]
  HostName xxx.xxx.xxx.xxx  # IP address of the server
  User [user]               # user name of the server
  Identityfile C:\Users\[user]\.ssh\id_rsa
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このようにすると，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh [servername]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;でサーバに接続できる．&lt;/p&gt;
&lt;h3 id=&#34;2-sambaの設定&#34;&gt;2 Sambaの設定&lt;/h3&gt;
&lt;p&gt;Sambaとは，Linux上でWindowsのネットワーク機能を実現するソフトウェアである．これを使うことで，ファイルサーバの機能が実現される．&lt;/p&gt;
&lt;p&gt;以下，ホームディレクトリ直下の&lt;code&gt;Share_dir&lt;/code&gt;を共有するものとする．ここでは，同一のネットワークのホストに対してフルパーミッションで権限を与える場合を想定する．&lt;/p&gt;
&lt;h5 id=&#34;参考-2&#34;&gt;参考&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=eVVfJYXq1ug&amp;amp;list=LL&amp;amp;index=1&amp;amp;t=740s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;【Linux】Ubuntuでファイルサーバーを作って遊ぼう！(中級者～上級者向け)【世界一わかりやすい解説(かもしれない)】&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;このYouTubeの動画を参考にした．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1-sambaのインストール&#34;&gt;(1) Sambaのインストール&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) sudo apt install -y samba
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-sambaconfのバックアップと編集&#34;&gt;(2) &lt;code&gt;samba.conf&lt;/code&gt;のバックアップと編集&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) cd /etc/samba/
(server) sudo cp smb.conf smb.conf.bk
(server) sudo vim smb.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;末尾に以下を追加．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;# fileserver
[fileserver]
comment = Ubuntu FileServer
path = /home/[user]/Share_dir/
browseable = yes
read only = no
guest ok = yes
guest only = yes
create mode = 0777
directory mode = 0777
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-再起動と自動起動の設定&#34;&gt;(3) 再起動と自動起動の設定&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) sudo systemctl restart smbd nmbd
(server) sudo systemctl enable smbd nmbd
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-バックアップ&#34;&gt;3. バックアップ&lt;/h3&gt;
&lt;p&gt;共有したディレクトリをHDDなどにバックアップすることを考える．これは，突然PCが落ちてデータが飛ぶようなリスクへの対策となる．&lt;/p&gt;
&lt;p&gt;ここではHDDがマウントポイント&lt;code&gt;/mnt/Elements&lt;/code&gt;にマウントされているとし，システム起動時にマウントするように設定したとする．&lt;/p&gt;
&lt;h4 id=&#34;1-バックアップ用のディレクトリの作成&#34;&gt;(1) バックアップ用のディレクトリの作成&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Server_backup&lt;/code&gt;ディレクトリにバックアップを取るものとする．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) mkdir /mnt/Elements/Server_backup
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-バックアップの設定&#34;&gt;(2) バックアップの設定&lt;/h4&gt;
&lt;p&gt;ここでは，差分バックアップを取るものとする．このときに使うコマンドは&lt;code&gt;rsync&lt;/code&gt;である．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) sudo rsync -av /home/[user]/Share_dir/ /mnt/Elements/Server_backup
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これは，&lt;code&gt;Share_dir&lt;/code&gt;の中身を&lt;code&gt;/mnt/Elements/Server_backup&lt;/code&gt;にバックアップするというようなものである．ここで，引数&lt;code&gt;-av&lt;/code&gt;は，今どこをコピーしているのかを表示出力するためのものである．&lt;/p&gt;
&lt;h4 id=&#34;3-バックアップのスケジューラの設定&#34;&gt;(3) バックアップのスケジューラの設定&lt;/h4&gt;
&lt;p&gt;毎日バックアップを更新するために，スケジューラを用いる．crontabを編集すれば良い．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) sudo vim /etc/crontab
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以下を追加した．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# m h dom mon dow user	command
00 3	* * *	root    rsync -av /home/[user]/Share_dir/ /mnt/Elements/Server_backup
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4-cui運用にする&#34;&gt;4. CUI運用にする&lt;/h3&gt;
&lt;p&gt;ファイルサーバとしての運用であれば，CUI運用の方が良い．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 一時的にCUIモードにする
(server) sudo systemctl isolate multi-user.target
# デフォルトをCUIモードにする
(server) sudo systemctl set-default multi-user.target
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;GUIに戻したいときは以下のコマンドを実行．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 一時的にGUIモードにする
(server) sudo systemctl isolate graphical.target
# デフォルトをGUIモードにする
(server) sudo systemctl set-default graphical.target
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5-まとめ&#34;&gt;5. まとめ&lt;/h3&gt;
&lt;p&gt;ファイルサーバを作った際のログを残した．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>普段使っているPC周りの環境</title>
      <link>https://tachibana-ai.netlify.app/post/myenv/</link>
      <pubDate>Thu, 08 Jul 2021 19:15:53 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/myenv/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;この記事では，私が普段使っているPC周りの環境を書く．就職したらもっと良いのがほしい．&lt;/p&gt;
&lt;h3 id=&#34;1-自宅の環境とノートpc&#34;&gt;1. 自宅の環境とノートPC&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;デスクトップ
&lt;ul&gt;
&lt;li&gt;Lenovo V530
&lt;ul&gt;
&lt;li&gt;色々手を加えた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS: Windows11&lt;/li&gt;
&lt;li&gt;SSD: 512GB
&lt;ul&gt;
&lt;li&gt;もともと256GB．換装した．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RAM: 16GB&lt;/li&gt;
&lt;li&gt;CPU: Core i5-9500&lt;/li&gt;
&lt;li&gt;GPU (増設): GTX-1050Ti
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/gp/product/B01M360WG6/ref=ppx_yo_dt_b_asin_title_o05_s00?ie=UTF8&amp;amp;psc=1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PH-GTX1050TI-4G&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ノート
&lt;ul&gt;
&lt;li&gt;iiyama 14インチ (BTO)&lt;/li&gt;
&lt;li&gt;OS: Ubuntu20.04&lt;/li&gt;
&lt;li&gt;SSD: 256GB&lt;/li&gt;
&lt;li&gt;HDD: 1TB&lt;/li&gt;
&lt;li&gt;RAM: 16GB&lt;/li&gt;
&lt;li&gt;CPU: Core i5-8265&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;モニター
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/gp/product/B06VT3DVBD/ref=ppx_yo_dt_b_asin_title_o06_s01?ie=UTF8&amp;amp;psc=1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ASUS 23インチ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-研究室の環境&#34;&gt;2. 研究室の環境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;デスクトップ
&lt;ul&gt;
&lt;li&gt;自作&lt;/li&gt;
&lt;li&gt;OS: Ubuntu20.04&lt;/li&gt;
&lt;li&gt;SSD: 480GB&lt;/li&gt;
&lt;li&gt;RAM: 16GB&lt;/li&gt;
&lt;li&gt;CPU: Core i5-8400&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;モニター
&lt;ul&gt;
&lt;li&gt;iiyama 23インチ&lt;/li&gt;
&lt;li&gt;ASUS 27インチ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-用途&#34;&gt;3. 用途&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;デスクトップ (家)
&lt;ul&gt;
&lt;li&gt;ゲーム
&lt;ul&gt;
&lt;li&gt;ドラクエ11S楽しい！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Virtualboxを使ったセキュリティの勉強
&lt;ul&gt;
&lt;li&gt;最近&lt;a href=&#34;https://www.amazon.co.jp/gp/product/4798155306/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;amp;psc=1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ハッキング・ラボのつくりかた&lt;/a&gt;という本を読んでる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hugoを使ってこのサイトの記事の編集&lt;/li&gt;
&lt;li&gt;学会発表の練習のためにOBSを使って録音&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ノートパソコン
&lt;ul&gt;
&lt;li&gt;研究
&lt;ul&gt;
&lt;li&gt;デスクトップからモニターを外してデュアルモニターにして作業してる&lt;/li&gt;
&lt;li&gt;論文を読む&lt;/li&gt;
&lt;li&gt;プログラムを書く&lt;/li&gt;
&lt;li&gt;TeXで資料をまとめる / スライドを作る&lt;/li&gt;
&lt;li&gt;論文を書く&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;勉強
&lt;ul&gt;
&lt;li&gt;最近は非線形現象の勉強を少しやってる&lt;/li&gt;
&lt;li&gt;プログラムを書く&lt;/li&gt;
&lt;li&gt;Markdown形式でまとめる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;デスクトップ (研究室)
&lt;ul&gt;
&lt;li&gt;ノートパソコンと同じ環境を作っているので，研究室ではノートの代わりにデスクトップを使っている&lt;/li&gt;
&lt;li&gt;GitHubのprivateリポジトリで共有してる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Python3の開発環境をDocker containerとして作る</title>
      <link>https://tachibana-ai.netlify.app/post/docker_python/</link>
      <pubDate>Thu, 08 Jul 2021 18:58:51 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/docker_python/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;この記事では，Docker containerとしてPythonの開発環境を作ったときのメモを残す．
この記事の内容は，GitHubのサブのアカウントの&lt;a href=&#34;https://github.com/tcbn-ai/Docker_python_env&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;publicリポジトリ&lt;/a&gt;で公開している．&lt;/p&gt;
&lt;h3 id=&#34;1-必要なもの&#34;&gt;1. 必要なもの&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Docker Engineのインストール&lt;/li&gt;
&lt;li&gt;VSCodeのインストール
&lt;ul&gt;
&lt;li&gt;Remote Developementの導入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-基本構成&#34;&gt;2. 基本構成&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Docker Image
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/python&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;python&lt;/a&gt;の&lt;a href=&#34;https://github.com/docker-library/python/blob/e0e01b8482ea14352c710134329cdd93ece88317/3.8/buster/Dockerfile&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;3.8.10-buster&lt;/a&gt;を使っている．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ディレクトリ構成
&lt;pre&gt;&lt;code&gt;|- test_code/   # コードを置いている
|- .devcontainer/
    |- devcontainer.json
    |- docker-compose.yml
    |- dockerfile
    |- requirements.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;各種ファイル&#34;&gt;各種ファイル&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;devcontainer.json&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;VSCodeのRemoteを使うときの設定
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
// https://github.com/microsoft/vscode-dev-containers/tree/v0.177.0/containers/docker-existing-dockerfile
{
  // 名前は任意
  &amp;quot;name&amp;quot;: &amp;quot;Docker-Python&amp;quot;,
  // dockercomposefileの場所 (同階層に置いている)
  &amp;quot;dockerComposeFile&amp;quot;: &amp;quot;docker-compose.yml&amp;quot;,
  // 使う拡張機能
  &amp;quot;extensions&amp;quot;: [
    &amp;quot;ms-python.python&amp;quot;
  ],
  // ここに記載している&amp;quot;service&amp;quot;名とdocker-compose.ymlに記載している&amp;quot;service&amp;quot;を一致させる
  &amp;quot;service&amp;quot;: &amp;quot;python&amp;quot;,
  // コンテナ内に入ったときのworkdir
  &amp;quot;workspaceFolder&amp;quot;: &amp;quot;/code&amp;quot;,
  // VSCodeを閉じたときのアクション
  &amp;quot;shutdownAction&amp;quot;: &amp;quot;stopCompose&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;複数のコンテナを定義し，実行することができる．&lt;/li&gt;
&lt;li&gt;今回は，1つのコンテナに対する処理を記述
&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;version: &amp;quot;3&amp;quot;    # 3が最新版
services: 
    python: # ここの名前とdevcontainer.jsonの&amp;quot;service&amp;quot;を一致させる
        build: .    # 同階層のdockerfileからビルドする
        command: sleep infinity
        volumes: 
            - ../:/code  # 上階層のディレクトリをDocker Container上のworkdirにマウント
        environment: 
            SHELL: /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dockerfile&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;コンテナを作るための処理
&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;########### Image file ###########
FROM python:3.8.10-buster
##################################

########### update and install packages ###########
# apt-get upgradeに-yを付けないとexit 1になります．追加しました．(5/23)
RUN apt-get update &amp;amp;&amp;amp; \
    apt-get -y upgrade &amp;amp;&amp;amp; \
    apt-get install -y vim git &amp;amp;&amp;amp; \
    rm -rf /var/lib/apt/lists*
###################################################

########### create workspace ###########
RUN mkdir /code
WORKDIR /code
ADD ./requirements.txt /code/
########################################

########### install packages via pip ###########
RUN pip3 install -r requirements.txt
ADD . /code/
################################################
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requirements.txt&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip install&lt;/code&gt;するファイル
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;############ Requirements Packages ############
pylint
numpy
scipy
sympy
matplotlib
statsmodels
sklearn
pandas
networkx
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-使用時&#34;&gt;3. 使用時&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;test_code&lt;/code&gt;と同階層に自分のコードを格納したフォルダを配置して，VSCodeの左下の&amp;quot;Open Remote Window&amp;quot;を選択．&lt;/li&gt;
&lt;li&gt;Reopen in Containerを選択．&lt;/li&gt;
&lt;li&gt;ワークスペースが開いたら，terminalを開き，&lt;code&gt;python *.py&lt;/code&gt;で実行する．&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-いろいろ変えたいとき&#34;&gt;4. いろいろ変えたいとき&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip install&lt;/code&gt;するパッケージを変更したいとき
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;requirements.txt&lt;/code&gt;を書き換える&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pythonのバージョンを3の別バージョンに変えたいとき
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dockerfile&lt;/code&gt;のイメージファイル (2行目の&lt;code&gt;FROM&lt;/code&gt;以下) を書き換える．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pythonのバージョンを2にしたいとき
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/python&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;python&lt;/a&gt;には2系がないので，イメージファイルをUbuntu等にして1からインストールする．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu20.04にDocker Engineをインストールする</title>
      <link>https://tachibana-ai.netlify.app/post/ubuntu_docker/</link>
      <pubDate>Thu, 08 Jul 2021 18:25:39 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/ubuntu_docker/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;私が学部4年から修士1年までに使っていたPythonの開発環境はUbuntu上にpipとpipenvを入れ，pipenvで仮想環境を作って使うというものだった．Ubuntuを20にアップグレードしたときにこれまで使っていた仮想環境でプログラムが動かない，ということが起こった．&lt;/p&gt;
&lt;p&gt;このように，OSに1つの環境を作って動かそうとした際には，更新に伴いプログラムが動かなくなるというリスクがある．さらに，以下のような問題が挙げられる．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OSが汚れる
&lt;ul&gt;
&lt;li&gt;OSに直接インストールするので，複数のバージョンが共存するといったことが起こる．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;問題の切り分けが難しい
&lt;ul&gt;
&lt;li&gt;OSのアップグレードの問題なのか，パッケージの問題なのか分からなくなる．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;そんなときDockerに出会う．Dockerの説明は省略するが，イメージは1つのサーバに独立した複数のサーバを同時に構築することができる，というものである．これは良いと思い，研究の開発環境をDocker container上に作ることにした．&lt;/p&gt;
&lt;p&gt;Ubuntu20.04にDocker Engineをインストールするためのシェルスクリプトを作ったので，この記事で共有する．&lt;/p&gt;
&lt;h3 id=&#34;1-dockerの利点と欠点&#34;&gt;1. Dockerの利点と欠点&lt;/h3&gt;
&lt;p&gt;私が思うDockerの利点と欠点を以下に示す．あまり詳しくないエアプ発言かもしれない．&lt;/p&gt;
&lt;h4 id=&#34;利点&#34;&gt;利点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Dockerfileに開発に必要なパッケージのインストールについて記述できるので，Dockerfileとして記述してしまえば，そのとおりに環境構築ができる．&lt;/li&gt;
&lt;li&gt;移植しやすい．&lt;/li&gt;
&lt;li&gt;Python等のバージョンが変わったときもDockerfileの内容を変えることで最新版にアップデートできる．&lt;/li&gt;
&lt;li&gt;OSのバージョンに依らない．依存関係に関する問題を，パッケージのバージョンにまで絞り込める．&lt;/li&gt;
&lt;li&gt;OSが汚れない．&lt;/li&gt;
&lt;li&gt;1つのPCの中に複数の異なる開発環境を構築できる．&lt;/li&gt;
&lt;li&gt;VSCodeの拡張機能が優秀で，使いやすい．&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;欠点&#34;&gt;欠点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Windowsでエラーが出ることが多い気がする．Windowsで同じようなことをしようと思ってもうまく動かないことがある．&lt;/li&gt;
&lt;li&gt;WindowsではWSL2をバックエンドにしているので，メモリの消費量が多い．まともに動かそうと思うとメモリ16GBはないと厳しい．&lt;/li&gt;
&lt;li&gt;導入コスト．(自分が賢くないだけだけど) 難しい．&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-インストールのためのシェルスクリプト&#34;&gt;2. インストールのためのシェルスクリプト&lt;/h3&gt;
&lt;p&gt;福山大学の&lt;a href=&#34;https://www.kkaneko.jp/tools/docker/ubuntu_docker.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;金子邦彦先生のウェブサイト&lt;/a&gt; がかなり参考になった．Docker Engineの導入以外にもかなり参考にさせていただいた．&lt;/p&gt;
&lt;p&gt;次のようなシェルスクリプトを作り，&lt;code&gt;~/install_docker.sh&lt;/code&gt;として保存した．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

# Written by A.Tachibana, 2021/3/19

# Objective
## To install docker in Ubuntu 20

# Reference
## https://www.kkaneko.jp/tools/docker/ubuntu_docker.html

############ To execute ############
# chmod 755 install_docker.sh
# ./install_docker.sh
####################################


# Require password
printf &amp;quot;password: &amp;quot;
read -s password

# Update and Upgrade
echo &amp;quot;$password&amp;quot; | sudo -S apt update &amp;amp;&amp;amp; sudo -S apt -y upgrade

# Install Docker
## Delete old version (if exists)
sudo -S apt -y remove docker docker-engine docker.io containerd docker-ce docker-ce-cli
sudo -S apt -y autoremove
## Install required software
sudo -S apt update
sudo -S apt -y install apt-transport-https ca-certificates curl software-properties-common
sudo -S apt -y install linux-image-generic
## Set docker repository
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
apt-key fingerprint 0EBFCD88
sudo -S add-apt-repository \
    &amp;quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
    $(lsb_release -sc) \
    stable&amp;quot;
sudo -S apt update
## Install docker.io
sudo -S apt -y install docker.io containerd docker-compose
## Add authority
sudo -S usermod -aG docker $USER
## Set autostart
sudo -S systemctl unmask docker.service
sudo -S systemctl enable docker
sudo -S systemctl is-enabled docker
## let user ubuntu use docker
sudo gpasswd -a $USER docker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このファイルに実行権限を与え，実行する．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod 755 install_docker.sh
./install_docker.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;なお，このシェルスクリプトは，私のサブのGitHubアカウントの&lt;a href=&#34;https://github.com/tcbn-ai/TIL/blob/main/Study_Docker/shellscript/install_docker.sh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;publicリポジトリ&lt;/a&gt;にアップロードしている．&lt;/p&gt;
&lt;h4 id=&#34;参考&#34;&gt;参考&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kkaneko.jp/cc/vm/ubuntu_docker.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker Engine のインストールと使用法（Ubuntu 上）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu20.04にRとRStudioをインストールする</title>
      <link>https://tachibana-ai.netlify.app/post/ubuntu_rstudio/</link>
      <pubDate>Thu, 08 Jul 2021 18:07:46 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/ubuntu_rstudio/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;授業でRとRStudioを使う必要があったのでインストールした．
前処理がめんどくさかったので，シェルスクリプトを書いた．&lt;/p&gt;
&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yukiyanai.github.io/jp/resources/docs/install-R_ubuntu.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RとRStudioのインストールと初期設定 Linux (Ubuntu) 編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-前処理&#34;&gt;1. 前処理&lt;/h3&gt;
&lt;p&gt;次のようなシェルスクリプトを書き，&lt;code&gt;~/install_R_requirement.sh&lt;/code&gt;として保存した．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

# Written by A.Tachibana, 2021/4/28

# Objective
## To install R in Ubuntu 20
## Requirement packages

# Reference
## https://yukiyanai.github.io/jp/resources/docs/install-R_ubuntu.pdf

############ To execute ############
# chmod 755 install_R_requirement.sh
# ./install_R_requirement.sh
####################################

# Require password
printf &amp;quot;password: &amp;quot;
read -s password

# Update and Upgrade
echo &amp;quot;$password&amp;quot; | sudo -S apt update &amp;amp;&amp;amp; sudo -S apt -y upgrade

# 1. Install tools
sudo -S apt -y install gdebi-core wget 

# 2. Get fonts
sudo -S apt -y install fonts-ipaexfont
fc-cache -f -v

# 3. Install requirement tools
## requirement tools
sudo -S apt -y install build-essential libxml2-dev libssl-dev libx11-dev libglu1-mesa-dev libmagick++-dev libudunits2-0 libudunits2-dev libgdal-dev libproj-dev libgmp3-dev curl 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このファイルに実行権限を与え，実行する．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod 755 install_R_requirement.sh
./install_R_requirement.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-rとrstudioのインストール&#34;&gt;2. RとRStudioのインストール&lt;/h3&gt;
&lt;p&gt;次のようなシェルスクリプトを書き，&lt;code&gt;~/install_R.sh&lt;/code&gt;として保存した．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

# Written by A.Tachibana, 2021/4/28

# Objective
## To install R in Ubuntu 20

# Reference
## https://yukiyanai.github.io/jp/resources/docs/install-R_ubuntu.pdf

############ To execute ############
# chmod 755 install_R.sh
# ./install_R.sh
    # execute after install_R_requirement.sh
####################################

# Require password
printf &amp;quot;password: &amp;quot;
read -s password

# 1. add repository
sudo -S apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9
sudo -S add-apt-repository &#39;deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/&#39;
# 2. install R base
sudo -S apt update
sudo -S apt -y install r-base 
# 3. install RStudio
cd ~/Downloads/
# 2021/4/28
wget https://download1.rstudio.org/desktop/bionic/amd64/rstudio-1.4.1106-amd64.deb
sudo -S gdebi rstudio-1.4.1106-amd64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このファイルに実行権限を与え，実行する．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod 755 install_R.sh
./install_R.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;注意点&#34;&gt;注意点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;RStudioに関しては2021/4/28時点で最新のものをダウンロードしたが，現在はもっと新しいものが出ていると思う．
&lt;ul&gt;
&lt;li&gt;「最新版を持ってくる」ような書き方が分からなくて，頭の悪い書き方をしている．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;install_R.sh&lt;/code&gt;は，&lt;code&gt;install_R_requirement.sh&lt;/code&gt;の実行後に実行する．&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu20.04にTeX Liveをインストールする</title>
      <link>https://tachibana-ai.netlify.app/post/ubuntu_tex/</link>
      <pubDate>Thu, 08 Jul 2021 18:00:11 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/ubuntu_tex/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;UbuntuにTeXを入れたときのメモ&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-やること&#34;&gt;1. やること&lt;/h3&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;好きなエディタを入れる&lt;/li&gt;
&lt;li&gt;TeXLiveを入れる&lt;/li&gt;
&lt;li&gt;~/.latexmkrcを作る&lt;/li&gt;
&lt;li&gt;動作テスト&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;好きなエディタを入れる&#34;&gt;好きなエディタを入れる&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;私はTeXの文書を作るときはAtomを使うので，Atomを入れた．
&lt;ul&gt;
&lt;li&gt;公式サイト (&lt;a href=&#34;https://atom.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://atom.io/&lt;/a&gt;) からdebをダウンロードして実行．
&lt;pre&gt;&lt;code&gt;sudo apt install ./atom-amd64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;パッケージを入れる．
&lt;ul&gt;
&lt;li&gt;latex&lt;/li&gt;
&lt;li&gt;language-latex&lt;/li&gt;
&lt;li&gt;latexer&lt;/li&gt;
&lt;li&gt;pdf-view&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;texliveを入れる&#34;&gt;TeXLiveを入れる&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;日本の大学(e.g. NAIST)のリポジトリからダウンロードして中身を展開する．
&lt;pre&gt;&lt;code&gt;wget http://ftp.naist.jp/pub/CTAN/systems/texlive/tlnet/install-tl-unx.tar.gz
tar -zxvf install-tl-unx.tar.gz
cd install-tl-[date]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;管理者権限で実行する．リポジトリはダウンロードしたところ．
&lt;pre&gt;&lt;code&gt;sudo ./install-tl --repository http://ftp.naist.jp/pub/CTAN/systems/texlive/tlnet/
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;I&amp;quot;でインストール&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;パスを通す．
&lt;pre&gt;&lt;code&gt;sudo /usr/local/texlive/2020/bin/x86_64-linux/tlmgr path add
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;これは私の例である．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TeXLiveのアップデート
&lt;ul&gt;
&lt;li&gt;参照するリポジトリの指定
&lt;pre&gt;&lt;code&gt;sudo tlmgr option repository http://ftp.naist.jp/pub/CTAN/systems/texlive/tlnet/
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;アップデート
&lt;pre&gt;&lt;code&gt;sudo tlmgr update --self --all
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;latexmkrcの作成&#34;&gt;~/.latexmkrcの作成&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;毎回コンパイル(platexしてdvipdfmxして&amp;hellip;)というのは面倒 → latexmkを使うことで，保存する度に自動的にpdfまで生成するようにする．
&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&#34;https://qiita.com/tdrk/items/16f31e45826c57bce412&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;latexmkの薦め&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ubuntuでは以下のファイルをホームディレクトリ直下(~/.latexmkrc)に配置したところ，正常に動作した．&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;#!/usr/bin/perl
$latex = &#39;platex -guess-input-enc -src-specials -interaction=nonstopmode -synctex=1&#39;;
$latex_silent = &#39;platex -interaction=batchmode&#39;;
$dvips = &#39;dvips&#39;;
$bibtex = &#39;pbibtex&#39;;
$makeindex = &#39;mendex -r -c -s jind.ist&#39;;
$dvi_previewer = &#39;start dviout&#39;;
$dvipdf = &#39;dvipdfmx %O -o %D %S&#39;;
$pdf_previewer = &#39;xdg-open&#39;;
$preview_continuous_mode = 1;
$pdf_mode = 3;
$pdf_update_method = 4;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;latexmkについては，
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vim ~/.latexmkrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;などとして，上記のようなものを作ればよい．&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;動作テスト&#34;&gt;動作テスト&lt;/h4&gt;
&lt;h5 id=&#34;platex&#34;&gt;platex&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;test.tex&amp;quot;という名前のファイルをtextestというディレクトリの中に作った．
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\documentclass[dvipdfmx]{jsarticle}
\title{ {\LaTeX} 動作テスト・サンプルファイル}
\date{\today}
\begin{document}
\maketitle
\section{test}
これはテストです．
\begin{equation}
  f(x) = 2x + 3
\end{equation}
\end{document}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;textestというディレクトリに移動して，以下のコマンドを実行する．
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;platex test.tex &amp;amp;&amp;amp; dvipdfmx test.dvi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行後にpdfファイルが問題なく生成されていたら良い．&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;latexmk&#34;&gt;latexmk&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;先程のファイルに対して，
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;latexmk test.tex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;として，正しくpdfファイルが生成され，変更して保存した後にpdfファイルが更新されたら問題なく導入されている．&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>自己紹介</title>
      <link>https://tachibana-ai.netlify.app/post/first-post/</link>
      <pubDate>Thu, 08 Jul 2021 16:14:02 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/first-post/</guid>
      <description>&lt;h3 id=&#34;0-自己紹介-2021年現在&#34;&gt;0. 自己紹介 (2021年現在)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ハンドルネーム
&lt;ul&gt;
&lt;li&gt;たちばな / 橘 あい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;居住地
&lt;ul&gt;
&lt;li&gt;大阪府&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;学歴
&lt;ul&gt;
&lt;li&gt;学士&lt;/li&gt;
&lt;li&gt;現在修士2年&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;研究
&lt;ul&gt;
&lt;li&gt;計算機科学&lt;/li&gt;
&lt;li&gt;非線形力学系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;趣味
&lt;ul&gt;
&lt;li&gt;旅行&lt;/li&gt;
&lt;li&gt;自転車&lt;/li&gt;
&lt;li&gt;技術書を読んで手元で動かすこと&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-記事を始めたきっかけ&#34;&gt;1. 記事を始めたきっかけ&lt;/h3&gt;
&lt;p&gt;もともとGitHubのリポジトリにMarkdown形式で自分が勉強したこと / 知ってることをまとめていた．&lt;/p&gt;
&lt;p&gt;先日，研究室の後輩からHugoというものを使うとMarkdown形式で書いた文書をウェブサイトにできるということを教えてもらったので，ウェブサイトにしようかなと思った．&lt;/p&gt;
&lt;h3 id=&#34;2-今後の予定&#34;&gt;2. 今後の予定&lt;/h3&gt;
&lt;p&gt;博士進学せず，来年4月から就職します．それまでにこれまで書いたMarkdownの資料をこちらに移植したいと思っています．&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

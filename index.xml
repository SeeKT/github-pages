<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>立ち話</title>
    <link>https://tachibana-ai.netlify.app/</link>
      <atom:link href="https://tachibana-ai.netlify.app/index.xml" rel="self" type="application/rss+xml" />
    <description>立ち話</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ja-jp</language><copyright>@SeeKT</copyright><lastBuildDate>Tue, 13 Jul 2021 21:47:32 +0900</lastBuildDate>
    <image>
      <url>https://tachibana-ai.netlify.app/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>立ち話</title>
      <link>https://tachibana-ai.netlify.app/</link>
    </image>
    
    <item>
      <title>古いバージョンのKali linuxをインストールしようとした</title>
      <link>https://tachibana-ai.netlify.app/post/kali-linux-log/</link>
      <pubDate>Tue, 13 Jul 2021 21:47:32 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/kali-linux-log/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://s-akademeia.sakura.ne.jp/main/books/lab/faq.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ハッキング・ラボのつくりかた&lt;/a&gt;という本を読み進めていたところ，最新版のKali linux 2021.2では実行できない部分があったので (4章, 252ページ等)，書籍の環境である Kali linux 2018.2に合わせることにした．インストールにかなり苦戦した．&lt;/p&gt;
&lt;p&gt;後から気付いたが，&lt;code&gt;apt update&lt;/code&gt;と&lt;code&gt;apt upgrade&lt;/code&gt;をしてしまうとmetasploitも更新される．苦労してインストールしたが，同一の環境を作ることが目的であれば，実行しない方が良い．私はこの仮想マシンが翌日にグラフィカルモードで起動しなくなったので，消した．&lt;/p&gt;
&lt;p&gt;このようなことは二度としないと思うが，自分への戒めとして，また，もし今後このような状況があったときに備えて記事に残すが，真似はしない方が良い．可能であれば安定起動版か最新版を入れた方が良いし，わざわざ少し古いバージョンを入れて更新するのは手間である．&lt;/p&gt;
&lt;h4 id=&#34;01-概要&#34;&gt;0.1. 概要&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;インストール
&lt;ul&gt;
&lt;li&gt;DNSサーバに&lt;code&gt;8.8.8.8&lt;/code&gt;を指定する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;署名
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;archive.kali.org&lt;/code&gt;から入手する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;依存関係
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ruby-http-parser.rb&lt;/code&gt;の依存関係
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apt-get install&lt;/code&gt;する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thin&lt;/code&gt;のエラー
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/var/lib/dpkg/info&lt;/code&gt;にある該当ファイルを削除して，&lt;code&gt;apt install&lt;/code&gt;する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ruby-progressbar&lt;/code&gt;のエラー
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dpkg -i --force-overwrite&lt;/code&gt;する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-kali-linux-20182のインストール&#34;&gt;1. Kali linux 2018.2のインストール&lt;/h3&gt;
&lt;p&gt;ovaがないので，isoファイルをダウンロードする．ここでは，&lt;code&gt;kali-linux-2018.2-amd64.iso&lt;/code&gt;を以下からダウンロードした．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://old.kali.org/kali-images/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Index of /kali-images&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あとはVirtualboxで仮想マシンを入れるのと同様にすれば良いが，nameserverに&lt;code&gt;8.8.8.8&lt;/code&gt;を指定することを忘れないようにする (名前解決の問題)．&lt;/p&gt;
&lt;h3 id=&#34;2-インストール後の処理&#34;&gt;2. インストール後の処理&lt;/h3&gt;
&lt;h4 id=&#34;21-署名&#34;&gt;2.1. 署名&lt;/h4&gt;
&lt;p&gt;1でインストールしたkali linuxで&lt;code&gt;apt update&lt;/code&gt;しようとすると，&amp;ldquo;The following signatures were invalid&amp;quot;のエラーが出る．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-signatureのエラー&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_1_apt_error.png&#34; alt=&#34;signature&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      signatureのエラー
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;同様のエラーをStackExchangeで探し，同じように解決しようと試みた．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://unix.stackexchange.com/questions/421821/invalid-signature-for-kali-linux-repositories-the-following-signatures-were-i&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Invalid signature for Kali Linux repositories : “The following signatures were invalid: EXPKEYSIG ED444FF07D8D0BF6 Kali Linux Repository”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gpg --keyserver hkp://keys.gnupg.net --recv-key 7D8D0BF6
gpg --fingerprint 7D8D0BF6
gpg -a --export 7D8D0BF6 | apt-key add -
apt update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;と&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget -q -O - https://archive.kali.org/archive-key.asc | apt-key add
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;が紹介されていた．前者でうまくいかなかったので，後者を試した．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-gpgキーを追加する&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_2_key_add.png&#34; alt=&#34;key&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      gpgキーを追加する
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;22-依存関係&#34;&gt;2.2. 依存関係&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;apt update&lt;/code&gt;はできたので，&lt;code&gt;apt upgrade&lt;/code&gt;しようとしたところ，&lt;code&gt;ruby-http-parser.rb&lt;/code&gt;に依存関係の問題があるらしく，できなかった．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-依存関係&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_3_cannot_apt_upgrade.png&#34; alt=&#34;dependencies&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      依存関係
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ruby-http-parser.rb&lt;/code&gt;をインストールすれば良いかもしれない．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://5.9.10.113/64784465/kali-the-following-packages-have-unmet-dependencies&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kali &amp;lsquo;the following packages have unmet dependencies&amp;rsquo;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ruby-http-parserrbのインストール&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_4_apt_listchanges.png&#34; alt=&#34;ruby_parser&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ruby-http-parser.rbのインストール
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get install ruby-http-parser.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;を実行したところ，上のapt-listchangesが出力された．末尾まで見てqで進めた．途中に質問されたが，そのまま答えた．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-質問&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_5.png&#34; alt=&#34;question&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      質問
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-cron&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_6_cron.png&#34; alt=&#34;cron&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      cron
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;最後まで進めたところ，エラーが出た．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-thinのエラー&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_7.png&#34; alt=&#34;error_thin&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      thinのエラー
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;とりあえず，&lt;code&gt;apt-get clean&lt;/code&gt;と&lt;code&gt;apt-get -f install&lt;/code&gt;をしてみることにしたが，同じエラーが残っている．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-同様のエラー&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_8.png&#34; alt=&#34;same_error&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      同様のエラー
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;同様のエラーを解決している記事を発見したので，以下の記事のようにしてエラーを解消する．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://engetu21.hatenablog.com/entry/2014/12/06/004525&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;【LIVA】【Ubuntu server14.04】apt-getでエラー発生（post-installationスクリプトエラー）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ikkuntech.blogspot.com/2012/03/apt-get.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;apt-getのpost-installationスクリプトエラー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dpkg --audit
dpkg --configure thin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-dpkgコマンド&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_9.png&#34; alt=&#34;dpkg_command&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      dpkgコマンド
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;参考サイトによると，&lt;code&gt;/var/lib/dpkg/info&lt;/code&gt;以下の関連するファイルを削除すれば良いらしい．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /var/lib/dpkg/info
rm -rf thin.postinst thin.postrm thin.prerm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ファイルの削除&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_10.png&#34; alt=&#34;remove&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ファイルの削除
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;この後に&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dpkg --configure thin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;をすれば良いらしいが，何故かうまくいかなかった．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-thinのsetup&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_11.png&#34; alt=&#34;thin_config&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      thinのsetup
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;仕方ないので，thinをインストールすることにした．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt install thin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-thinのインストール&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_12.png&#34; alt=&#34;install_thin&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      thinのインストール
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;エラーが出なかったので，確認する．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dpkg -s thin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-status&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_13.png&#34; alt=&#34;noterror&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      status
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Status install ok installed&lt;/code&gt;になっているので，良さそう．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://serverlog.jp/apt-get-dependence/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;apt-getによる依存関係の解決方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;apt update&lt;/code&gt;と&lt;code&gt;apt upgrade&lt;/code&gt;を試す．&lt;/p&gt;
&lt;p&gt;途中で&amp;quot;Configuring macchanger&amp;quot;と&amp;quot;sslh configuration&amp;quot;について聞かれたが，それぞれ&amp;quot;Yes&amp;quot;と&amp;quot;from inetd&amp;quot;にした．&lt;/p&gt;
&lt;p&gt;また，&amp;ldquo;Configuring base-passwd&amp;quot;というのも聞かれた．今変更しなくても後から変更できるらしいので，&amp;ldquo;No&amp;quot;を選択した．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-エラー&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_14.png&#34; alt=&#34;error2&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      エラー
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;またエラーが出たので，原因を探す．とりあえず，&lt;code&gt;apt-get clean&lt;/code&gt;とかを実行する．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-apt-get-cleanを実行&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_15.png&#34; alt=&#34;apt-get-clean&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      apt-get cleanを実行
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&amp;ldquo;ruby-cms-scanner: &amp;ldquo;の行から，依存関係の問題があることが分かった．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt install ruby-progressbar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;でインストールしようとしたが，先ほどと同様のエラーが出た．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-上と同様のエラー&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_16.png&#34; alt=&#34;error3&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      上と同様のエラー
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;以下のサイトと類似しているエラーだったので，関連debを上書きインストールする方法を試してみた．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dpkg -i --force-overwrite /var/cache/apt/archives/ruby-progressbar_1.10.1-1_all.deb
apt --fix-broken install
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;参考
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.tizen.moe/entry/2020/12/16/000000&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;apt &amp;ndash;fix-broken installしろと言われた場合の対応&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;ldquo;Configuring postgresql-common&amp;quot;について聞かれたので，&amp;ldquo;Ok&amp;quot;とした．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-apt---fix-broken後&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_17.png&#34; alt=&#34;unerror&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      apt &amp;ndash;fix-broken後
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;いけたように見える．一応&lt;code&gt;apt update&lt;/code&gt;と&lt;code&gt;apt upgrade&lt;/code&gt;を確認する．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-not-upgraded&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_18.png&#34; alt=&#34;not-upgraded&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      not-upgraded
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&amp;ldquo;not-upgraded&amp;quot;となっているが，一応エラーは消えているようなので，この処理は終了．&lt;/p&gt;
&lt;h4 id=&#34;23-ネットワーク設定&#34;&gt;2.3. ネットワーク設定&lt;/h4&gt;
&lt;p&gt;書籍第2章に合わせる．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アダプター1
&lt;ul&gt;
&lt;li&gt;ホストオンリーアダプター&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アダプター2
&lt;ul&gt;
&lt;li&gt;NAT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kali linux 2021.2に&lt;code&gt;10.0.0.2&lt;/code&gt;を割り振っているので，Kali linux 2018.2には&lt;code&gt;10.0.0.3&lt;/code&gt;を割り振る．&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_19.png&#34; alt=&#34;network_config&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;24-ユーザの追加&#34;&gt;2.4. ユーザの追加&lt;/h4&gt;
&lt;p&gt;&amp;ldquo;ai&amp;quot;というユーザを追加する．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;useradd -m ai
passwd ai
usermod -a -G sudo ai
chsh -s /bin/bash ai
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ユーザを追加&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_20.png&#34; alt=&#34;useradd&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ユーザを追加
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;25-ssh環境&#34;&gt;2.5. ssh環境&lt;/h4&gt;
&lt;h5 id=&#34;1-sshホスト鍵の再生成&#34;&gt;(1) SSHホスト鍵の再生成&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /etc/ssh
mkdir default_keys
mv ssh_host_* default_keys/
dpkg-reconfigure openssh-server
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-sshdの起動&#34;&gt;(2) sshdの起動&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;service ssh start
update-rc.d ssh enable
apt install sysv-rc-conf -y
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3-ログインできるか確認&#34;&gt;(3) ログインできるか確認&lt;/h5&gt;
&lt;p&gt;ローカルから&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh ai@localhost
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ローカルからssh接続&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_21.png&#34; alt=&#34;ssh&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ローカルからssh接続
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Windows側から&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh ai@10.0.0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-windowsからssh接続&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_22.png&#34; alt=&#34;ssh_win&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Windowsからssh接続
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;どちらも接続できている．&lt;/p&gt;
&lt;h5 id=&#34;4-rootログインの許可&#34;&gt;(4) rootログインの許可&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;を編集して&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PermitRootLogin yes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;にする．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-rootログイン&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_23.png&#34; alt=&#34;root&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      rootログイン
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h5 id=&#34;5-公開鍵認証&#34;&gt;(5) 公開鍵認証&lt;/h5&gt;
&lt;p&gt;Windows側で公開鍵があるディレクトリで，&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scp .\id_rsa.pub root@10.0.0.3:/root/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;とする．&lt;/p&gt;
&lt;p&gt;kali linux側で，&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat id_rsa.pub &amp;gt;&amp;gt; ./.ssh/authorized_keys
chmod -R 700 ./.ssh/
chmod -R 600 ./.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;を実行．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;の&lt;code&gt;PubkeyAuthentication&lt;/code&gt;と&lt;code&gt;AuthorizedKeysFile&lt;/code&gt;のコメントを外す．&lt;/p&gt;
&lt;p&gt;Windows側の&lt;code&gt;.ssh/config&lt;/code&gt;に以下を追加．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Host kali_2018
    HostName 10.0.0.3
    User root
    IdentityFile [authorized_keysに対応する秘密鍵のパス]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh kali_2018
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;でログインできることを確認する．&lt;/p&gt;
&lt;h3 id=&#34;3-まとめ&#34;&gt;3. まとめ&lt;/h3&gt;
&lt;p&gt;kali linux 2018.2を導入し，初期設定をした．2018を入れたつもりだが，アップグレードされていた．結局消したが，苦労したので戒めとして残した．真似はしない方が良い．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>書籍を読みながらMetasploitを使ってみて詰まったところ</title>
      <link>https://tachibana-ai.netlify.app/post/hacking-lab_1/</link>
      <pubDate>Tue, 13 Jul 2021 21:24:32 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/hacking-lab_1/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;最近，&lt;a href=&#34;https://s-akademeia.sakura.ne.jp/main/books/lab/faq.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ハッキング・ラボのつくりかた&lt;/a&gt;という本を読んでいる．ツイートされていた方もいらっしゃったが，書籍第4章のWindowsに紹介されているmeterpreterのプロンプトで&lt;code&gt;run hashdump&lt;/code&gt;や&lt;code&gt;run scraper&lt;/code&gt;が実行できない．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/K88336374/status/1409822251797471238?s=20&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;該当ツイート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-runのエラー&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2021_1.png&#34; alt=&#34;scraper_error&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      runのエラー
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Meterpreterがスクリプトの実行をサポートしなくなったことが原因の1つだと考えたので，何とか書籍のコードを実行できないか試してみたいと思った．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/DeXhCjktu3ABTLZ/status/1413171321475780608?s=20&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;該当ツイートへのリプライ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/iagox86/metasploit-framework-webexec/blob/master/scripts/meterpreter/enum_chrome.rb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHubのmetasploit-framework-webexec&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は，書籍の環境に合わせることで実行した．もっと良い方法があるはずだが，知識のない私にはこれが限界だった．&lt;/p&gt;
&lt;h3 id=&#34;1-環境について&#34;&gt;1. 環境について&lt;/h3&gt;
&lt;h4 id=&#34;11-これまで用いていた環境&#34;&gt;1.1. これまで用いていた環境&lt;/h4&gt;
&lt;p&gt;私がこれまで使っていた環境を記載する．Virtualbox上で仮想マシンを動かしている．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ホストOS
&lt;ul&gt;
&lt;li&gt;Windows11
&lt;ul&gt;
&lt;li&gt;IP address (ホストオンリーネットワーク): 10.0.0.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ゲストOS
&lt;ul&gt;
&lt;li&gt;Kali Linux 2021.2
&lt;ul&gt;
&lt;li&gt;LANアダプター1 (ホストオンリーネットワーク): 10.0.0.2&lt;/li&gt;
&lt;li&gt;LANアダプター2 (NAT): DHCP&lt;/li&gt;
&lt;li&gt;metasploit v6.0.52-dev&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows7 (ターゲット端末)
&lt;ul&gt;
&lt;li&gt;LANアダプター1 (ホストオンリーネットワーク): DHCP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;12-書籍の環境と今回比較のために用いる環境&#34;&gt;1.2. 書籍の環境と今回比較のために用いる環境&lt;/h4&gt;
&lt;p&gt;書籍では，Kali Linux 2018.2を用いている．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;書籍の環境
&lt;ul&gt;
&lt;li&gt;Kali Linux 2018.2
&lt;ul&gt;
&lt;li&gt;LANアダプター1 (ホストオンリーネットワーク): 10.0.0.2&lt;/li&gt;
&lt;li&gt;LANアダプター2 (NAT): DHCP&lt;/li&gt;
&lt;li&gt;metasploit v4.16.65-dev (書籍pp.240より)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は，1.1で作った環境を壊したくなかったので，Virtualbox上に新しく特定のバージョンのKali linuxをisoファイルからインストールして，それを用いる．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;今回作った環境
&lt;ul&gt;
&lt;li&gt;Kali Linux 2018.2
&lt;ul&gt;
&lt;li&gt;LANアダプター1 (ホストオンリーネットワーク): 10.0.0.3&lt;/li&gt;
&lt;li&gt;metasploit v4.16.48-dev&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここで，Kali Linux 2018.2に関しては，インターネットに接続せず，Windows7との通信のためだけに用いることにする．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apt update&lt;/code&gt;や&lt;code&gt;apt upgrade&lt;/code&gt;を行うとmetasploitのバージョンが更新される可能性がある．&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt update&lt;/code&gt;や&lt;code&gt;apt upgrade&lt;/code&gt;をしようとしたときにエラーが出た．何とか改善したが，metasploitのバージョンまで更新された(1敗)．
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tachibana-ai.netlify.app/post/kali-linux-log/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;古いバージョンのKali linuxをインストールしようとした&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また，旧バージョンのisoファイルは，以下からダウンロードした．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://old.kali.org/kali-images/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Index of /kali-images&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-kali-linux-20182での実行&#34;&gt;2. Kali Linux 2018.2での実行&lt;/h3&gt;
&lt;h4 id=&#34;21-環境構築&#34;&gt;2.1. 環境構築&lt;/h4&gt;
&lt;p&gt;isoファイルを使って仮想マシンを構築する．途中のDNSサーバを指定するところで，&lt;code&gt;8.8.8.8&lt;/code&gt;を指定するのを忘れない．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hackcrack89.blog.fc2.com/blog-entry-30.html?sp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kali Linux on Linux Deploy - resolv.confの編集&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;うまくいくと，以下のようなデスクトップとして起動できる．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-デスクトップの起動&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_1.png&#34; alt=&#34;kali_2018_1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      デスクトップの起動
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;IPアドレスの編集を行う．Virtualbox側でホストオンリーネットワークを指定し，Kali linux側の&lt;code&gt;/etc/network/interfaces&lt;/code&gt;に以下を追加．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;allow-hotplug eth0
iface eth0 inet static
address 10.0.0.3
netmask 255.255.255.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;設定後再起動し，うまく割り振られているか，ホストOSにpingが飛ぶか確認した．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-pingの確認&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_2.png&#34; alt=&#34;kali_2018_2&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      pingの確認
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;22-metasploitの起動と確認&#34;&gt;2.2. metasploitの起動と確認&lt;/h4&gt;
&lt;p&gt;次に，msfconsoleでmetasploitを起動し，バージョンを確認する．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-metasploitのバージョンの確認&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_3.png&#34; alt=&#34;kali_2018_3&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      metasploitのバージョンの確認
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;v4.16.48-devであることが分かり，書籍よりも前のバージョンであることが分かる．&lt;/p&gt;
&lt;p&gt;書籍の処理を実行してみる．まず，ペイロードを作成し，実行した．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ペイロードの実行&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_4.png&#34; alt=&#34;kali_2018_4&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ペイロードの実行
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;次に，SYSTEM権限を奪取して，&lt;code&gt;run hashdump&lt;/code&gt;を実行した．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-hashdumpの実行&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_5.png&#34; alt=&#34;kali_2018_5&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      hashdumpの実行
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;注意は出たが，止まらずに実行できているようである．期待できそうだったので，&lt;code&gt;run scraper&lt;/code&gt;もやってみる．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-run-scraperの実行&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./kali_2018_6.png&#34; alt=&#34;kali_2018_6&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      run scraperの実行
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;実行できた．&lt;code&gt;run persistence&lt;/code&gt;も実行できた．&lt;/p&gt;
&lt;h3 id=&#34;3-まとめ&#34;&gt;3. まとめ&lt;/h3&gt;
&lt;p&gt;書籍の環境に合わせたら一応実行はできた．もっと良い方法があるとは思うが，演習だと思えば&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ファイルサーバを構築したときのログ (Ubuntu18.04)</title>
      <link>https://tachibana-ai.netlify.app/post/create_server/</link>
      <pubDate>Fri, 09 Jul 2021 18:39:46 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/create_server/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;以前ファイルサーバを構築したので，そのときのログを残す．&lt;/p&gt;
&lt;p&gt;色々と怪しい部分もあるかもしれないので，一個人の記録として見ていただければ幸いである．&lt;/p&gt;
&lt;p&gt;以下，LinuxサーバをUbuntu18.04とし，クライアント側はWindows10もしくはUbuntu20.04とする．Windows10の場合はGit Bashが導入済みであるものとする．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SSH接続の設定&lt;/li&gt;
&lt;li&gt;Sambaの設定&lt;/li&gt;
&lt;li&gt;バックアップの設定&lt;/li&gt;
&lt;li&gt;CUI運用にする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という流れで実行した．&lt;/p&gt;
&lt;h3 id=&#34;1-ssh接続&#34;&gt;1 SSH接続&lt;/h3&gt;
&lt;p&gt;サーバにリモートで接続して手元で扱うときには，SSH (Secure Shell) 接続を用いることが多い．SSHは，セキュアな通信でリモートアクセスするためのプロトコルであり，強固な認証と暗号化の機能がある (詳しい説明は省略)．ここでは，LinuxサーバのSSH設定の手順について述べる．認証方式は公開鍵認証とする．&lt;/p&gt;
&lt;p&gt;以下，サーバ側のシェルに&lt;code&gt;(server)&lt;/code&gt;とし，接続するクライアント側のシェルに&lt;code&gt;(client)&lt;/code&gt;と書くものとする．&lt;/p&gt;
&lt;h4 id=&#34;1-sshdのインストールと自動起動の設定-サーバ側&#34;&gt;(1) sshdのインストールと自動起動の設定 (サーバ側)&lt;/h4&gt;
&lt;p&gt;ホスト側でsshをインストールして，自動起動の設定を行う．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) sudo apt update &amp;amp;&amp;amp; sudo apt -y upgrade
(server) sudo apt -y install ssh
(server) sudo systemctl start ssh.service
(server) sudo systemctl enable ssh.service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この後サーバを再起動し，以下のコマンドを実行．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) sudo systemctl is-enabled ssh.service
(server) sudo systemctl status ssh.service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上のコマンドを実行し，&lt;code&gt;enabled&lt;/code&gt;と出力されれば，ブート時に起動する．下のコマンドを実行し，&lt;code&gt;Active: active (running)&lt;/code&gt;と出力されれば現在sshdが起動している．&lt;/p&gt;
&lt;p&gt;この時点でサーバ側にパスワード認証で入ることができる．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(client) ssh [user]@[IP address of the server]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(userはサーバのユーザ名)とすると，特に設定が間違えていなければ接続できる．&lt;/p&gt;
&lt;p&gt;今回の目的は公開鍵認証で入ることなので，以下の手順を&lt;/p&gt;
&lt;h4 id=&#34;2-キーペアを作る-クライアント側&#34;&gt;(2) キーペアを作る (クライアント側)&lt;/h4&gt;
&lt;p&gt;クライアント側でキーペアを作る．キーペアの作り方については以下の記事を参考にした．&lt;/p&gt;
&lt;p&gt;Git Bash (Ubuntuはterminal)で，以下のコマンドを実行する．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(client) ssh-keygen -t rsa -b 4096 -C &amp;quot;comment&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記のコマンドを実行すると，鍵のパスを変えるか，パスフレーズは必要か聞かれる．鍵はデフォルトでは&lt;code&gt;&amp;lt;user&amp;gt;/.ssh&lt;/code&gt;直下に&lt;code&gt;id_rsa&lt;/code&gt;と&lt;code&gt;id_rsa.pub&lt;/code&gt;として保存されるが，複数の鍵を作る場合は新しいディレクトリを&lt;code&gt;.ssh&lt;/code&gt;以下に作るなどすれば良いと思う．&lt;/p&gt;
&lt;p&gt;commentは任意だが，複数人が管理するファイルサーバという機能を持たせると考えると，自分の名字にするのが良いように思う．&lt;/p&gt;
&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/suthio/items/2760e4cff0e185fe2db9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;お前らのSSH Keysの作り方は間違っている&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-クライアント側からホスト側に公開鍵を送信する&#34;&gt;(3) クライアント側からホスト側に公開鍵を送信する&lt;/h4&gt;
&lt;p&gt;(1)でSSH接続ができているとすると，クライアント側でscpコマンドを実行すると，サーバ側のuserのホームディレクトリ直下に公開鍵を転送できる．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(client) scp [client rsa pub key path] [user]@[IP address of the server]:/home/[user]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここで，scpはSSHを使ってリモートホストとローカルホストの通信を暗号化した上で，ファイルの送信をするコマンドであり，&lt;code&gt;scp [from] [to]&lt;/code&gt;のように書けば，fromのパスで指定したファイルがtoのパスの下に送られる．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[client rsa pub key path]&lt;/code&gt;は，キーペアを作るときに変えていなければ，(Windowsの場合は)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\Users\[user]\.ssh\id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;である．&lt;/p&gt;
&lt;h4 id=&#34;4-authorized_keysファイルを作る&#34;&gt;(4) &lt;code&gt;authorized_keys&lt;/code&gt;ファイルを作る&lt;/h4&gt;
&lt;p&gt;次に，サーバ側で鍵の設定をする．(3)で，ホームディレクトリ直下に公開鍵が送られたとする．このファイルの内容を&lt;code&gt;authorized_keys&lt;/code&gt;ファイルにコピーする．その後，&lt;code&gt;chmod&lt;/code&gt;コマンドで所有者のみが読めるようにする．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) cat id_rsa.pub &amp;gt;&amp;gt; ./.ssh/authorized_keys
(server) chmod 700 ./.ssh
(server) chmod 600 ./.ssh/authorized_keys
(server) rm -rf id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-sshd_configの設定-サーバ側&#34;&gt;(5) &lt;code&gt;sshd_config&lt;/code&gt;の設定 (サーバ側)&lt;/h4&gt;
&lt;p&gt;公開鍵認証を有効化するために，sshdの設定ファイルを編集する．一旦バックアップをとる．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) cd /etc/ssh
(server) sudo cp sshd_config sshd_config.bk
(server) sudo vim sshd_config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以下の行のコメントを外し，有効化する．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;#PubkeyAuthentication yes
#AuthorizedKeysFile .ssh/authorized_keys  .ssh/authorized_keys2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一応Rootでのログインはできないようにしておく．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;PermitRootLogin no
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;参考-1&#34;&gt;参考&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/gotohiro55/items/36a22516de2b381b3c6e&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SSHの鍵認証設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;6-sshのconfigファイルの設定-クライアント側&#34;&gt;(6) &lt;code&gt;.ssh&lt;/code&gt;のconfigファイルの設定 (クライアント側)&lt;/h4&gt;
&lt;p&gt;(5)までで公開鍵認証でSSH接続できるようになった．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;ssh -i [client rsa private key path] [user]@[IP address of the server]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接続のたびにこのコマンドを打つのはめんどくさいので，エイリアス設定をする．&lt;code&gt;.ssh/config&lt;/code&gt;ファイルに以下を追加 (Windowsの場合．秘密鍵が&lt;code&gt;.ssh&lt;/code&gt;直下にあるとする)．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Host [server name]
  HostName xxx.xxx.xxx.xxx  # IP address of the server
  User [user]               # user name of the server
  Identityfile C:\Users\[user]\.ssh\id_rsa
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このようにすると，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh [servername]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;でサーバに接続できる．&lt;/p&gt;
&lt;h3 id=&#34;2-sambaの設定&#34;&gt;2 Sambaの設定&lt;/h3&gt;
&lt;p&gt;Sambaとは，Linux上でWindowsのネットワーク機能を実現するソフトウェアである．これを使うことで，ファイルサーバの機能が実現される．&lt;/p&gt;
&lt;p&gt;以下，ホームディレクトリ直下の&lt;code&gt;Share_dir&lt;/code&gt;を共有するものとする．ここでは，同一のネットワークのホストに対してフルパーミッションで権限を与える場合を想定する．&lt;/p&gt;
&lt;h5 id=&#34;参考-2&#34;&gt;参考&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=eVVfJYXq1ug&amp;amp;list=LL&amp;amp;index=1&amp;amp;t=740s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;【Linux】Ubuntuでファイルサーバーを作って遊ぼう！(中級者～上級者向け)【世界一わかりやすい解説(かもしれない)】&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;このYouTubeの動画を参考にした．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1-sambaのインストール&#34;&gt;(1) Sambaのインストール&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) sudo apt install -y samba
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-sambaconfのバックアップと編集&#34;&gt;(2) &lt;code&gt;samba.conf&lt;/code&gt;のバックアップと編集&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) cd /etc/samba/
(server) sudo cp smb.conf smb.conf.bk
(server) sudo vim smb.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;末尾に以下を追加．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;# fileserver
[fileserver]
comment = Ubuntu FileServer
path = /home/[user]/Share_dir/
browseable = yes
read only = no
guest ok = yes
guest only = yes
create mode = 0777
directory mode = 0777
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-再起動と自動起動の設定&#34;&gt;(3) 再起動と自動起動の設定&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) sudo systemctl restart smbd nmbd
(server) sudo systemctl enable smbd nmbd
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-バックアップ&#34;&gt;3. バックアップ&lt;/h3&gt;
&lt;p&gt;共有したディレクトリをHDDなどにバックアップすることを考える．これは，突然PCが落ちてデータが飛ぶようなリスクへの対策となる．&lt;/p&gt;
&lt;p&gt;ここではHDDがマウントポイント&lt;code&gt;/mnt/Elements&lt;/code&gt;にマウントされているとし，システム起動時にマウントするように設定したとする．&lt;/p&gt;
&lt;h4 id=&#34;1-バックアップ用のディレクトリの作成&#34;&gt;(1) バックアップ用のディレクトリの作成&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Server_backup&lt;/code&gt;ディレクトリにバックアップを取るものとする．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) mkdir /mnt/Elements/Server_backup
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-バックアップの設定&#34;&gt;(2) バックアップの設定&lt;/h4&gt;
&lt;p&gt;ここでは，差分バックアップを取るものとする．このときに使うコマンドは&lt;code&gt;rsync&lt;/code&gt;である．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) sudo rsync -av /home/[user]/Share_dir/ /mnt/Elements/Server_backup
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これは，&lt;code&gt;Share_dir&lt;/code&gt;の中身を&lt;code&gt;/mnt/Elements/Server_backup&lt;/code&gt;にバックアップするというようなものである．ここで，引数&lt;code&gt;-av&lt;/code&gt;は，今どこをコピーしているのかを表示出力するためのものである．&lt;/p&gt;
&lt;h4 id=&#34;3-バックアップのスケジューラの設定&#34;&gt;(3) バックアップのスケジューラの設定&lt;/h4&gt;
&lt;p&gt;毎日バックアップを更新するために，スケジューラを用いる．crontabを編集すれば良い．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) sudo vim /etc/crontab
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以下を追加した．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# m h dom mon dow user	command
00 3	* * *	root    rsync -av /home/[user]/Share_dir/ /mnt/Elements/Server_backup
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4-cui運用にする&#34;&gt;4. CUI運用にする&lt;/h3&gt;
&lt;p&gt;ファイルサーバとしての運用であれば，CUI運用の方が良い．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 一時的にCUIモードにする
(server) sudo systemctl isolate multi-user.target
# デフォルトをCUIモードにする
(server) sudo systemctl set-default multi-user.target
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;GUIに戻したいときは以下のコマンドを実行．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 一時的にGUIモードにする
(server) sudo systemctl isolate graphical.target
# デフォルトをGUIモードにする
(server) sudo systemctl set-default graphical.target
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5-まとめ&#34;&gt;5. まとめ&lt;/h3&gt;
&lt;p&gt;ファイルサーバを作った際のログを残した．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>普段使っているPC周りの環境</title>
      <link>https://tachibana-ai.netlify.app/post/myenv/</link>
      <pubDate>Thu, 08 Jul 2021 19:15:53 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/myenv/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;この記事では，私が普段使っているPC周りの環境を書く．就職したらもっと良いのがほしい．&lt;/p&gt;
&lt;h3 id=&#34;1-自宅の環境とノートpc&#34;&gt;1. 自宅の環境とノートPC&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;デスクトップ
&lt;ul&gt;
&lt;li&gt;Lenovo V530
&lt;ul&gt;
&lt;li&gt;色々手を加えた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS: Windows11&lt;/li&gt;
&lt;li&gt;SSD: 512GB
&lt;ul&gt;
&lt;li&gt;もともと256GB．換装した．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RAM: 16GB&lt;/li&gt;
&lt;li&gt;CPU: Core i5-9500&lt;/li&gt;
&lt;li&gt;GPU (増設): GTX-1050Ti
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/gp/product/B01M360WG6/ref=ppx_yo_dt_b_asin_title_o05_s00?ie=UTF8&amp;amp;psc=1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PH-GTX1050TI-4G&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ノート
&lt;ul&gt;
&lt;li&gt;iiyama 14インチ (BTO)&lt;/li&gt;
&lt;li&gt;OS: Ubuntu20.04&lt;/li&gt;
&lt;li&gt;SSD: 256GB&lt;/li&gt;
&lt;li&gt;HDD: 1TB&lt;/li&gt;
&lt;li&gt;RAM: 16GB&lt;/li&gt;
&lt;li&gt;CPU: Core i5-8265&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;モニター
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/gp/product/B06VT3DVBD/ref=ppx_yo_dt_b_asin_title_o06_s01?ie=UTF8&amp;amp;psc=1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ASUS 23インチ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-研究室の環境&#34;&gt;2. 研究室の環境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;デスクトップ
&lt;ul&gt;
&lt;li&gt;自作&lt;/li&gt;
&lt;li&gt;OS: Ubuntu20.04&lt;/li&gt;
&lt;li&gt;SSD: 480GB&lt;/li&gt;
&lt;li&gt;RAM: 16GB&lt;/li&gt;
&lt;li&gt;CPU: Core i5-8400&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;モニター
&lt;ul&gt;
&lt;li&gt;iiyama 23インチ&lt;/li&gt;
&lt;li&gt;ASUS 27インチ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-用途&#34;&gt;3. 用途&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;デスクトップ (家)
&lt;ul&gt;
&lt;li&gt;ゲーム
&lt;ul&gt;
&lt;li&gt;ドラクエ11S楽しい！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Virtualboxを使ったセキュリティの勉強
&lt;ul&gt;
&lt;li&gt;最近&lt;a href=&#34;https://www.amazon.co.jp/gp/product/4798155306/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;amp;psc=1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ハッキング・ラボのつくりかた&lt;/a&gt;という本を読んでる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hugoを使ってこのサイトの記事の編集&lt;/li&gt;
&lt;li&gt;学会発表の練習のためにOBSを使って録音&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ノートパソコン
&lt;ul&gt;
&lt;li&gt;研究
&lt;ul&gt;
&lt;li&gt;デスクトップからモニターを外してデュアルモニターにして作業してる&lt;/li&gt;
&lt;li&gt;論文を読む&lt;/li&gt;
&lt;li&gt;プログラムを書く&lt;/li&gt;
&lt;li&gt;TeXで資料をまとめる / スライドを作る&lt;/li&gt;
&lt;li&gt;論文を書く&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;勉強
&lt;ul&gt;
&lt;li&gt;最近は非線形現象の勉強を少しやってる&lt;/li&gt;
&lt;li&gt;プログラムを書く&lt;/li&gt;
&lt;li&gt;Markdown形式でまとめる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;デスクトップ (研究室)
&lt;ul&gt;
&lt;li&gt;ノートパソコンと同じ環境を作っているので，研究室ではノートの代わりにデスクトップを使っている&lt;/li&gt;
&lt;li&gt;GitHubのprivateリポジトリで共有してる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Python3の開発環境をDocker containerとして作る</title>
      <link>https://tachibana-ai.netlify.app/post/docker_python/</link>
      <pubDate>Thu, 08 Jul 2021 18:58:51 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/docker_python/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;この記事では，Docker containerとしてPythonの開発環境を作ったときのメモを残す．
この記事の内容は，GitHubのサブのアカウントの&lt;a href=&#34;https://github.com/tcbn-ai/Docker_python_env&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;publicリポジトリ&lt;/a&gt;で公開している．&lt;/p&gt;
&lt;h3 id=&#34;1-必要なもの&#34;&gt;1. 必要なもの&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Docker Engineのインストール&lt;/li&gt;
&lt;li&gt;VSCodeのインストール
&lt;ul&gt;
&lt;li&gt;Remote Developementの導入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-基本構成&#34;&gt;2. 基本構成&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Docker Image
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/python&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;python&lt;/a&gt;の&lt;a href=&#34;https://github.com/docker-library/python/blob/e0e01b8482ea14352c710134329cdd93ece88317/3.8/buster/Dockerfile&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;3.8.10-buster&lt;/a&gt;を使っている．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ディレクトリ構成
&lt;pre&gt;&lt;code&gt;|- test_code/   # コードを置いている
|- .devcontainer/
    |- devcontainer.json
    |- docker-compose.yml
    |- dockerfile
    |- requirements.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;各種ファイル&#34;&gt;各種ファイル&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;devcontainer.json&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;VSCodeのRemoteを使うときの設定
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
// https://github.com/microsoft/vscode-dev-containers/tree/v0.177.0/containers/docker-existing-dockerfile
{
  // 名前は任意
  &amp;quot;name&amp;quot;: &amp;quot;Docker-Python&amp;quot;,
  // dockercomposefileの場所 (同階層に置いている)
  &amp;quot;dockerComposeFile&amp;quot;: &amp;quot;docker-compose.yml&amp;quot;,
  // 使う拡張機能
  &amp;quot;extensions&amp;quot;: [
    &amp;quot;ms-python.python&amp;quot;
  ],
  // ここに記載している&amp;quot;service&amp;quot;名とdocker-compose.ymlに記載している&amp;quot;service&amp;quot;を一致させる
  &amp;quot;service&amp;quot;: &amp;quot;python&amp;quot;,
  // コンテナ内に入ったときのworkdir
  &amp;quot;workspaceFolder&amp;quot;: &amp;quot;/code&amp;quot;,
  // VSCodeを閉じたときのアクション
  &amp;quot;shutdownAction&amp;quot;: &amp;quot;stopCompose&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;複数のコンテナを定義し，実行することができる．&lt;/li&gt;
&lt;li&gt;今回は，1つのコンテナに対する処理を記述
&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;version: &amp;quot;3&amp;quot;    # 3が最新版
services: 
    python: # ここの名前とdevcontainer.jsonの&amp;quot;service&amp;quot;を一致させる
        build: .    # 同階層のdockerfileからビルドする
        command: sleep infinity
        volumes: 
            - ../:/code  # 上階層のディレクトリをDocker Container上のworkdirにマウント
        environment: 
            SHELL: /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dockerfile&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;コンテナを作るための処理
&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;########### Image file ###########
FROM python:3.8.10-buster
##################################

########### update and install packages ###########
# apt-get upgradeに-yを付けないとexit 1になります．追加しました．(5/23)
RUN apt-get update &amp;amp;&amp;amp; \
    apt-get -y upgrade &amp;amp;&amp;amp; \
    apt-get install -y vim git &amp;amp;&amp;amp; \
    rm -rf /var/lib/apt/lists*
###################################################

########### create workspace ###########
RUN mkdir /code
WORKDIR /code
ADD ./requirements.txt /code/
########################################

########### install packages via pip ###########
RUN pip3 install -r requirements.txt
ADD . /code/
################################################
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requirements.txt&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip install&lt;/code&gt;するファイル
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;############ Requirements Packages ############
pylint
numpy
scipy
sympy
matplotlib
statsmodels
sklearn
pandas
networkx
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-使用時&#34;&gt;3. 使用時&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;test_code&lt;/code&gt;と同階層に自分のコードを格納したフォルダを配置して，VSCodeの左下の&amp;quot;Open Remote Window&amp;quot;を選択．&lt;/li&gt;
&lt;li&gt;Reopen in Containerを選択．&lt;/li&gt;
&lt;li&gt;ワークスペースが開いたら，terminalを開き，&lt;code&gt;python *.py&lt;/code&gt;で実行する．&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-いろいろ変えたいとき&#34;&gt;4. いろいろ変えたいとき&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip install&lt;/code&gt;するパッケージを変更したいとき
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;requirements.txt&lt;/code&gt;を書き換える&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pythonのバージョンを3の別バージョンに変えたいとき
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dockerfile&lt;/code&gt;のイメージファイル (2行目の&lt;code&gt;FROM&lt;/code&gt;以下) を書き換える．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pythonのバージョンを2にしたいとき
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/python&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;python&lt;/a&gt;には2系がないので，イメージファイルをUbuntu等にして1からインストールする．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu20.04にDocker Engineをインストールする</title>
      <link>https://tachibana-ai.netlify.app/post/ubuntu_docker/</link>
      <pubDate>Thu, 08 Jul 2021 18:25:39 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/ubuntu_docker/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;私が学部4年から修士1年までに使っていたPythonの開発環境はUbuntu上にpipとpipenvを入れ，pipenvで仮想環境を作って使うというものだった．Ubuntuを20にアップグレードしたときにこれまで使っていた仮想環境でプログラムが動かない，ということが起こった．&lt;/p&gt;
&lt;p&gt;このように，OSに1つの環境を作って動かそうとした際には，更新に伴いプログラムが動かなくなるというリスクがある．さらに，以下のような問題が挙げられる．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OSが汚れる
&lt;ul&gt;
&lt;li&gt;OSに直接インストールするので，複数のバージョンが共存するといったことが起こる．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;問題の切り分けが難しい
&lt;ul&gt;
&lt;li&gt;OSのアップグレードの問題なのか，パッケージの問題なのか分からなくなる．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;そんなときDockerに出会う．Dockerの説明は省略するが，イメージは1つのサーバに独立した複数のサーバを同時に構築することができる，というものである．これは良いと思い，研究の開発環境をDocker container上に作ることにした．&lt;/p&gt;
&lt;p&gt;Ubuntu20.04にDocker Engineをインストールするためのシェルスクリプトを作ったので，この記事で共有する．&lt;/p&gt;
&lt;h3 id=&#34;1-dockerの利点と欠点&#34;&gt;1. Dockerの利点と欠点&lt;/h3&gt;
&lt;p&gt;私が思うDockerの利点と欠点を以下に示す．あまり詳しくないエアプ発言かもしれない．&lt;/p&gt;
&lt;h4 id=&#34;利点&#34;&gt;利点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Dockerfileに開発に必要なパッケージのインストールについて記述できるので，Dockerfileとして記述してしまえば，そのとおりに環境構築ができる．&lt;/li&gt;
&lt;li&gt;移植しやすい．&lt;/li&gt;
&lt;li&gt;Python等のバージョンが変わったときもDockerfileの内容を変えることで最新版にアップデートできる．&lt;/li&gt;
&lt;li&gt;OSのバージョンに依らない．依存関係に関する問題を，パッケージのバージョンにまで絞り込める．&lt;/li&gt;
&lt;li&gt;OSが汚れない．&lt;/li&gt;
&lt;li&gt;1つのPCの中に複数の異なる開発環境を構築できる．&lt;/li&gt;
&lt;li&gt;VSCodeの拡張機能が優秀で，使いやすい．&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;欠点&#34;&gt;欠点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Windowsでエラーが出ることが多い気がする．Windowsで同じようなことをしようと思ってもうまく動かないことがある．&lt;/li&gt;
&lt;li&gt;WindowsではWSL2をバックエンドにしているので，メモリの消費量が多い．まともに動かそうと思うとメモリ16GBはないと厳しい．&lt;/li&gt;
&lt;li&gt;導入コスト．(自分が賢くないだけだけど) 難しい．&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-インストールのためのシェルスクリプト&#34;&gt;2. インストールのためのシェルスクリプト&lt;/h3&gt;
&lt;p&gt;東京大学の金子邦彦先生のウェブサイトがかなり参考になった．Docker Engineの導入以外にもかなり参考にさせていただいた．&lt;/p&gt;
&lt;p&gt;次のようなシェルスクリプトを作り，&lt;code&gt;~/install_docker.sh&lt;/code&gt;として保存した．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

# Written by A.Tachibana, 2021/3/19

# Objective
## To install docker in Ubuntu 20

# Reference
## https://www.kkaneko.jp/tools/docker/ubuntu_docker.html

############ To execute ############
# chmod 755 install_docker.sh
# ./install_docker.sh
####################################


# Require password
printf &amp;quot;password: &amp;quot;
read -s password

# Update and Upgrade
echo &amp;quot;$password&amp;quot; | sudo -S apt update &amp;amp;&amp;amp; sudo -S apt -y upgrade

# Install Docker
## Delete old version (if exists)
sudo -S apt -y remove docker docker-engine docker.io containerd docker-ce docker-ce-cli
sudo -S apt -y autoremove
## Install required software
sudo -S apt update
sudo -S apt -y install apt-transport-https ca-certificates curl software-properties-common
sudo -S apt -y install linux-image-generic
## Set docker repository
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
apt-key fingerprint 0EBFCD88
sudo -S add-apt-repository \
    &amp;quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
    $(lsb_release -sc) \
    stable&amp;quot;
sudo -S apt update
## Install docker.io
sudo -S apt -y install docker.io containerd docker-compose
## Add authority
sudo -S usermod -aG docker $USER
## Set autostart
sudo -S systemctl unmask docker.service
sudo -S systemctl enable docker
sudo -S systemctl is-enabled docker
## let user ubuntu use docker
sudo gpasswd -a $USER docker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このファイルに実行権限を与え，実行する．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod 755 install_docker.sh
./install_docker.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;なお，このシェルスクリプトは，私のサブのGitHubアカウントの&lt;a href=&#34;https://github.com/tcbn-ai/TIL/blob/main/Study_Docker/shellscript/install_docker.sh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;publicリポジトリ&lt;/a&gt;にアップロードしている．&lt;/p&gt;
&lt;h4 id=&#34;参考&#34;&gt;参考&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kkaneko.jp/cc/vm/ubuntu_docker.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker Engine のインストールと使用法（Ubuntu 上）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu20.04にRとRStudioをインストールする</title>
      <link>https://tachibana-ai.netlify.app/post/ubuntu_rstudio/</link>
      <pubDate>Thu, 08 Jul 2021 18:07:46 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/ubuntu_rstudio/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;授業でRとRStudioを使う必要があったのでインストールした．
前処理がめんどくさかったので，シェルスクリプトを書いた．&lt;/p&gt;
&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yukiyanai.github.io/jp/resources/docs/install-R_ubuntu.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RとRStudioのインストールと初期設定 Linux (Ubuntu) 編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-前処理&#34;&gt;1. 前処理&lt;/h3&gt;
&lt;p&gt;次のようなシェルスクリプトを書き，&lt;code&gt;~/install_R_requirement.sh&lt;/code&gt;として保存した．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

# Written by A.Tachibana, 2021/4/28

# Objective
## To install R in Ubuntu 20
## Requirement packages

# Reference
## https://yukiyanai.github.io/jp/resources/docs/install-R_ubuntu.pdf

############ To execute ############
# chmod 755 install_R_requirement.sh
# ./install_R_requirement.sh
####################################

# Require password
printf &amp;quot;password: &amp;quot;
read -s password

# Update and Upgrade
echo &amp;quot;$password&amp;quot; | sudo -S apt update &amp;amp;&amp;amp; sudo -S apt -y upgrade

# 1. Install tools
sudo -S apt -y install gdebi-core wget 

# 2. Get fonts
sudo -S apt -y install fonts-ipaexfont
fc-cache -f -v

# 3. Install requirement tools
## requirement tools
sudo -S apt -y install build-essential libxml2-dev libssl-dev libx11-dev libglu1-mesa-dev libmagick++-dev libudunits2-0 libudunits2-dev libgdal-dev libproj-dev libgmp3-dev curl 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このファイルに実行権限を与え，実行する．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod 755 install_R_requirement.sh
./install_R_requirement.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-rとrstudioのインストール&#34;&gt;2. RとRStudioのインストール&lt;/h3&gt;
&lt;p&gt;次のようなシェルスクリプトを書き，&lt;code&gt;~/install_R.sh&lt;/code&gt;として保存した．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

# Written by A.Tachibana, 2021/4/28

# Objective
## To install R in Ubuntu 20

# Reference
## https://yukiyanai.github.io/jp/resources/docs/install-R_ubuntu.pdf

############ To execute ############
# chmod 755 install_R.sh
# ./install_R.sh
    # execute after install_R_requirement.sh
####################################

# Require password
printf &amp;quot;password: &amp;quot;
read -s password

# 1. add repository
sudo -S apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9
sudo -S add-apt-repository &#39;deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/&#39;
# 2. install R base
sudo -S apt update
sudo -S apt -y install r-base 
# 3. install RStudio
cd ~/Downloads/
# 2021/4/28
wget https://download1.rstudio.org/desktop/bionic/amd64/rstudio-1.4.1106-amd64.deb
sudo -S gdebi rstudio-1.4.1106-amd64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このファイルに実行権限を与え，実行する．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod 755 install_R.sh
./install_R.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;注意点&#34;&gt;注意点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;RStudioに関しては2021/4/28時点で最新のものをダウンロードしたが，現在はもっと新しいものが出ていると思う．
&lt;ul&gt;
&lt;li&gt;「最新版を持ってくる」ような書き方が分からなくて，頭の悪い書き方をしている．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;install_R.sh&lt;/code&gt;は，&lt;code&gt;install_R_requirement.sh&lt;/code&gt;の実行後に実行する．&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu20.04にTeX Liveをインストールする</title>
      <link>https://tachibana-ai.netlify.app/post/ubuntu_tex/</link>
      <pubDate>Thu, 08 Jul 2021 18:00:11 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/ubuntu_tex/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;UbuntuにTeXを入れたときのメモ&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-やること&#34;&gt;1. やること&lt;/h3&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;好きなエディタを入れる&lt;/li&gt;
&lt;li&gt;TeXLiveを入れる&lt;/li&gt;
&lt;li&gt;~/.latexmkrcを作る&lt;/li&gt;
&lt;li&gt;動作テスト&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;好きなエディタを入れる&#34;&gt;好きなエディタを入れる&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;私はTeXの文書を作るときはAtomを使うので，Atomを入れた．
&lt;ul&gt;
&lt;li&gt;公式サイト (&lt;a href=&#34;https://atom.io/&#34;&gt;https://atom.io/&lt;/a&gt;) からdebをダウンロードして実行．
&lt;pre&gt;&lt;code&gt;sudo apt install ./atom-amd64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;パッケージを入れる．
&lt;ul&gt;
&lt;li&gt;latex&lt;/li&gt;
&lt;li&gt;language-latex&lt;/li&gt;
&lt;li&gt;latexer&lt;/li&gt;
&lt;li&gt;pdf-view&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;texliveを入れる&#34;&gt;TeXLiveを入れる&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;日本の大学(e.g. NAIST)のリポジトリからダウンロードして中身を展開する．
&lt;pre&gt;&lt;code&gt;wget http://ftp.naist.jp/pub/CTAN/systems/texlive/tlnet/install-tl-unx.tar.gz
tar -zxvf install-tl-unx.tar.gz
cd install-tl-[date]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;管理者権限で実行する．リポジトリはダウンロードしたところ．
&lt;pre&gt;&lt;code&gt;sudo ./install-tl --repository http://ftp.naist.jp/pub/CTAN/systems/texlive/tlnet/
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;I&amp;quot;でインストール&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;パスを通す．
&lt;pre&gt;&lt;code&gt;sudo /usr/local/texlive/2020/bin/x86_64-linux/tlmgr path add
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;これは私の例である．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TeXLiveのアップデート
&lt;ul&gt;
&lt;li&gt;参照するリポジトリの指定
&lt;pre&gt;&lt;code&gt;sudo tlmgr option repository http://ftp.naist.jp/pub/CTAN/systems/texlive/tlnet/
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;アップデート
&lt;pre&gt;&lt;code&gt;sudo tlmgr update --self --all
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;latexmkrcの作成&#34;&gt;~/.latexmkrcの作成&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;毎回コンパイル(platexしてdvipdfmxして&amp;hellip;)というのは面倒 → latexmkを使うことで，保存する度に自動的にpdfまで生成するようにする．
&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&#34;https://qiita.com/tdrk/items/16f31e45826c57bce412&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;latexmkの薦め&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ubuntuでは以下のファイルをホームディレクトリ直下(~/.latexmkrc)に配置したところ，正常に動作した．&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;#!/usr/bin/perl
$latex = &#39;platex -guess-input-enc -src-specials -interaction=nonstopmode -synctex=1&#39;;
$latex_silent = &#39;platex -interaction=batchmode&#39;;
$dvips = &#39;dvips&#39;;
$bibtex = &#39;pbibtex&#39;;
$makeindex = &#39;mendex -r -c -s jind.ist&#39;;
$dvi_previewer = &#39;start dviout&#39;;
$dvipdf = &#39;dvipdfmx %O -o %D %S&#39;;
$pdf_previewer = &#39;xdg-open&#39;;
$preview_continuous_mode = 1;
$pdf_mode = 3;
$pdf_update_method = 4;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;latexmkについては，
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vim ~/.latexmkrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;などとして，上記のようなものを作ればよい．&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;動作テスト&#34;&gt;動作テスト&lt;/h4&gt;
&lt;h5 id=&#34;platex&#34;&gt;platex&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;test.tex&amp;quot;という名前のファイルをtextestというディレクトリの中に作った．
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\documentclass[dvipdfmx]{jsarticle}
\title{ {\LaTeX} 動作テスト・サンプルファイル}
\date{\today}
\begin{document}
\maketitle
\section{test}
これはテストです．
\begin{equation}
  f(x) = 2x + 3
\end{equation}
\end{document}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;textestというディレクトリに移動して，以下のコマンドを実行する．
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;platex test.tex &amp;amp;&amp;amp; dvipdfmx test.dvi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行後にpdfファイルが問題なく生成されていたら良い．&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;latexmk&#34;&gt;latexmk&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;先程のファイルに対して，
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;latexmk test.tex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;として，正しくpdfファイルが生成され，変更して保存した後にpdfファイルが更新されたら問題なく導入されている．&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>自己紹介</title>
      <link>https://tachibana-ai.netlify.app/post/first-post/</link>
      <pubDate>Thu, 08 Jul 2021 16:14:02 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/first-post/</guid>
      <description>&lt;h3 id=&#34;0-自己紹介-2021年現在&#34;&gt;0. 自己紹介 (2021年現在)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ハンドルネーム
&lt;ul&gt;
&lt;li&gt;たちばな / 橘 あい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;居住地
&lt;ul&gt;
&lt;li&gt;大阪府&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;学歴
&lt;ul&gt;
&lt;li&gt;学士&lt;/li&gt;
&lt;li&gt;現在修士2年&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;研究
&lt;ul&gt;
&lt;li&gt;計算機科学&lt;/li&gt;
&lt;li&gt;非線形力学系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;趣味
&lt;ul&gt;
&lt;li&gt;旅行&lt;/li&gt;
&lt;li&gt;自転車&lt;/li&gt;
&lt;li&gt;技術書を読んで手元で動かすこと&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-記事を始めたきっかけ&#34;&gt;1. 記事を始めたきっかけ&lt;/h3&gt;
&lt;p&gt;もともとGitHubのリポジトリにMarkdown形式で自分が勉強したこと / 知ってることをまとめていた．&lt;/p&gt;
&lt;p&gt;先日，研究室の後輩からHugoというものを使うとMarkdown形式で書いた文書をウェブサイトにできるということを教えてもらったので，ウェブサイトにしようかなと思った．&lt;/p&gt;
&lt;h3 id=&#34;2-今後の予定&#34;&gt;2. 今後の予定&lt;/h3&gt;
&lt;p&gt;博士進学せず，来年4月から就職します．それまでにこれまで書いたMarkdownの資料をこちらに移植したいと思っています．&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

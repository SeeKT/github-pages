[{"authors":null,"categories":null,"content":"修士2年です．興味があることを少しだけ触ってます．飽きっぽいので，どんどん新しいことに手を付けたくなります．\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"ja","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"修士2年です．興味があることを少しだけ触ってます．飽きっぽい","tags":null,"title":"Ai Tachibana","type":"authors"},{"authors":[],"categories":["Optimal control"],"content":"0. はじめに 先日は，5章の内容をまとめた (最適制御問題: 連続時間システムの最適制御)．少し間が空いてしまったが，今回は6章の内容をまとめる．\n1. 6章の概要 6章では，最適制御問題に動的計画法を適用して，HJB方程式という偏微分方程式を導出している．変分法で導かれた常微分方程式の2点境界値問題であるオイラー・ラグランジュ方程式と，動的計画法から導かれた偏微分方程式であるHJB方程式は何らかのつながりがある．動的計画法から最小原理と呼ばれる条件を経由してオイラー・ラグランジュ方程式が導かれる．\n以下に，各節の内容をまとめた手書きのメモを掲載する．\n 6.1節 6.2節 6.3節  2. まとめ ここまで読んで，オイラー・ラグランジュ方程式とHJB方程式の関係が何となく分かってきた．実際の数値計算をどうするか，ということで少し詰まってしまって時間がかかっている．\n","date":1627906348,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1627906348,"objectID":"124d4af2fdc4e8f5f7bb327862e25b0e","permalink":"https://tachibana-ai.netlify.app/post/optimal_control_dp/","publishdate":"2021-08-02T21:12:28+09:00","relpermalink":"/post/optimal_control_dp/","section":"post","summary":"0. はじめに 先日は，5章の内容をまとめた (最適制御問題: 連続時","tags":["Optimal control"],"title":"最適制御問題: 動的計画法と最小原理","type":"post"},{"authors":[],"categories":["blog"],"content":"0. はじめに これまで体験したアルバイトと，経験したことについて書こうと思う．遊ぶためにバイトをしていたので，企業でプログラミングや機械学習の勉強をしながらバイト，というような経験をしてこなかったのは反省点である．\n私は学部入学が2016年4月，学部卒業が2020年3月であり，修士課程入学が2020年4月である．\nアルバイト歴    年 アルバイト先     2016.5 - 2017.3 本屋   2017.4 - 2019.3 飲食店 (24時間営業)   2017.6 - 2018.6 採点バイト   2018.12 - 2019.1 郵便局 (短期バイト)   2020.4 - 現在 TA (不定期)    1. 本屋のバイト 1.1. 始めたきっかけ 学部入学後，本屋でバイトをしていた (これが初バイトだった)．本屋でバイトを始めようと思った理由は主に2つある．\n 本屋のバイトは楽だと思っていた (当時) 普通に読書が好きだった  1つ目の理由は，本屋のバイトが楽そうだったからである．レジ打ち，掃除，予約注文くらいできれば良いのかなと思っていた．2つ目の理由は，高校まで普通に読書が好きで (氷菓という作品の影響)，本屋なら苦痛なくバイトできるのではないか，と考えたからである．\n1.2. バイト体験と印象に残っているエピソード 本屋のバイトでは，レジに入ることよりも，雑誌を回収して並べるというような肉体労働が多かった．イメージしていた本屋のバイトとは違ったような気がした．\nバイトをしていて一番印象に残っているエピソードがあるので，紹介したいと思う．かなり汚いので話だが，ご容赦願いたい．\nバイトを初めて半年ほど経過した頃のこと．閉店作業をしている際，店の外のベンチに男が座っていた．流石にどいてもらわないと片づけられないな，と思い，声をかけようとしたところ，男の前に茶色くて嫌なにおいのするブツが落ちていた．頭に疑問符を浮かべながら近づくと異臭がした．これはやばい\u0026hellip;と思い，男に「もう店終わるので帰ってもらっていいですか？」と言って帰し，社長に報告した．社長に「片づけといて」と言われたので，水で流すなどして片づけた．\nその茶色いブツは明らかに人間のモノではあったが，その男のものだったのかは分からない．監視カメラがついていない角度だったので，状況が分からない．だが，落ちている異臭を放っている誰のモノか分からないブツを片づける，という強烈な体験をしたことは5年ほど経過した今でも忘れられない．\n1.3. 辞めようと思った理由 辞めようと思った理由は主に3つある．\n シフト固定制だった 腰痛 時給が最低賃金だった  学部1年終わり頃から2次元コンテンツを追いかけることにハマってしまった．事前にシフトが固定されており，代わりの人を見つけないといけないということから，毎回イベントに参加しようとするたびにこのようなことを連絡するのはしんどいな，と思った．\n(これは甘えだが，) 腰痛がひどくなってしまったことも理由の1つである．本屋のバイトでは古い週刊誌を箱詰めして新しい週刊誌を並べる，ということをする必要があったが，箱詰めした本を運ぶ際に腰を痛めてしまい，それが長続きしてしまったので，この働き方は無理だと感じ，辞めようかな，と思った．\n最大の理由は，最低賃金だったことである．最低賃金と他のバイト先の時給に100円以上の差があることを知り，何故自分は最低賃金で働いているのだろうと思い，辞めようと思った．\n1.4. その他  良かったこと  ある程度の常識は身に付けられたのではないかと思う   悪かったこと  (自業自得) 本への興味が薄れた   反省点  最低賃金と時給を比較する 業務内容は面接の際に聞いておく    2. 飲食店のバイト 2.1. 始めたきっかけ 上記のバイトを辞めた後すぐにバイトを探し始めた．条件としては，\n シフト固定ではない 時給が最低賃金よりはそこそこ高い  というもので探した．友人が24時間営業の飲食店でバイトをしていたこともあり，私も24時間営業の飲食店でバイトをすることにした．\n2.2. バイト体験と印象に残っているエピソード このアルバイトは比較的長く続いた．朝，昼，夜，深夜など，色々な時間帯に入った．\nアルバイトをしていて印象に残ったエピソードはいくつもあるが，3つほど紹介させていただく．\n バイト先の社員とパートの人の不倫騒動 深夜勤務の人が飛ぶ 社員が来ない  2.2.1. 不倫騒動 一番印象に残っているのは，不倫騒動である．バイト先は主婦の方が多かったので，これはかなり話題になった．\n特定されそうなので詳細は話せないが，一言でまとめると，社員が某店舗のパートの人と不倫してそれがバレてクビになった，というものである．\n自業自得である．\n2.2.2. 深夜勤務の人が飛ぶ 深夜勤務の30代の人が飛ぶ，ということがあった．ディナーの時間帯 (17時 - 22時) に勤務して，21時半頃から引継ぎの準備をしていた．21時50分頃に深夜勤務の人のうち1人来た．もう1人来る予定だったが，来ず，連絡もつかない．これはまずい，と思い，社員の方に来ていただくように連絡をしたが，しばらく来れない，とのことで3時間程 (1時頃まで) 残業した．\n社会にはいろんな人がいる，ということを実感したエピソードの1つである．\n2.2.3. 社員が来ない 土曜の昼は忙しい，というのは飲食店に勤務したことがある方，もしくは飲食店に土曜の昼に入ったことのある方なら納得のいくことであろう．たまたまその日は私以外に主婦の方と社員の方の3人で回すことになっていた．\n忙しくなければいいですね，主婦の方と話していた矢先，社員から「今日他の店舗に行くことになったから来れない」という電話がかかってきた．来れないなら仕方ないが，他の人の手配もしていないと聞き，主婦の方も私も呆れた．その日はかなり忙しかったので，2人で回すのはかなり無理があった．実際かなりお客さんを待たせてしまった．\n私はその日まで5連勤していた，ということもあり，かなり機嫌は悪かった．その社員が入っているグループLINEで長文メッセを送ってしまった (店長に言われたので)．\nちなみにその社員はこのことがあった2週間後くらいに別の地域に飛ばされた．店長も嫌っていたし，仕方ない．次入った社員の方からはかなり謝られた．別に良かったのに．\n大人になっても人の手配すらできないような人がいるのだな，と実感したエピソードの1つである．\n2.3. 辞めた理由 辞めた理由は学部4年の研究室配属である．\n私は学部3年まではバイトして遊んでテスト前だけ勉強して，という底辺大学生であった．研究室配属をきっかけに変わろうと思い，収入源であるバイトを辞め，2次元コンテンツやアニソンシンガーを追いかけるのも控えて，勉強と研究に集中しよう，と思った．\n色々あったが，飲食店のバイトは満足している．店長は厳しかったが，優しく気にかけてくださった．同年代の方もみんな良い人ばかりで話が合う人も多かった．大阪を離れる前に一度立ち寄ろうかな，と思っている．\n2.4. その他  良かったこと  結構長続きした いろんなタイプの人と交流できた かなり金が入った   悪かったこと  社員\u0026hellip; 他の方に苦しめられたこと (仕方ない)    3. 採点バイト 3.1. 始めたきっかけ 学部2年のとき，全休を作ることができたので，1日フルでバイトしようと思った．所属していたサークルの先輩が採点バイトをしているというのを聞き，私もやろうかなと思った．\n3.2. バイト体験と印象に残っているエピソード 初めて2週間ほどでバイトリーダーに呼び出され，「バイトリーダーをやってみないか」と言われた．時給が少し上がるし，交流もできると言われた．私はそのとき飲食店でバイトしているという理由で断った．\n今更ながら，2週間ほどしか勤務をしていないただの学部生にバイトリーダーをやらないか，と招待するのは謎だった．\n3.3. 辞めた理由 化学の採点をしていたが，大学で化学を使っておらず，高校当時程化学ができないことに気付いた．また，単調な作業だったので，金は入ってくるが飽きてしまった．\n3.4. その他  良かったこと  フルタイムの勤務 (9:00 - 18:00) でもそれほど疲れない   悪かったこと  単調すぎて飽きる    4. 郵便局 4.1. 始めたきっかけ 3回生の頃，必要単位を取りきっていたことと，院試で必要なTOEICで良い点数を取れたという理由で遊びまくっていた (反省)．飲食店のバイトもしていたが，別のバイトも少しするか，と思い，郵便局の年賀状仕分けのバイトをすることにした．\n4.2. バイト体験と印象に残っているエピソード 年末年始に飲食店バイトと合わせて14連勤をしたこと．12/30の昼に郵便局でバイト，1時間後に飲食店でバイト (深夜1:30まで)，大晦日の昼に郵便局でバイト，飲食店で夜勤バイトというときが一番きつかった．栄養ドリンクを毎日飲んでいた．もうできないなと思う．\nその月の給料は両方合わせて15万円だった．3月までに全て使い切った．\n4.3. 辞めた理由 短期バイトだからなし．\n4.4. その他  良かったこと  勤務後に飲食店のバイトができる程度には体力的な余裕がある   悪かったこと  特になし    5. TA 5.1. 始めたきっかけ 私の研究テーマと内容がかぶっていたので，指導教員からTAをするように頼まれた．\n5.2. バイト体験と印象に残っているエピソード オンラインでTAなんてできるのか，と思ったが，意外と何とかなっている．\n5.3. その他  良かったこと  小遣い稼ぎになる 時給がそこそこ高い   悪かったこと  今のところはそれほどない    6. まとめ これまでのバイト経験を書いた．意外と長くなった．過去を思い出すと後悔が残るが，この経験で今の自分が構成されていると思うと別に良いかなとも思える．\n","date":1627130664,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1627130664,"objectID":"2c676b581aacdf715414febd015917b3","permalink":"https://tachibana-ai.netlify.app/post/blog_part_time/","publishdate":"2021-07-24T21:44:24+09:00","relpermalink":"/post/blog_part_time/","section":"post","summary":"0. はじめに これまで体験したアルバイトと，経験したことについて","tags":["blog","アルバイト"],"title":"アルバイトの経験談","type":"post"},{"authors":[],"categories":["Optimal control"],"content":"0. はじめに 先日は，4章の内容をまとめた (最適制御問題: 変分法)．今回は，5章の内容をまとめる．\n1. 5章の概要 5章では，連続時間システムに対する最適制御問題を扱っている．最適制御問題の基本的な問題設定，変分法から導出した停留条件 (オイラー・ラグランジュ方程式)，局所最適性の十分条件，最適解の摂動についてまとめられている．このブログではオイラー・ラグランジュ方程式までをまとめる (詳しい導出は省略)．詳しい導出とそれ以降の内容は手書きの資料に載せている．\nここで扱う最適制御問題は連続時間システム\n\\[\\dot{x}(t) = f(x(t), u(t), t) \\tag{5.1}\\]\n(ただし，\\(x(t) \\in \\mathbb{R}^n\\)は状態ベクトル，\\(u(t) \\in \\mathbb{R}^m\\)は制御入力ベクトル) に対して，初期時刻\\(t_0\\)，終端時刻\\(t_f\\)，初期状態\\(x(t_0) = x_0\\)が与えられた下で評価関数\n\\[J = \\varphi(x(t_f)) + \\int_{t_0}^{t_f} L(x(t), u(t), t) dt \\tag{5.2}\\]\nが与えられ，それを最小化するような最適制御\\(u(t)\\)を求める，というような問題である．つまり，ここで考える最適制御問題は，関数\\(x(t)\\)と\\(u(t)\\)の汎関数である評価関数\\(J\\)を，等式制約である状態方程式の下で最小化する変分問題である．\n等式制約\n\\[f(x, u, t) - \\dot{x} = 0\\]\nに対応するラグランジュ乗数のベクトルを\\(\\lambda(t) \\in \\mathbb{R}^n\\)として，制約条件の下での停留条件を求めるための汎関数\\(\\overline{J}\\)を構成すると，\n\\[\\overline{J} = \\varphi(x(t_f)) + \\int_{t_0}^{t_f} \\{L(x, u, t + \\lambda^{\\mathrm{T}} (f - \\dot{x}) \\}dt \\tag{5.3}\\]\nとなる．ここで，スカラー値関数\\(H\\)を\n\\[H(x, u, \\lambda, t) := L(x, u, t) + \\lambda^{\\mathrm{T}} f(x, u, t)\\]\nと定義する．\\(H\\)は最適制御問題のハミルトン関数と呼ばれる．この\\(H\\)を用いると，汎関数\\(\\overline{J}\\)は，以下のように\\(\\dot{x}\\)の項とそれ以外の項に分けて書き直される．\n\\[\\overline{J} = \\varphi(x(t_f)) + \\int_{t_0}^{t_f} \\left(H(x, u, \\lambda, t) - \\lambda^{\\mathrm{T}}\\dot{x}\\right) dt\\]\n上記の問題設定の下で，評価関数 (5.2) を最小にする最適制御 \\(u(t) \\ (t_0 \\leq t \\leq t_f)\\) が存在するとし，対応する最適軌道を\\(x(t)\\)とすると，\\(n\\)次元ベクトル値関数\\(\\lambda(t)\\)が存在して以下のオイラー・ラグランジュ方程式が成り立つ．\n\\[\\dot{x} = f(x, u, t), \\ x(t_0) = x_0 \\tag{5.4}\\]\n\\[\\dot{\\lambda} = - \\left(\\frac{\\partial H}{\\partial x} \\right)^{\\mathrm{T}}(x, u, \\lambda, t), \\ \\lambda(t_f) = \\left( \\frac{\\partial \\varphi}{\\partial x} \\right)(x(t_f)) \\tag{5.5}\\]\n\\[\\frac{\\partial H}{\\partial u}(x, u, \\lambda, t) = 0 \\tag{5.6}\\]\nこれは，\\(x(t)\\)と\\(u(t)\\)の連立微分方程式とみなすことができるが，\\(x(t)\\)は初期状態\\(x(t_0)\\)が与えられているのに対し，\\(\\lambda(t)\\)は終端値\\(\\lambda(t_f)\\)に対する条件が与えられている．このような問題を2点境界値問題という．多くの場合，非線形の微分方程式の解析解は得られないので，初期状態を未知のパラメータとして終端条件が成り立つための条件を書き下すことは困難である．\n以下に，各節の内容をまとめた手書きのメモを掲載する．\n 5.1節 5.2節 5.3節 5.4節  2. まとめ ここまで読んで，最適制御問題は状態と入力の汎関数である評価関数を等式制約である状態方程式の下で最小化する変分問題であり，最適制御と最適軌道，ラグランジュ乗数に対してオイラー・ラグランジュ方程式が成り立つことは分かったが，その後どうするのかまだ分かっていない．連休中にやる気があれば6章と7章を読みたいと思っている．\n","date":1626938087,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1626938087,"objectID":"fee2353d0612d40b5ffdb02a9140a185","permalink":"https://tachibana-ai.netlify.app/post/optimal_control_continuous/","publishdate":"2021-07-22T16:14:47+09:00","relpermalink":"/post/optimal_control_continuous/","section":"post","summary":"0. はじめに 先日は，4章の内容をまとめた (最適制御問題: 変分法","tags":["Optimal control"],"title":"最適制御問題: 連続時間システムの最適制御","type":"post"},{"authors":[],"categories":["Optimal control"],"content":"0. はじめに 研究で最適制御問題を扱うことになったが，これまでまともに勉強してこなかったので，勉強する．研究では連続時間の最適制御問題を扱う予定なので，連続時間の最適制御問題の文献を読んでまとめた手書きのメモを公開することにした．\n次の本を参考にしている．4章から7章まで勉強する予定である．\n 大塚，非線形最適制御問題入門，コロナ社，2011  0.1. 方針 GoodNotesを使ってメモを取りながら，本を読んで数式を追っている．ある程度まとめたらメモを載せることにする．誤字や記述が怪しい箇所，理解が足りていない箇所も多いと思う．\n普段，定理や補題の主張を読み，証明は読み飛ばすか流れだけを見ることが多いので，今回もそうなると思う．\n1. 4章の概要とまとめ 4章では，変分法の基本がまとめられている．最適制御問題は，時間の関数である状態 $x(t)$ と入力 $u(t)$ の 汎関数 である評価関数 $J$ を，等式制約 (状態方程式) の下で最小化する問題であり，これは変分問題である．よって，変分法は最適制御問題の基礎になっている．\n以下に，各節の内容をまとめた手書きのメモを掲載する．\n 4.1節 4.2節 4.3節 4.4節  ","date":1626592738,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1626660958,"objectID":"208b0d9ba516e2003f72d88f68fd184a","permalink":"https://tachibana-ai.netlify.app/post/optimal_control_validation/","publishdate":"2021-07-18T16:18:58+09:00","relpermalink":"/post/optimal_control_validation/","section":"post","summary":"0. はじめに 研究で最適制御問題を扱うことになったが，これまでま","tags":["Optimal control"],"title":"最適制御問題: 変分法","type":"post"},{"authors":[],"categories":["Security"],"content":"0. はじめに ハッキング・ラボのつくりかたという本を読み進めていたところ，最新版のKali linux 2021.2では実行できない部分があったので (4章, 252ページ等)，書籍の環境である Kali linux 2018.2に合わせることにした．インストールにかなり苦戦した．\n後から気付いたが，apt updateとapt upgradeをしてしまうとmetasploitも更新される．苦労してインストールしたが，同一の環境を作ることが目的であれば，実行しない方が良い．私はこの仮想マシンが翌日にグラフィカルモードで起動しなくなったので，消した．\nこのようなことは二度としないと思うが，自分への戒めとして，また，もし今後このような状況があったときに備えて記事に残すが，真似はしない方が良い．可能であれば安定起動版か最新版を入れた方が良いし，わざわざ少し古いバージョンを入れて更新するのは手間である．\n0.1. 概要  インストール  DNSサーバに8.8.8.8を指定する   署名  archive.kali.orgから入手する   依存関係  ruby-http-parser.rbの依存関係  apt-get installする   thinのエラー  /var/lib/dpkg/infoにある該当ファイルを削除して，apt installする   ruby-progressbarのエラー  dpkg -i --force-overwriteする      1. Kali linux 2018.2のインストール ovaがないので，isoファイルをダウンロードする．ここでは，kali-linux-2018.2-amd64.isoを以下からダウンロードした．\n Index of /kali-images  あとはVirtualboxで仮想マシンを入れるのと同様にすれば良いが，nameserverに8.8.8.8を指定することを忘れないようにする (名前解決の問題)．\n2. インストール後の処理 2.1. 署名 1でインストールしたkali linuxでapt updateしようとすると，\u0026ldquo;The following signatures were invalid\u0026quot;のエラーが出る．\n   signatureのエラー  同様のエラーをStackExchangeで探し，同じように解決しようと試みた．\n 参考  Invalid signature for Kali Linux repositories : “The following signatures were invalid: EXPKEYSIG ED444FF07D8D0BF6 Kali Linux Repository”    gpg --keyserver hkp://keys.gnupg.net --recv-key 7D8D0BF6 gpg --fingerprint 7D8D0BF6 gpg -a --export 7D8D0BF6 | apt-key add - apt update  と\nwget -q -O - https://archive.kali.org/archive-key.asc | apt-key add  が紹介されていた．前者でうまくいかなかったので，後者を試した．\n   gpgキーを追加する  2.2. 依存関係 apt updateはできたので，apt upgradeしようとしたところ，ruby-http-parser.rbに依存関係の問題があるらしく，できなかった．\n   依存関係  ruby-http-parser.rbをインストールすれば良いかもしれない．\n 参考  Kali \u0026lsquo;the following packages have unmet dependencies\u0026rsquo;       ruby-http-parser.rbのインストール  apt-get install ruby-http-parser.rb  を実行したところ，上のapt-listchangesが出力された．末尾まで見てqで進めた．途中に質問されたが，そのまま答えた．\n   質問     cron  最後まで進めたところ，エラーが出た．\n   thinのエラー  とりあえず，apt-get cleanとapt-get -f installをしてみることにしたが，同じエラーが残っている．\n   同様のエラー  同様のエラーを解決している記事を発見したので，以下の記事のようにしてエラーを解消する．\n 参考  【LIVA】【Ubuntu server14.04】apt-getでエラー発生（post-installationスクリプトエラー） apt-getのpost-installationスクリプトエラー    dpkg --audit dpkg --configure thin     dpkgコマンド  参考サイトによると，/var/lib/dpkg/info以下の関連するファイルを削除すれば良いらしい．\ncd /var/lib/dpkg/info rm -rf thin.postinst thin.postrm thin.prerm     ファイルの削除  この後に\ndpkg --configure thin  をすれば良いらしいが，何故かうまくいかなかった．\n   thinのsetup  仕方ないので，thinをインストールすることにした．\napt install thin     thinのインストール  エラーが出なかったので，確認する．\ndpkg -s thin     status  Status install ok installedになっているので，良さそう．\n 参考  apt-getによる依存関係の解決方法    apt updateとapt upgradeを試す．\n途中で\u0026quot;Configuring macchanger\u0026quot;と\u0026quot;sslh configuration\u0026quot;について聞かれたが，それぞれ\u0026quot;Yes\u0026quot;と\u0026quot;from inetd\u0026quot;にした．\nまた，\u0026ldquo;Configuring base-passwd\u0026quot;というのも聞かれた．今変更しなくても後から変更できるらしいので，\u0026ldquo;No\u0026quot;を選択した．\n   エラー  またエラーが出たので，原因を探す．とりあえず，apt-get cleanとかを実行する．\n   apt-get cleanを実行  \u0026ldquo;ruby-cms-scanner: \u0026ldquo;の行から，依存関係の問題があることが分かった．\napt install ruby-progressbar  でインストールしようとしたが，先ほどと同様のエラーが出た．\n   上と同様のエラー  以下のサイトと類似しているエラーだったので，関連debを上書きインストールする方法を試してみた．\ndpkg -i --force-overwrite /var/cache/apt/archives/ruby-progressbar_1.10.1-1_all.deb apt --fix-broken install   参考  apt \u0026ndash;fix-broken installしろと言われた場合の対応    \u0026ldquo;Configuring postgresql-common\u0026quot;について聞かれたので，\u0026ldquo;Ok\u0026quot;とした．\n   apt \u0026ndash;fix-broken後  いけたように見える．一応apt updateとapt upgradeを確認する．\n   not-upgraded  \u0026ldquo;not-upgraded\u0026quot;となっているが，一応エラーは消えているようなので，この処理は終了．\n2.3. ネットワーク設定 書籍第2章に合わせる．\n アダプター1  ホストオンリーアダプター   アダプター2  NAT    Kali linux 2021.2に10.0.0.2を割り振っているので，Kali linux 2018.2には10.0.0.3を割り振る．\n   2.4. ユーザの追加 \u0026ldquo;ai\u0026quot;というユーザを追加する．\nuseradd -m ai passwd ai usermod -a -G sudo ai chsh -s /bin/bash ai     ユーザを追加  2.5. ssh環境 (1) SSHホスト鍵の再生成 cd /etc/ssh mkdir default_keys mv ssh_host_* default_keys/ dpkg-reconfigure openssh-server  (2) sshdの起動 service ssh start update-rc.d ssh enable apt install sysv-rc-conf -y  (3) ログインできるか確認 ローカルから\nssh ai@localhost     ローカルからssh接続  Windows側から\nssh ai@10.0.0.3     Windowsからssh接続  どちらも接続できている．\n(4) rootログインの許可 /etc/ssh/sshd_configを編集して\nPermitRootLogin yes  にする．\n   rootログイン  (5) 公開鍵認証 Windows側で公開鍵があるディレクトリで，\nscp .\\id_rsa.pub root@10.0.0.3:/root/  とする．\nkali linux側で，\ncat id_rsa.pub \u0026gt;\u0026gt; ./.ssh/authorized_keys chmod -R 700 ./.ssh/ chmod -R 600 ./.ssh/authorized_keys  を実行．\n/etc/ssh/sshd_configのPubkeyAuthenticationとAuthorizedKeysFileのコメントを外す．\nWindows側の.ssh/configに以下を追加．\nHost kali_2018 HostName 10.0.0.3 User root IdentityFile [authorized_keysに対応する秘密鍵のパス]  ssh kali_2018  でログインできることを確認する．\n3. まとめ kali linux 2018.2を導入し，初期設定をした．2018を入れたつもりだが，アップグレードされていた．結局消したが，苦労したので戒めとして残した．真似はしない方が良い．\n","date":1626180452,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1626180452,"objectID":"cf24a2704d14de2076556b90981303d8","permalink":"https://tachibana-ai.netlify.app/post/kali-linux-log/","publishdate":"2021-07-13T21:47:32+09:00","relpermalink":"/post/kali-linux-log/","section":"post","summary":"0. はじめに ハッキング・ラボのつくりかたという本を読み進めてい","tags":["Hacking-lab","Security","Kali-linux"],"title":"古いバージョンのKali linuxをインストールしようとした","type":"post"},{"authors":[],"categories":["Security"],"content":"0. はじめに 最近，ハッキング・ラボのつくりかたという本を読んでいる．ツイートされていた方もいらっしゃったが，書籍第4章のWindowsに紹介されているmeterpreterのプロンプトでrun hashdumpやrun scraperが実行できない．\n 該当ツイート     runのエラー  Meterpreterがスクリプトの実行をサポートしなくなったことが原因の1つだと考えたので，何とか書籍のコードを実行できないか試してみたいと思った．\n 該当ツイートへのリプライ GitHubのmetasploit-framework-webexec  今回は，書籍の環境に合わせることで実行した．もっと良い方法があるはずだが，知識のない私にはこれが限界だった．\n1. 環境について 1.1. これまで用いていた環境 私がこれまで使っていた環境を記載する．Virtualbox上で仮想マシンを動かしている．\n ホストOS  Windows11  IP address (ホストオンリーネットワーク): 10.0.0.1     ゲストOS  Kali Linux 2021.2  LANアダプター1 (ホストオンリーネットワーク): 10.0.0.2 LANアダプター2 (NAT): DHCP metasploit v6.0.52-dev   Windows7 (ターゲット端末)  LANアダプター1 (ホストオンリーネットワーク): DHCP      1.2. 書籍の環境と今回比較のために用いる環境 書籍では，Kali Linux 2018.2を用いている．\n 書籍の環境  Kali Linux 2018.2  LANアダプター1 (ホストオンリーネットワーク): 10.0.0.2 LANアダプター2 (NAT): DHCP metasploit v4.16.65-dev (書籍pp.240より)      今回は，1.1で作った環境を壊したくなかったので，Virtualbox上に新しく特定のバージョンのKali linuxをisoファイルからインストールして，それを用いる．\n 今回作った環境  Kali Linux 2018.2  LANアダプター1 (ホストオンリーネットワーク): 10.0.0.3 metasploit v4.16.48-dev      ここで，Kali Linux 2018.2に関しては，インターネットに接続せず，Windows7との通信のためだけに用いることにする．\n apt updateやapt upgradeを行うとmetasploitのバージョンが更新される可能性がある． apt updateやapt upgradeをしようとしたときにエラーが出た．何とか改善したが，metasploitのバージョンまで更新された(1敗)．  古いバージョンのKali linuxをインストールしようとした    また，旧バージョンのisoファイルは，以下からダウンロードした．\n Index of /kali-images  2. Kali Linux 2018.2での実行 2.1. 環境構築 isoファイルを使って仮想マシンを構築する．途中のDNSサーバを指定するところで，8.8.8.8を指定するのを忘れない．\n 参考  Kali Linux on Linux Deploy - resolv.confの編集    うまくいくと，以下のようなデスクトップとして起動できる．\n   デスクトップの起動  IPアドレスの編集を行う．Virtualbox側でホストオンリーネットワークを指定し，Kali linux側の/etc/network/interfacesに以下を追加．\nallow-hotplug eth0 iface eth0 inet static address 10.0.0.3 netmask 255.255.255.0  設定後再起動し，うまく割り振られているか，ホストOSにpingが飛ぶか確認した．\n   pingの確認  2.2. metasploitの起動と確認 次に，msfconsoleでmetasploitを起動し，バージョンを確認する．\n   metasploitのバージョンの確認  v4.16.48-devであることが分かり，書籍よりも前のバージョンであることが分かる．\n書籍の処理を実行してみる．まず，ペイロードを作成し，実行した．\n   ペイロードの実行  次に，SYSTEM権限を奪取して，run hashdumpを実行した．\n   hashdumpの実行  注意は出たが，止まらずに実行できているようである．期待できそうだったので，run scraperもやってみる．\n   run scraperの実行  実行できた．run persistenceも実行できた．\n3. まとめ 書籍の環境に合わせたら一応実行はできた．もっと良い方法があるとは思うが，演習だと思えば\u0026hellip;\n","date":1626179072,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1626179072,"objectID":"5ebb7a361430cd8f0e4ccbcec540ce0d","permalink":"https://tachibana-ai.netlify.app/post/hacking-lab_1/","publishdate":"2021-07-13T21:24:32+09:00","relpermalink":"/post/hacking-lab_1/","section":"post","summary":"0. はじめに 最近，ハッキング・ラボのつくりかたという本を読んで","tags":["Hacking-lab","Security","Kali-linux"],"title":"書籍を読みながらMetasploitを使ってみて詰まったところ","type":"post"},{"authors":[],"categories":["Ubuntu"],"content":"0. はじめに 以前ファイルサーバを構築したので，そのときのログを残す．\n色々と怪しい部分もあるかもしれないので，一個人の記録として見ていただければ幸いである．\n以下，LinuxサーバをUbuntu18.04とし，クライアント側はWindows10もしくはUbuntu20.04とする．Windows10の場合はGit Bashが導入済みであるものとする．\n SSH接続の設定 Sambaの設定 バックアップの設定 CUI運用にする  という流れで実行した．\n1 SSH接続 サーバにリモートで接続して手元で扱うときには，SSH (Secure Shell) 接続を用いることが多い．SSHは，セキュアな通信でリモートアクセスするためのプロトコルであり，強固な認証と暗号化の機能がある (詳しい説明は省略)．ここでは，LinuxサーバのSSH設定の手順について述べる．認証方式は公開鍵認証とする．\n以下，サーバ側のシェルに(server)とし，接続するクライアント側のシェルに(client)と書くものとする．\n(1) sshdのインストールと自動起動の設定 (サーバ側) ホスト側でsshをインストールして，自動起動の設定を行う．\n(server) sudo apt update \u0026amp;\u0026amp; sudo apt -y upgrade (server) sudo apt -y install ssh (server) sudo systemctl start ssh.service (server) sudo systemctl enable ssh.service  この後サーバを再起動し，以下のコマンドを実行．\n(server) sudo systemctl is-enabled ssh.service (server) sudo systemctl status ssh.service  上のコマンドを実行し，enabledと出力されれば，ブート時に起動する．下のコマンドを実行し，Active: active (running)と出力されれば現在sshdが起動している．\nこの時点でサーバ側にパスワード認証で入ることができる．\n(client) ssh [user]@[IP address of the server]  (userはサーバのユーザ名)とすると，特に設定が間違えていなければ接続できる．\n今回の目的は公開鍵認証で入ることなので，以下の手順を\n(2) キーペアを作る (クライアント側) クライアント側でキーペアを作る．キーペアの作り方については以下の記事を参考にした．\nGit Bash (Ubuntuはterminal)で，以下のコマンドを実行する．\n(client) ssh-keygen -t rsa -b 4096 -C \u0026quot;comment\u0026quot;  上記のコマンドを実行すると，鍵のパスを変えるか，パスフレーズは必要か聞かれる．鍵はデフォルトでは\u0026lt;user\u0026gt;/.ssh直下にid_rsaとid_rsa.pubとして保存されるが，複数の鍵を作る場合は新しいディレクトリを.ssh以下に作るなどすれば良いと思う．\ncommentは任意だが，複数人が管理するファイルサーバという機能を持たせると考えると，自分の名字にするのが良いように思う．\n参考  お前らのSSH Keysの作り方は間違っている  (3) クライアント側からホスト側に公開鍵を送信する (1)でSSH接続ができているとすると，クライアント側でscpコマンドを実行すると，サーバ側のuserのホームディレクトリ直下に公開鍵を転送できる．\n(client) scp [client rsa pub key path] [user]@[IP address of the server]:/home/[user]  ここで，scpはSSHを使ってリモートホストとローカルホストの通信を暗号化した上で，ファイルの送信をするコマンドであり，scp [from] [to]のように書けば，fromのパスで指定したファイルがtoのパスの下に送られる．\n[client rsa pub key path]は，キーペアを作るときに変えていなければ，(Windowsの場合は)\nC:\\Users\\[user]\\.ssh\\id_rsa.pub  である．\n(4) authorized_keysファイルを作る 次に，サーバ側で鍵の設定をする．(3)で，ホームディレクトリ直下に公開鍵が送られたとする．このファイルの内容をauthorized_keysファイルにコピーする．その後，chmodコマンドで所有者のみが読めるようにする．\n(server) cat id_rsa.pub \u0026gt;\u0026gt; ./.ssh/authorized_keys (server) chmod 700 ./.ssh (server) chmod 600 ./.ssh/authorized_keys (server) rm -rf id_rsa.pub  (5) sshd_configの設定 (サーバ側) 公開鍵認証を有効化するために，sshdの設定ファイルを編集する．一旦バックアップをとる．\n(server) cd /etc/ssh (server) sudo cp sshd_config sshd_config.bk (server) sudo vim sshd_config  以下の行のコメントを外し，有効化する．\n#PubkeyAuthentication yes #AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2  一応Rootでのログインはできないようにしておく．\nPermitRootLogin no  参考  SSHの鍵認証設定  (6) .sshのconfigファイルの設定 (クライアント側) (5)までで公開鍵認証でSSH接続できるようになった．\nssh -i [client rsa private key path] [user]@[IP address of the server]  接続のたびにこのコマンドを打つのはめんどくさいので，エイリアス設定をする．.ssh/configファイルに以下を追加 (Windowsの場合．秘密鍵が.ssh直下にあるとする)．\nHost [server name] HostName xxx.xxx.xxx.xxx # IP address of the server User [user] # user name of the server Identityfile C:\\Users\\[user]\\.ssh\\id_rsa  このようにすると，\nssh [servername]  でサーバに接続できる．\n2 Sambaの設定 Sambaとは，Linux上でWindowsのネットワーク機能を実現するソフトウェアである．これを使うことで，ファイルサーバの機能が実現される．\n以下，ホームディレクトリ直下のShare_dirを共有するものとする．ここでは，同一のネットワークのホストに対してフルパーミッションで権限を与える場合を想定する．\n参考  【Linux】Ubuntuでファイルサーバーを作って遊ぼう！(中級者～上級者向け)【世界一わかりやすい解説(かもしれない)】  このYouTubeの動画を参考にした．    (1) Sambaのインストール (server) sudo apt install -y samba  (2) samba.confのバックアップと編集 (server) cd /etc/samba/ (server) sudo cp smb.conf smb.conf.bk (server) sudo vim smb.conf  末尾に以下を追加．\n# fileserver [fileserver] comment = Ubuntu FileServer path = /home/[user]/Share_dir/ browseable = yes read only = no guest ok = yes guest only = yes create mode = 0777 directory mode = 0777  (3) 再起動と自動起動の設定 (server) sudo systemctl restart smbd nmbd (server) sudo systemctl enable smbd nmbd  3. バックアップ 共有したディレクトリをHDDなどにバックアップすることを考える．これは，突然PCが落ちてデータが飛ぶようなリスクへの対策となる．\nここではHDDがマウントポイント/mnt/Elementsにマウントされているとし，システム起動時にマウントするように設定したとする．\n(1) バックアップ用のディレクトリの作成 Server_backupディレクトリにバックアップを取るものとする．\n(server) mkdir /mnt/Elements/Server_backup  (2) バックアップの設定 ここでは，差分バックアップを取るものとする．このときに使うコマンドはrsyncである．\n(server) sudo rsync -av /home/[user]/Share_dir/ /mnt/Elements/Server_backup  これは，Share_dirの中身を/mnt/Elements/Server_backupにバックアップするというようなものである．ここで，引数-avは，今どこをコピーしているのかを表示出力するためのものである．\n(3) バックアップのスケジューラの設定 毎日バックアップを更新するために，スケジューラを用いる．crontabを編集すれば良い．\n(server) sudo vim /etc/crontab  以下を追加した．\n# m h dom mon dow user\tcommand 00 3\t* * *\troot rsync -av /home/[user]/Share_dir/ /mnt/Elements/Server_backup  4. CUI運用にする ファイルサーバとしての運用であれば，CUI運用の方が良い．\n# 一時的にCUIモードにする (server) sudo systemctl isolate multi-user.target # デフォルトをCUIモードにする (server) sudo systemctl set-default multi-user.target  GUIに戻したいときは以下のコマンドを実行．\n# 一時的にGUIモードにする (server) sudo systemctl isolate graphical.target # デフォルトをGUIモードにする (server) sudo systemctl set-default graphical.target  5. まとめ ファイルサーバを作った際のログを残した．\n","date":1625823586,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1625823586,"objectID":"ca04bb706e701eccfe4dc16f78019f27","permalink":"https://tachibana-ai.netlify.app/post/create_server/","publishdate":"2021-07-09T18:39:46+09:00","relpermalink":"/post/create_server/","section":"post","summary":"0. はじめに 以前ファイルサーバを構築したので，そのときのログを","tags":["Ubuntu","Server"],"title":"ファイルサーバを構築したときのログ (Ubuntu18.04)","type":"post"},{"authors":[],"categories":["PC"],"content":"0. はじめに この記事では，私が普段使っているPC周りの環境を書く．就職したらもっと良いのがほしい．\n1. 自宅の環境とノートPC  デスクトップ  Lenovo V530  色々手を加えた   OS: Windows11 SSD: 512GB  もともと256GB．換装した．   RAM: 16GB CPU: Core i5-9500 GPU (増設): GTX-1050Ti  PH-GTX1050TI-4G     ノート  iiyama 14インチ (BTO) OS: Ubuntu20.04 SSD: 256GB HDD: 1TB RAM: 16GB CPU: Core i5-8265   モニター  ASUS 23インチ    2. 研究室の環境  デスクトップ  自作 OS: Ubuntu20.04 SSD: 480GB RAM: 16GB CPU: Core i5-8400   モニター  iiyama 23インチ ASUS 27インチ    3. 用途  デスクトップ (家)  ゲーム  ドラクエ11S楽しい！   Virtualboxを使ったセキュリティの勉強  最近ハッキング・ラボのつくりかたという本を読んでる   Hugoを使ってこのサイトの記事の編集 学会発表の練習のためにOBSを使って録音   ノートパソコン  研究  デスクトップからモニターを外してデュアルモニターにして作業してる 論文を読む プログラムを書く TeXで資料をまとめる / スライドを作る 論文を書く   勉強  最近は非線形現象の勉強を少しやってる プログラムを書く Markdown形式でまとめる     デスクトップ (研究室)  ノートパソコンと同じ環境を作っているので，研究室ではノートの代わりにデスクトップを使っている GitHubのprivateリポジトリで共有してる    ","date":1625739353,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1625739353,"objectID":"59b96572dd4af2f16ba8d10bcd4f9258","permalink":"https://tachibana-ai.netlify.app/post/myenv/","publishdate":"2021-07-08T19:15:53+09:00","relpermalink":"/post/myenv/","section":"post","summary":"0. はじめに この記事では，私が普段使っているPC周りの環境を書","tags":["PC"],"title":"普段使っているPC周りの環境","type":"post"},{"authors":[],"categories":["Docker"],"content":"0. はじめに この記事では，Docker containerとしてPythonの開発環境を作ったときのメモを残す． この記事の内容は，GitHubのサブのアカウントのpublicリポジトリで公開している．\n1. 必要なもの  Docker Engineのインストール VSCodeのインストール  Remote Developementの導入    2. 基本構成  Docker Image  pythonの3.8.10-busterを使っている．   ディレクトリ構成 |- test_code/ # コードを置いている |- .devcontainer/ |- devcontainer.json |- docker-compose.yml |- dockerfile |- requirements.txt    各種ファイル  devcontainer.json  VSCodeのRemoteを使うときの設定 // For format details, see https://aka.ms/devcontainer.json. For config options, see the README at: // https://github.com/microsoft/vscode-dev-containers/tree/v0.177.0/containers/docker-existing-dockerfile { // 名前は任意 \u0026quot;name\u0026quot;: \u0026quot;Docker-Python\u0026quot;, // dockercomposefileの場所 (同階層に置いている) \u0026quot;dockerComposeFile\u0026quot;: \u0026quot;docker-compose.yml\u0026quot;, // 使う拡張機能 \u0026quot;extensions\u0026quot;: [ \u0026quot;ms-python.python\u0026quot; ], // ここに記載している\u0026quot;service\u0026quot;名とdocker-compose.ymlに記載している\u0026quot;service\u0026quot;を一致させる \u0026quot;service\u0026quot;: \u0026quot;python\u0026quot;, // コンテナ内に入ったときのworkdir \u0026quot;workspaceFolder\u0026quot;: \u0026quot;/code\u0026quot;, // VSCodeを閉じたときのアクション \u0026quot;shutdownAction\u0026quot;: \u0026quot;stopCompose\u0026quot; }     docker-compose.yml  複数のコンテナを定義し，実行することができる． 今回は，1つのコンテナに対する処理を記述 version: \u0026quot;3\u0026quot; # 3が最新版 services: python: # ここの名前とdevcontainer.jsonの\u0026quot;service\u0026quot;を一致させる build: . # 同階層のdockerfileからビルドする command: sleep infinity volumes: - ../:/code # 上階層のディレクトリをDocker Container上のworkdirにマウント environment: SHELL: /bin/bash     dockerfile  コンテナを作るための処理 ########### Image file ########### FROM python:3.8.10-buster ################################## ########### update and install packages ########### # apt-get upgradeに-yを付けないとexit 1になります．追加しました．(5/23) RUN apt-get update \u0026amp;\u0026amp; \\ apt-get -y upgrade \u0026amp;\u0026amp; \\ apt-get install -y vim git \u0026amp;\u0026amp; \\ rm -rf /var/lib/apt/lists* ################################################### ########### create workspace ########### RUN mkdir /code WORKDIR /code ADD ./requirements.txt /code/ ######################################## ########### install packages via pip ########### RUN pip3 install -r requirements.txt ADD . /code/ ################################################     requirements.txt  pip installするファイル ############ Requirements Packages ############ pylint numpy scipy sympy matplotlib statsmodels sklearn pandas networkx      3. 使用時  test_codeと同階層に自分のコードを格納したフォルダを配置して，VSCodeの左下の\u0026quot;Open Remote Window\u0026quot;を選択． Reopen in Containerを選択． ワークスペースが開いたら，terminalを開き，python *.pyで実行する．  4. いろいろ変えたいとき  pip installするパッケージを変更したいとき  requirements.txtを書き換える   Pythonのバージョンを3の別バージョンに変えたいとき  dockerfileのイメージファイル (2行目のFROM以下) を書き換える．   Pythonのバージョンを2にしたいとき  pythonには2系がないので，イメージファイルをUbuntu等にして1からインストールする．    ","date":1625738331,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1625738331,"objectID":"7471e873b14f0c8e0af18a6a496e2caf","permalink":"https://tachibana-ai.netlify.app/post/docker_python/","publishdate":"2021-07-08T18:58:51+09:00","relpermalink":"/post/docker_python/","section":"post","summary":"0. はじめに この記事では，Docker containerとして","tags":["Python","Docker"],"title":"Python3の開発環境をDocker containerとして作る","type":"post"},{"authors":[],"categories":["Ubuntu"],"content":"0. はじめに 私が学部4年から修士1年までに使っていたPythonの開発環境はUbuntu上にpipとpipenvを入れ，pipenvで仮想環境を作って使うというものだった．Ubuntuを20にアップグレードしたときにこれまで使っていた仮想環境でプログラムが動かない，ということが起こった．\nこのように，OSに1つの環境を作って動かそうとした際には，更新に伴いプログラムが動かなくなるというリスクがある．さらに，以下のような問題が挙げられる．\n OSが汚れる  OSに直接インストールするので，複数のバージョンが共存するといったことが起こる．   問題の切り分けが難しい  OSのアップグレードの問題なのか，パッケージの問題なのか分からなくなる．    そんなときDockerに出会う．Dockerの説明は省略するが，イメージは1つのサーバに独立した複数のサーバを同時に構築することができる，というものである．これは良いと思い，研究の開発環境をDocker container上に作ることにした．\nUbuntu20.04にDocker Engineをインストールするためのシェルスクリプトを作ったので，この記事で共有する．\n1. Dockerの利点と欠点 私が思うDockerの利点と欠点を以下に示す．あまり詳しくないエアプ発言かもしれない．\n利点  Dockerfileに開発に必要なパッケージのインストールについて記述できるので，Dockerfileとして記述してしまえば，そのとおりに環境構築ができる． 移植しやすい． Python等のバージョンが変わったときもDockerfileの内容を変えることで最新版にアップデートできる． OSのバージョンに依らない．依存関係に関する問題を，パッケージのバージョンにまで絞り込める． OSが汚れない． 1つのPCの中に複数の異なる開発環境を構築できる． VSCodeの拡張機能が優秀で，使いやすい．  欠点  Windowsでエラーが出ることが多い気がする．Windowsで同じようなことをしようと思ってもうまく動かないことがある． WindowsではWSL2をバックエンドにしているので，メモリの消費量が多い．まともに動かそうと思うとメモリ16GBはないと厳しい． 導入コスト．(自分が賢くないだけだけど) 難しい．  2. インストールのためのシェルスクリプト 東京大学の金子邦彦先生のウェブサイトがかなり参考になった．Docker Engineの導入以外にもかなり参考にさせていただいた．\n次のようなシェルスクリプトを作り，~/install_docker.shとして保存した．\n#!/bin/bash # Written by A.Tachibana, 2021/3/19 # Objective ## To install docker in Ubuntu 20 # Reference ## https://www.kkaneko.jp/tools/docker/ubuntu_docker.html ############ To execute ############ # chmod 755 install_docker.sh # ./install_docker.sh #################################### # Require password printf \u0026quot;password: \u0026quot; read -s password # Update and Upgrade echo \u0026quot;$password\u0026quot; | sudo -S apt update \u0026amp;\u0026amp; sudo -S apt -y upgrade # Install Docker ## Delete old version (if exists) sudo -S apt -y remove docker docker-engine docker.io containerd docker-ce docker-ce-cli sudo -S apt -y autoremove ## Install required software sudo -S apt update sudo -S apt -y install apt-transport-https ca-certificates curl software-properties-common sudo -S apt -y install linux-image-generic ## Set docker repository curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - apt-key fingerprint 0EBFCD88 sudo -S add-apt-repository \\ \u0026quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -sc) \\ stable\u0026quot; sudo -S apt update ## Install docker.io sudo -S apt -y install docker.io containerd docker-compose ## Add authority sudo -S usermod -aG docker $USER ## Set autostart sudo -S systemctl unmask docker.service sudo -S systemctl enable docker sudo -S systemctl is-enabled docker ## let user ubuntu use docker sudo gpasswd -a $USER docker  このファイルに実行権限を与え，実行する．\nchmod 755 install_docker.sh ./install_docker.sh  なお，このシェルスクリプトは，私のサブのGitHubアカウントのpublicリポジトリにアップロードしている．\n参考  Docker Engine のインストールと使用法（Ubuntu 上）  ","date":1625736339,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1625736339,"objectID":"2d5b8af647c7799f914162293fa262cc","permalink":"https://tachibana-ai.netlify.app/post/ubuntu_docker/","publishdate":"2021-07-08T18:25:39+09:00","relpermalink":"/post/ubuntu_docker/","section":"post","summary":"0. はじめに 私が学部4年から修士1年までに使っていたPytho","tags":["Docker","Ubuntu"],"title":"Ubuntu20.04にDocker Engineをインストールする","type":"post"},{"authors":[],"categories":["Ubuntu"],"content":"0. はじめに 授業でRとRStudioを使う必要があったのでインストールした． 前処理がめんどくさかったので，シェルスクリプトを書いた．\n参考  RとRStudioのインストールと初期設定 Linux (Ubuntu) 編  1. 前処理 次のようなシェルスクリプトを書き，~/install_R_requirement.shとして保存した．\n#!/bin/bash # Written by A.Tachibana, 2021/4/28 # Objective ## To install R in Ubuntu 20 ## Requirement packages # Reference ## https://yukiyanai.github.io/jp/resources/docs/install-R_ubuntu.pdf ############ To execute ############ # chmod 755 install_R_requirement.sh # ./install_R_requirement.sh #################################### # Require password printf \u0026quot;password: \u0026quot; read -s password # Update and Upgrade echo \u0026quot;$password\u0026quot; | sudo -S apt update \u0026amp;\u0026amp; sudo -S apt -y upgrade # 1. Install tools sudo -S apt -y install gdebi-core wget # 2. Get fonts sudo -S apt -y install fonts-ipaexfont fc-cache -f -v # 3. Install requirement tools ## requirement tools sudo -S apt -y install build-essential libxml2-dev libssl-dev libx11-dev libglu1-mesa-dev libmagick++-dev libudunits2-0 libudunits2-dev libgdal-dev libproj-dev libgmp3-dev curl  このファイルに実行権限を与え，実行する．\nchmod 755 install_R_requirement.sh ./install_R_requirement.sh  2. RとRStudioのインストール 次のようなシェルスクリプトを書き，~/install_R.shとして保存した．\n#!/bin/bash # Written by A.Tachibana, 2021/4/28 # Objective ## To install R in Ubuntu 20 # Reference ## https://yukiyanai.github.io/jp/resources/docs/install-R_ubuntu.pdf ############ To execute ############ # chmod 755 install_R.sh # ./install_R.sh # execute after install_R_requirement.sh #################################### # Require password printf \u0026quot;password: \u0026quot; read -s password # 1. add repository sudo -S apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 sudo -S add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/' # 2. install R base sudo -S apt update sudo -S apt -y install r-base # 3. install RStudio cd ~/Downloads/ # 2021/4/28 wget https://download1.rstudio.org/desktop/bionic/amd64/rstudio-1.4.1106-amd64.deb sudo -S gdebi rstudio-1.4.1106-amd64.deb  このファイルに実行権限を与え，実行する．\nchmod 755 install_R.sh ./install_R.sh  注意点  RStudioに関しては2021/4/28時点で最新のものをダウンロードしたが，現在はもっと新しいものが出ていると思う．  「最新版を持ってくる」ような書き方が分からなくて，頭の悪い書き方をしている．   install_R.shは，install_R_requirement.shの実行後に実行する．  ","date":1625735266,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1625735266,"objectID":"529205779250c5d569ccc2521875a22a","permalink":"https://tachibana-ai.netlify.app/post/ubuntu_rstudio/","publishdate":"2021-07-08T18:07:46+09:00","relpermalink":"/post/ubuntu_rstudio/","section":"post","summary":"0. はじめに 授業でRとRStudioを使う必要があったのでイン","tags":["R","Ubuntu"],"title":"Ubuntu20.04にRとRStudioをインストールする","type":"post"},{"authors":[],"categories":["Ubuntu"],"content":"0. はじめに  UbuntuにTeXを入れたときのメモ  1. やること 好きなエディタを入れる TeXLiveを入れる ~/.latexmkrcを作る 動作テスト  好きなエディタを入れる  私はTeXの文書を作るときはAtomを使うので，Atomを入れた．  公式サイト (https://atom.io/) からdebをダウンロードして実行． sudo apt install ./atom-amd64.deb   パッケージを入れる．  latex language-latex latexer pdf-view      TeXLiveを入れる  日本の大学(e.g. NAIST)のリポジトリからダウンロードして中身を展開する． wget http://ftp.naist.jp/pub/CTAN/systems/texlive/tlnet/install-tl-unx.tar.gz tar -zxvf install-tl-unx.tar.gz cd install-tl-[date]   管理者権限で実行する．リポジトリはダウンロードしたところ． sudo ./install-tl --repository http://ftp.naist.jp/pub/CTAN/systems/texlive/tlnet/   \u0026ldquo;I\u0026quot;でインストール   パスを通す． sudo /usr/local/texlive/2020/bin/x86_64-linux/tlmgr path add   これは私の例である．   TeXLiveのアップデート  参照するリポジトリの指定 sudo tlmgr option repository http://ftp.naist.jp/pub/CTAN/systems/texlive/tlnet/   アップデート sudo tlmgr update --self --all      ~/.latexmkrcの作成  毎回コンパイル(platexしてdvipdfmxして\u0026hellip;)というのは面倒 → latexmkを使うことで，保存する度に自動的にpdfまで生成するようにする．  参考: latexmkの薦め Ubuntuでは以下のファイルをホームディレクトリ直下(~/.latexmkrc)に配置したところ，正常に動作した．  #!/usr/bin/perl $latex = 'platex -guess-input-enc -src-specials -interaction=nonstopmode -synctex=1'; $latex_silent = 'platex -interaction=batchmode'; $dvips = 'dvips'; $bibtex = 'pbibtex'; $makeindex = 'mendex -r -c -s jind.ist'; $dvi_previewer = 'start dviout'; $dvipdf = 'dvipdfmx %O -o %D %S'; $pdf_previewer = 'xdg-open'; $preview_continuous_mode = 1; $pdf_mode = 3; $pdf_update_method = 4;   latexmkについては， vim ~/.latexmkrc  などとして，上記のようなものを作ればよい．\n    動作テスト platex  \u0026ldquo;test.tex\u0026quot;という名前のファイルをtextestというディレクトリの中に作った． \\documentclass[dvipdfmx]{jsarticle} \\title{ {\\LaTeX} 動作テスト・サンプルファイル} \\date{\\today} \\begin{document} \\maketitle \\section{test} これはテストです． \\begin{equation} f(x) = 2x + 3 \\end{equation} \\end{document}   textestというディレクトリに移動して，以下のコマンドを実行する． platex test.tex \u0026amp;\u0026amp; dvipdfmx test.dvi  実行後にpdfファイルが問題なく生成されていたら良い．\n  latexmk  先程のファイルに対して， latexmk test.tex  として，正しくpdfファイルが生成され，変更して保存した後にpdfファイルが更新されたら問題なく導入されている．\n  ","date":1625734811,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1625734811,"objectID":"dcc46d0d1cccad07876cdbbfa6d610c0","permalink":"https://tachibana-ai.netlify.app/post/ubuntu_tex/","publishdate":"2021-07-08T18:00:11+09:00","relpermalink":"/post/ubuntu_tex/","section":"post","summary":"0. はじめに UbuntuにTeXを入れたときのメモ 1. やること 好","tags":["TeX","Ubuntu"],"title":"Ubuntu20.04にTeX Liveをインストールする","type":"post"},{"authors":[],"categories":["Introduction"],"content":"0. 自己紹介 (2021年現在)  ハンドルネーム  たちばな / 橘 あい   居住地  大阪府   学歴  学士 現在修士2年   研究  計算機科学 非線形力学系   趣味  旅行 自転車 技術書を読んで手元で動かすこと    1. 記事を始めたきっかけ もともとGitHubのリポジトリにMarkdown形式で自分が勉強したこと / 知ってることをまとめていた．\n先日，研究室の後輩からHugoというものを使うとMarkdown形式で書いた文書をウェブサイトにできるということを教えてもらったので，ウェブサイトにしようかなと思った．\n2. 今後の予定 博士進学せず，来年4月から就職します．それまでにこれまで書いたMarkdownの資料をこちらに移植したいと思っています．\n","date":1625728442,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1625728442,"objectID":"2247257f33c5eaa1cd0616bf37b07249","permalink":"https://tachibana-ai.netlify.app/post/first-post/","publishdate":"2021-07-08T16:14:02+09:00","relpermalink":"/post/first-post/","section":"post","summary":"0. 自己紹介 (2021年現在) ハンドルネーム たちばな / 橘 あい 居","tags":["Introduction"],"title":"自己紹介","type":"post"}]
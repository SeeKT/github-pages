[{"authors":null,"categories":null,"content":"修士2年です．興味があることを少しだけ触ってます．飽きっぽいので，どんどん新しいことに手を付けたくなります．\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"ja","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"修士2年です．興味があることを少しだけ触ってます．飽きっぽい","tags":null,"title":"Ai Tachibana","type":"authors"},{"authors":[],"categories":["Ubuntu"],"content":"0. はじめに 2021年1月にこれまで使っていた研究室のファイルサーバが変な挙動を起こしたので，私が新しくファイルサーバを構築した．そのときのログを残す．\n色々と怪しい部分もあるかもしれないので，一個人の記録として見ていただければ幸いである．\n以下，LinuxサーバをUbuntu18.04とし，クライアント側はWindows10もしくはUbuntu20.04とする．Windows10の場合はGit Bashが導入済みであるものとする．\n SSH接続の設定 Sambaの設定 バックアップの設定 CUI運用にする  という流れで実行した．\n1 SSH接続 サーバにリモートで接続して手元で扱うときには，SSH (Secure Shell) 接続を用いることが多い．SSHは，セキュアな通信でリモートアクセスするためのプロトコルであり，強固な認証と暗号化の機能がある (詳しい説明は省略)．ここでは，LinuxサーバのSSH設定の手順について述べる．認証方式は公開鍵認証とする．\n以下，サーバ側のシェルに(server)とし，接続するクライアント側のシェルに(client)と書くものとする．\n(1) sshdのインストールと自動起動の設定 (サーバ側) ホスト側でsshをインストールして，自動起動の設定を行う．\n(server) sudo apt update \u0026amp;\u0026amp; sudo apt -y upgrade (server) sudo apt -y install ssh (server) sudo systemctl start ssh.service (server) sudo systemctl enable ssh.service  この後サーバを再起動し，以下のコマンドを実行．\n(server) sudo systemctl is-enabled ssh.service (server) sudo systemctl status ssh.service  上のコマンドを実行し，enabledと出力されれば，ブート時に起動する．下のコマンドを実行し，Active: active (running)と出力されれば現在sshdが起動している．\nこの時点でサーバ側にパスワード認証で入ることができる．\n(client) ssh [user]@[IP address of the server]  (userはサーバのユーザ名)とすると，特に設定が間違えていなければ接続できる．\n今回の目的は公開鍵認証で入ることなので，以下の手順を\n(2) キーペアを作る (クライアント側) クライアント側でキーペアを作る．キーペアの作り方については以下の記事を参考にした．\nGit Bash (Ubuntuはterminal)で，以下のコマンドを実行する．\n(client) ssh-keygen -t rsa -b 4096 -C \u0026quot;comment\u0026quot;  上記のコマンドを実行すると，鍵のパスを変えるか，パスフレーズは必要か聞かれる．鍵はデフォルトでは\u0026lt;user\u0026gt;/.ssh直下にid_rsaとid_rsa.pubとして保存されるが，複数の鍵を作る場合は新しいディレクトリを.ssh以下に作るなどすれば良いと思う．\ncommentは任意だが，複数人が管理するファイルサーバという機能を持たせると考えると，自分の名字にするのが良いように思う．\n参考  お前らのSSH Keysの作り方は間違っている  (3) クライアント側からホスト側に公開鍵を送信する (1)でSSH接続ができているとすると，クライアント側でscpコマンドを実行すると，サーバ側のuserのホームディレクトリ直下に公開鍵を転送できる．\n(client) scp [client rsa pub key path] [user]@[IP address of the server]:/home/[user]  ここで，scpはSSHを使ってリモートホストとローカルホストの通信を暗号化した上で，ファイルの送信をするコマンドであり，scp [from] [to]のように書けば，fromのパスで指定したファイルがtoのパスの下に送られる．\n[client rsa pub key path]は，キーペアを作るときに変えていなければ，(Windowsの場合は)\nC:\\Users\\[user]\\.ssh\\id_rsa.pub  である．\n(4) authorized_keysファイルを作る 次に，サーバ側で鍵の設定をする．(3)で，ホームディレクトリ直下に公開鍵が送られたとする．このファイルの内容をauthorized_keysファイルにコピーする．その後，chmodコマンドで所有者のみが読めるようにする．\n(server) cat id_rsa.pub \u0026gt;\u0026gt; ./.ssh/authorized_keys (server) chmod 700 ./.ssh (server) chmod 600 ./.ssh/authorized_keys (server) rm -rf id_rsa.pub  (5) sshd_configの設定 (サーバ側) 公開鍵認証を有効化するために，sshdの設定ファイルを編集する．一旦バックアップをとる．\n(server) cd /etc/ssh (server) sudo cp sshd_config sshd_config.bk (server) sudo vim sshd_config  以下の行のコメントを外し，有効化する．\n#PubkeyAuthentication yes #AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2  一応Rootでのログインはできないようにしておく．\nPermitRootLogin no  参考  SSHの鍵認証設定  (6) .sshのconfigファイルの設定 (クライアント側) (5)までで公開鍵認証でSSH接続できるようになった．\nssh -i [client rsa private key path] [user]@[IP address of the server]  接続のたびにこのコマンドを打つのはめんどくさいので，エイリアス設定をする．.ssh/configファイルに以下を追加 (Windowsの場合．秘密鍵が.ssh直下にあるとする)．\nHost [server name] HostName xxx.xxx.xxx.xxx # IP address of the server User [user] # user name of the server Identityfile C:\\Users\\[user]\\.ssh\\id_rsa  このようにすると，\nssh [servername]  でサーバに接続できる．\n2 Sambaの設定 Sambaとは，Linux上でWindowsのネットワーク機能を実現するソフトウェアである．これを使うことで，ファイルサーバの機能が実現される．\n以下，ホームディレクトリ直下のShare_dirを共有するものとする．ここでは，同一のネットワークのホストに対してフルパーミッションで権限を与える場合を想定する．\n参考  【Linux】Ubuntuでファイルサーバーを作って遊ぼう！(中級者～上級者向け)【世界一わかりやすい解説(かもしれない)】  このYouTubeの動画を参考にした．    (1) Sambaのインストール (server) sudo apt install -y samba  (2) samba.confのバックアップと編集 (server) cd /etc/samba/ (server) sudo cp smb.conf smb.conf.bk (server) sudo vim smb.conf  末尾に以下を追加．\n# fileserver [fileserver] comment = Ubuntu FileServer path = /home/[user]/Share_dir/ browseable = yes read only = no guest ok = yes guest only = yes create mode = 0777 directory mode = 0777  (3) 再起動と自動起動の設定 (server) sudo systemctl restart smbd nmbd (server) sudo systemctl enable smbd nmbd  3. バックアップ 共有したディレクトリをHDDなどにバックアップすることを考える．これは，突然PCが落ちてデータが飛ぶようなリスクへの対策となる．\nここではHDDがマウントポイント/mnt/Elementsにマウントされているとし，システム起動時にマウントするように設定したとする．\n(1) バックアップ用のディレクトリの作成 Server_backupディレクトリにバックアップを取るものとする．\n(server) mkdir /mnt/Elements/Server_backup  (2) バックアップの設定 ここでは，差分バックアップを取るものとする．このときに使うコマンドはrsyncである．\n(server) sudo rsync -av /home/[user]/Share_dir/ /mnt/Elements/Server_backup  これは，Share_dirの中身を/mnt/Elements/Server_backupにバックアップするというようなものである．ここで，引数-avは，今どこをコピーしているのかを表示出力するためのものである．\n(3) バックアップのスケジューラの設定 毎日バックアップを更新するために，スケジューラを用いる．crontabを編集すれば良い．\n(server) sudo vim /etc/crontab  以下を追加した．\n# m h dom mon dow user\tcommand 00 3\t* * *\troot rsync -av /home/[user]/Share_dir/ /mnt/Elements/Server_backup  4. CUI運用にする ファイルサーバとしての運用であれば，CUI運用の方が良い．\n# 一時的にCUIモードにする (server) sudo systemctl isolate multi-user.target # デフォルトをCUIモードにする (server) sudo systemctl set-default multi-user.target  GUIに戻したいときは以下のコマンドを実行．\n# 一時的にGUIモードにする (server) sudo systemctl isolate graphical.target # デフォルトをGUIモードにする (server) sudo systemctl set-default graphical.target  5. まとめ ファイルサーバを作った際のログを残した．\n","date":1625823586,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1625823586,"objectID":"ca04bb706e701eccfe4dc16f78019f27","permalink":"https://tachibana-ai.netlify.app/post/create_server/","publishdate":"2021-07-09T18:39:46+09:00","relpermalink":"/post/create_server/","section":"post","summary":"0. はじめに 2021年1月にこれまで使っていた研究室のファイル","tags":["Ubuntu","Server"],"title":"研究室のファイルサーバを構築したときのログ (Ubuntu18.04)","type":"post"},{"authors":[],"categories":["PC"],"content":"0. はじめに この記事では，私が普段使っているPC周りの環境を書く．就職したらもっと良いのがほしい．\n1. 自宅の環境とノートPC  デスクトップ  Lenovo V530  色々手を加えた   OS: Windows11 SSD: 512GB  もともと256GB．換装した．   RAM: 16GB CPU: Core i5-9500 GPU (増設): GTX-1050Ti  PH-GTX1050TI-4G     ノート  iiyama 14インチ (BTO) OS: Ubuntu20.04 SSD: 256GB HDD: 1TB RAM: 16GB CPU: Core i5-8265   モニター  ASUS 23インチ    2. 研究室の環境  デスクトップ  自作 OS: Ubuntu20.04 SSD: 480GB RAM: 16GB CPU: Core i5-8400   モニター  iiyama 23インチ ASUS 27インチ    3. 用途  デスクトップ (家)  ゲーム  ドラクエ11S楽しい！   Virtualboxを使ったセキュリティの勉強  最近ハッキング・ラボのつくりかたという本を読んでる   Hugoを使ってこのサイトの記事の編集 学会発表の練習のためにOBSを使って録音   ノートパソコン  研究  デスクトップからモニターを外してデュアルモニターにして作業してる 論文を読む プログラムを書く TeXで資料をまとめる / スライドを作る 論文を書く   勉強  最近は非線形現象の勉強を少しやってる プログラムを書く Markdown形式でまとめる     デスクトップ (研究室)  ノートパソコンと同じ環境を作っているので，研究室ではノートの代わりにデスクトップを使っている GitHubのprivateリポジトリで共有してる    ","date":1625739353,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1625739353,"objectID":"59b96572dd4af2f16ba8d10bcd4f9258","permalink":"https://tachibana-ai.netlify.app/post/myenv/","publishdate":"2021-07-08T19:15:53+09:00","relpermalink":"/post/myenv/","section":"post","summary":"0. はじめに この記事では，私が普段使っているPC周りの環境を書","tags":["PC"],"title":"普段使っているPC周りの環境","type":"post"},{"authors":[],"categories":["Docker"],"content":"0. はじめに この記事では，Docker containerとしてPythonの開発環境を作ったときのメモを残す． この記事の内容は，GitHubのサブのアカウントのpublicリポジトリで公開している．\n1. 必要なもの  Docker Engineのインストール VSCodeのインストール  Remote Developementの導入    2. 基本構成  Docker Image  pythonの3.8.10-busterを使っている．   ディレクトリ構成 |- test_code/ # コードを置いている |- .devcontainer/ |- devcontainer.json |- docker-compose.yml |- dockerfile |- requirements.txt    各種ファイル  devcontainer.json  VSCodeのRemoteを使うときの設定 // For format details, see https://aka.ms/devcontainer.json. For config options, see the README at: // https://github.com/microsoft/vscode-dev-containers/tree/v0.177.0/containers/docker-existing-dockerfile { // 名前は任意 \u0026quot;name\u0026quot;: \u0026quot;Docker-Python\u0026quot;, // dockercomposefileの場所 (同階層に置いている) \u0026quot;dockerComposeFile\u0026quot;: \u0026quot;docker-compose.yml\u0026quot;, // 使う拡張機能 \u0026quot;extensions\u0026quot;: [ \u0026quot;ms-python.python\u0026quot; ], // ここに記載している\u0026quot;service\u0026quot;名とdocker-compose.ymlに記載している\u0026quot;service\u0026quot;を一致させる \u0026quot;service\u0026quot;: \u0026quot;python\u0026quot;, // コンテナ内に入ったときのworkdir \u0026quot;workspaceFolder\u0026quot;: \u0026quot;/code\u0026quot;, // VSCodeを閉じたときのアクション \u0026quot;shutdownAction\u0026quot;: \u0026quot;stopCompose\u0026quot; }     docker-compose.yml  複数のコンテナを定義し，実行することができる． 今回は，1つのコンテナに対する処理を記述 version: \u0026quot;3\u0026quot; # 3が最新版 services: python: # ここの名前とdevcontainer.jsonの\u0026quot;service\u0026quot;を一致させる build: . # 同階層のdockerfileからビルドする command: sleep infinity volumes: - ../:/code # 上階層のディレクトリをDocker Container上のworkdirにマウント environment: SHELL: /bin/bash     dockerfile  コンテナを作るための処理 ########### Image file ########### FROM python:3.8.10-buster ################################## ########### update and install packages ########### # apt-get upgradeに-yを付けないとexit 1になります．追加しました．(5/23) RUN apt-get update \u0026amp;\u0026amp; \\ apt-get -y upgrade \u0026amp;\u0026amp; \\ apt-get install -y vim git \u0026amp;\u0026amp; \\ rm -rf /var/lib/apt/lists* ################################################### ########### create workspace ########### RUN mkdir /code WORKDIR /code ADD ./requirements.txt /code/ ######################################## ########### install packages via pip ########### RUN pip3 install -r requirements.txt ADD . /code/ ################################################     requirements.txt  pip installするファイル ############ Requirements Packages ############ pylint numpy scipy sympy matplotlib statsmodels sklearn pandas networkx      3. 使用時  test_codeと同階層に自分のコードを格納したフォルダを配置して，VSCodeの左下の\u0026quot;Open Remote Window\u0026quot;を選択． Reopen in Containerを選択． ワークスペースが開いたら，terminalを開き，python *.pyで実行する．  4. いろいろ変えたいとき  pip installするパッケージを変更したいとき  requirements.txtを書き換える   Pythonのバージョンを3の別バージョンに変えたいとき  dockerfileのイメージファイル (2行目のFROM以下) を書き換える．   Pythonのバージョンを2にしたいとき  pythonには2系がないので，イメージファイルをUbuntu等にして1からインストールする．    ","date":1625738331,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1625738331,"objectID":"7471e873b14f0c8e0af18a6a496e2caf","permalink":"https://tachibana-ai.netlify.app/post/docker_python/","publishdate":"2021-07-08T18:58:51+09:00","relpermalink":"/post/docker_python/","section":"post","summary":"0. はじめに この記事では，Docker containerとして","tags":["Python","Docker"],"title":"Python3の開発環境をDocker containerとして作る","type":"post"},{"authors":[],"categories":["Ubuntu"],"content":"0. はじめに 私が学部4年から修士1年までに使っていたPythonの開発環境はUbuntu上にpipとpipenvを入れ，pipenvで仮想環境を作って使うというものだった．Ubuntuを20にアップグレードしたときにこれまで使っていた仮想環境でプログラムが動かない，ということが起こった．\nこのように，OSに1つの環境を作って動かそうとした際には，更新に伴いプログラムが動かなくなるというリスクがある．さらに，以下のような問題が挙げられる．\n OSが汚れる  OSに直接インストールするので，複数のバージョンが共存するといったことが起こる．   問題の切り分けが難しい  OSのアップグレードの問題なのか，パッケージの問題なのか分からなくなる．    そんなときDockerに出会う．Dockerの説明は省略するが，イメージは1つのサーバに独立した複数のサーバを同時に構築することができる，というものである．これは良いと思い，研究の開発環境をDocker container上に作ることにした．\nUbuntu20.04にDocker Engineをインストールするためのシェルスクリプトを作ったので，この記事で共有する．\n1. Dockerの利点と欠点 私が思うDockerの利点と欠点を以下に示す．あまり詳しくないエアプ発言かもしれない．\n利点  Dockerfileに開発に必要なパッケージのインストールについて記述できるので，Dockerfileとして記述してしまえば，そのとおりに環境構築ができる． 移植しやすい． Python等のバージョンが変わったときもDockerfileの内容を変えることで最新版にアップデートできる． OSのバージョンに依らない．依存関係に関する問題を，パッケージのバージョンにまで絞り込める． OSが汚れない． 1つのPCの中に複数の異なる開発環境を構築できる． VSCodeの拡張機能が優秀で，使いやすい．  欠点  Windowsでエラーが出ることが多い気がする．Windowsで同じようなことをしようと思ってもうまく動かないことがある． WindowsではWSL2をバックエンドにしているので，メモリの消費量が多い．まともに動かそうと思うとメモリ16GBはないと厳しい． 導入コスト．(自分が賢くないだけだけど) 難しい．  2. インストールのためのシェルスクリプト 東京大学の金子邦彦先生のウェブサイトがかなり参考になった．Docker Engineの導入以外にもかなり参考にさせていただいた．\n次のようなシェルスクリプトを作り，~/install_docker.shとして保存した．\n#!/bin/bash # Written by A.Tachibana, 2021/3/19 # Objective ## To install docker in Ubuntu 20 # Reference ## https://www.kkaneko.jp/tools/docker/ubuntu_docker.html ############ To execute ############ # chmod 755 install_docker.sh # ./install_docker.sh #################################### # Require password printf \u0026quot;password: \u0026quot; read -s password # Update and Upgrade echo \u0026quot;$password\u0026quot; | sudo -S apt update \u0026amp;\u0026amp; sudo -S apt -y upgrade # Install Docker ## Delete old version (if exists) sudo -S apt -y remove docker docker-engine docker.io containerd docker-ce docker-ce-cli sudo -S apt -y autoremove ## Install required software sudo -S apt update sudo -S apt -y install apt-transport-https ca-certificates curl software-properties-common sudo -S apt -y install linux-image-generic ## Set docker repository curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - apt-key fingerprint 0EBFCD88 sudo -S add-apt-repository \\ \u0026quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -sc) \\ stable\u0026quot; sudo -S apt update ## Install docker.io sudo -S apt -y install docker.io containerd docker-compose ## Add authority sudo -S usermod -aG docker $USER ## Set autostart sudo -S systemctl unmask docker.service sudo -S systemctl enable docker sudo -S systemctl is-enabled docker ## let user ubuntu use docker sudo gpasswd -a $USER docker  このファイルに実行権限を与え，実行する．\nchmod 755 install_docker.sh ./install_docker.sh  なお，このシェルスクリプトは，私のサブのGitHubアカウントのpublicリポジトリにアップロードしている．\n参考  Docker Engine のインストールと使用法（Ubuntu 上）  ","date":1625736339,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1625736339,"objectID":"2d5b8af647c7799f914162293fa262cc","permalink":"https://tachibana-ai.netlify.app/post/ubuntu_docker/","publishdate":"2021-07-08T18:25:39+09:00","relpermalink":"/post/ubuntu_docker/","section":"post","summary":"0. はじめに 私が学部4年から修士1年までに使っていたPytho","tags":["Docker","Ubuntu"],"title":"Ubuntu20.04にDocker Engineをインストールする","type":"post"},{"authors":[],"categories":["Ubuntu"],"content":"0. はじめに 授業でRとRStudioを使う必要があったのでインストールした． 前処理がめんどくさかったので，シェルスクリプトを書いた．\n参考  RとRStudioのインストールと初期設定 Linux (Ubuntu) 編  1. 前処理 次のようなシェルスクリプトを書き，~/install_R_requirement.shとして保存した．\n#!/bin/bash # Written by A.Tachibana, 2021/4/28 # Objective ## To install R in Ubuntu 20 ## Requirement packages # Reference ## https://yukiyanai.github.io/jp/resources/docs/install-R_ubuntu.pdf ############ To execute ############ # chmod 755 install_R_requirement.sh # ./install_R_requirement.sh #################################### # Require password printf \u0026quot;password: \u0026quot; read -s password # Update and Upgrade echo \u0026quot;$password\u0026quot; | sudo -S apt update \u0026amp;\u0026amp; sudo -S apt -y upgrade # 1. Install tools sudo -S apt -y install gdebi-core wget # 2. Get fonts sudo -S apt -y install fonts-ipaexfont fc-cache -f -v # 3. Install requirement tools ## requirement tools sudo -S apt -y install build-essential libxml2-dev libssl-dev libx11-dev libglu1-mesa-dev libmagick++-dev libudunits2-0 libudunits2-dev libgdal-dev libproj-dev libgmp3-dev curl  このファイルに実行権限を与え，実行する．\nchmod 755 install_R_requirement.sh ./install_R_requirement.sh  2. RとRStudioのインストール 次のようなシェルスクリプトを書き，~/install_R.shとして保存した．\n#!/bin/bash # Written by A.Tachibana, 2021/4/28 # Objective ## To install R in Ubuntu 20 # Reference ## https://yukiyanai.github.io/jp/resources/docs/install-R_ubuntu.pdf ############ To execute ############ # chmod 755 install_R.sh # ./install_R.sh # execute after install_R_requirement.sh #################################### # Require password printf \u0026quot;password: \u0026quot; read -s password # 1. add repository sudo -S apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 sudo -S add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/' # 2. install R base sudo -S apt update sudo -S apt -y install r-base # 3. install RStudio cd ~/Downloads/ # 2021/4/28 wget https://download1.rstudio.org/desktop/bionic/amd64/rstudio-1.4.1106-amd64.deb sudo -S gdebi rstudio-1.4.1106-amd64.deb  このファイルに実行権限を与え，実行する．\nchmod 755 install_R.sh ./install_R.sh  注意点  RStudioに関しては2021/4/28時点で最新のものをダウンロードしたが，現在はもっと新しいものが出ていると思う．  「最新版を持ってくる」ような書き方が分からなくて，頭の悪い書き方をしている．   install_R.shは，install_R_requirement.shの実行後に実行する．  ","date":1625735266,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1625735266,"objectID":"529205779250c5d569ccc2521875a22a","permalink":"https://tachibana-ai.netlify.app/post/ubuntu_rstudio/","publishdate":"2021-07-08T18:07:46+09:00","relpermalink":"/post/ubuntu_rstudio/","section":"post","summary":"0. はじめに 授業でRとRStudioを使う必要があったのでイン","tags":["R","Ubuntu"],"title":"Ubuntu20.04にRとRStudioをインストールする","type":"post"},{"authors":[],"categories":["Ubuntu"],"content":"0. はじめに  UbuntuにTeXを入れたときのメモ  1. やること 好きなエディタを入れる TeXLiveを入れる ~/.latexmkrcを作る 動作テスト  好きなエディタを入れる  私はTeXの文書を作るときはAtomを使うので，Atomを入れた．  公式サイト (https://atom.io/) からdebをダウンロードして実行． sudo apt install ./atom-amd64.deb   パッケージを入れる．  latex language-latex latexer pdf-view      TeXLiveを入れる  日本の大学(e.g. NAIST)のリポジトリからダウンロードして中身を展開する． wget http://ftp.naist.jp/pub/CTAN/systems/texlive/tlnet/install-tl-unx.tar.gz tar -zxvf install-tl-unx.tar.gz cd install-tl-[date]   管理者権限で実行する．リポジトリはダウンロードしたところ． sudo ./install-tl --repository http://ftp.naist.jp/pub/CTAN/systems/texlive/tlnet/   \u0026ldquo;I\u0026quot;でインストール   パスを通す． sudo /usr/local/texlive/2020/bin/x86_64-linux/tlmgr path add   これは私の例である．   TeXLiveのアップデート  参照するリポジトリの指定 sudo tlmgr option repository http://ftp.naist.jp/pub/CTAN/systems/texlive/tlnet/   アップデート sudo tlmgr update --self --all      ~/.latexmkrcの作成  毎回コンパイル(platexしてdvipdfmxして\u0026hellip;)というのは面倒 → latexmkを使うことで，保存する度に自動的にpdfまで生成するようにする．  参考: latexmkの薦め Ubuntuでは以下のファイルをホームディレクトリ直下(~/.latexmkrc)に配置したところ，正常に動作した．  #!/usr/bin/perl $latex = 'platex -guess-input-enc -src-specials -interaction=nonstopmode -synctex=1'; $latex_silent = 'platex -interaction=batchmode'; $dvips = 'dvips'; $bibtex = 'pbibtex'; $makeindex = 'mendex -r -c -s jind.ist'; $dvi_previewer = 'start dviout'; $dvipdf = 'dvipdfmx %O -o %D %S'; $pdf_previewer = 'xdg-open'; $preview_continuous_mode = 1; $pdf_mode = 3; $pdf_update_method = 4;   latexmkについては， vim ~/.latexmkrc  などとして，上記のようなものを作ればよい．\n    動作テスト platex  \u0026ldquo;test.tex\u0026quot;という名前のファイルをtextestというディレクトリの中に作った． \\documentclass[dvipdfmx]{jsarticle} \\title{ {\\LaTeX} 動作テスト・サンプルファイル} \\date{\\today} \\begin{document} \\maketitle \\section{test} これはテストです． \\begin{equation} f(x) = 2x + 3 \\end{equation} \\end{document}   textestというディレクトリに移動して，以下のコマンドを実行する． platex test.tex \u0026amp;\u0026amp; dvipdfmx test.dvi  実行後にpdfファイルが問題なく生成されていたら良い．\n  latexmk  先程のファイルに対して， latexmk test.tex  として，正しくpdfファイルが生成され，変更して保存した後にpdfファイルが更新されたら問題なく導入されている．\n  ","date":1625734811,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1625734811,"objectID":"dcc46d0d1cccad07876cdbbfa6d610c0","permalink":"https://tachibana-ai.netlify.app/post/ubuntu_tex/","publishdate":"2021-07-08T18:00:11+09:00","relpermalink":"/post/ubuntu_tex/","section":"post","summary":"0. はじめに UbuntuにTeXを入れたときのメモ 1. やること 好","tags":["TeX","Ubuntu"],"title":"Ubuntu20.04にTeX Liveをインストールする","type":"post"},{"authors":[],"categories":["Introduction"],"content":"0. 自己紹介 (2021年現在)  ハンドルネーム  たちばな / 橘 あい   居住地  大阪府   学歴  学士 現在修士2年   研究  計算機科学 非線形力学系   趣味  旅行 自転車 技術書を読んで手元で動かすこと    1. 記事を始めたきっかけ もともとGitHubのリポジトリにMarkdown形式で自分が勉強したこと / 知ってることをまとめていた．\n先日，研究室の後輩からHugoというものを使うとMarkdown形式で書いた文書をウェブサイトにできるということを教えてもらったので，ウェブサイトにしようかなと思った．\n2. 今後の予定 博士進学せず，来年4月から就職します．それまでにこれまで書いたMarkdownの資料をこちらに移植したいと思っています．\n","date":1625728442,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1625728442,"objectID":"2247257f33c5eaa1cd0616bf37b07249","permalink":"https://tachibana-ai.netlify.app/post/first-post/","publishdate":"2021-07-08T16:14:02+09:00","relpermalink":"/post/first-post/","section":"post","summary":"0. 自己紹介 (2021年現在) ハンドルネーム たちばな / 橘 あい 居","tags":["Introduction"],"title":"自己紹介","type":"post"}]
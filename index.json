[{"authors":null,"categories":null,"content":"修士2年です．興味があることを少しだけ触ってます．飽きっぽいので，どんどん新しいことに手を付けたくなります．\n最近はセキュリティ関連の本を読んでいます．\n 自己紹介 業績リスト  ","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"ja","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"修士2年です．興味があることを少しだけ触ってます．飽きっぽい","tags":null,"title":"Ai Tachibana (Kosuke Toda)","type":"authors"},{"authors":[],"categories":["blog"],"content":"0. はじめに 最近 YouTube で自然音を聴きながら作業することが多いが，Amazon Music (Unlimited) で作ったプレイリストを聴きながら作業することも多かった (あまり良くないかもしれないが)．\nここでは，よく聴く曲やサントラ，off vocal を共有したいと思う．どちらも30曲ずつのプレイリストを作成した．\n1. よく聴く曲 よく聴く曲や好きな曲を集めたプレイリストを作成した．これらの曲は修士の間結構聴いていたように思う．\n 2. サントラ，off vocal 等 最近サントラや off vocal も少し聴くようになった．気になっている曲や，歌が好きで聴いていた曲も入れた．\n このあたりは田中秀和さんや MONACA の強さを感じる．\n3. まとめ プレイリストを作成した．\n","date":1635247606,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1635247606,"objectID":"a5f577d439634399308830a82e8fdaa7","permalink":"https://tachibana-ai.netlify.app/post/fav_music/","publishdate":"2021-10-26T20:26:46+09:00","relpermalink":"/post/fav_music/","section":"post","summary":"0. はじめに 最近 YouTube で自然音を聴きながら作業することが多いが，A","tags":["blog"],"title":"よく聴く音楽","type":"post"},{"authors":[],"categories":[],"content":"略歴  1997/4 生 2016/4 大阪大学 基礎工学部 システム科学科 入学 2020/3 大阪大学 基礎工学部 システム科学科 卒業 2020/4 大阪大学 大学院基礎工学研究科 システム創成専攻 博士前期課程 入学  職歴  2020/4 - 8 大阪大学 全学共通教育科目 ティーチングアシスタント 2020/4 - 9 大阪大学 基礎工学部 ティーチングアシスタント 2021/4 - 9 大阪大学 基礎工学部 ティーチングアシスタント  ","date":1634734354,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1634734354,"objectID":"5513283a5030039fe0c858d21552e351","permalink":"https://tachibana-ai.netlify.app/profile/","publishdate":"2021-10-20T21:52:34+09:00","relpermalink":"/profile/","section":"","summary":"略歴 1997/4 生 2016/4 大阪大学 基礎工学部 システム科学科 入学 2020/3 大阪大学 基礎","tags":[],"title":"プロフィール","type":"page"},{"authors":[],"categories":["PC"],"content":"0. はじめに 研究室単位で修論のテンプレートがあると思う．私の研究室にあったテンプレートはTeXソースの分割がされていないようなものだったので，テンプレートを作り直すついでに備忘録として残しておくことにする．\n作ったテンプレートと同様のものは，GitHubリポジトリ SeeKT/thesis_template にアップロードした．自分が使うためのテンプレートなので色々と問題点もあるだろうが，ご容赦願いたい．\n1. ディレクトリ構成 卒論や修論は文章の量が多くなるので，1つのTeXソースに全て書こうとするとTeXソースの行数が増え，修正が大変になる．そこで，修論本体のTeXソースに各章のTeXソースをinputするようにする．\n今回は，以下のようなディレクトリ構成にする．\n|- bib/: bibtexするもの | |- hogehoge.bib | |- fig/: 図を入れるディレクトリ | |- main/: main.tex のディレクトリ | |- tex/: main.texにinputするTeXソースのディレクトリ | |- preamble_thesis.tex: プリアンブルをまとめたTeXファイル | |- その他inputするTeXソース  2. コンパイル方法等 今回は，documentclass を jsbook としている．コンパイルは platex 等で行うと良いように思う．\nUbuntu20.04にTeX Liveをインストールする にまとめたlatexmk を使うと，bibtex あたりの処理が楽になる．\nコンパイル時は，例えば\nlatexmk main.tex  とする．\n 卒論/修論本体のTeXソース % 卒論/修論 テンプレート \\documentclass[a4j,report,dvipdfmx]{jsbook} % 英語のときは % \\documentclass[a4j,report,english]{jsbook} % preamble_thesis.tex を input \\input{../tex/preamble_thesis} \\begin{document} %%%%%%%%%%%% Title %%%%%%%%%%%% \\input{../tex/title} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%% Table of Contents %%%%%%%%%%%% \\clearpage \\tableofcontents \\clearpage \\setcounter{page}{0} \\pagenumbering{arabic} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%% Chapter1 Introduction %%%%%%%%%%%% \\input{../tex/1_Intro} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%% Chapter2 Preliminaries %%%%%%%%%%%% \\input{../tex/2_preliminaries} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%% Chapter3 main1 %%%%%%%%%%%% \\input{../tex/3_main1} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%% Chapter4 main2 %%%%%%%%%%%% \\input{../tex/4_main2} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%% Chapter5 Conclusion %%%%%%%%%%%% \\input{../tex/5_conclusion} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%% Acknowledgement %%%%%%%%%%%% \\input{../tex/acknowledgement} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%% References %%%%%%%%%%%% % 参考文献のスタイルファイル (hogehoge.bst) \\bibliographystyle{junsrt} % 参考文献のbibtexファイル (main.texからの相対パスで指定, hogehoge.bib) \\bibliography{../bib/ref_circle,../bib/ref_triangle} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\end{document}   (個人的に思う) 利点  卒論や修論が長くなっても，本体の長さはそれほど変わらない． 修正の際は各章のTeXソースを修正すれば良い．  3. GitHubリポジトリ GitHubリポジトリとして卒論や修論を管理するのが推奨されているように思う．ここでは，このリポジトリの .gitignore を紹介する．\n*.aux *.fls *.log *.fdb_latexmk *.toc *.synctex.gz *.dvi  TeXのコンパイルでは様々な副産物ができるが，提出時に必要なものはTeXソースとPDFファイルのみであることが多い．SeeKT/thesis_template では副産物をGitの管理に含めないようにしている．\n4. まとめ この記事では，作成した卒論/修論のテンプレートについて簡単に紹介した．私はこのテンプレートを卒論/修論だけでなく長めのTeXの資料 (jsbook) を作るときにも活用している．\n","date":1633768638,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1633768638,"objectID":"ba26411008ba2e6554321fb347113453","permalink":"https://tachibana-ai.netlify.app/post/thesis_template/","publishdate":"2021-10-09T17:37:18+09:00","relpermalink":"/post/thesis_template/","section":"post","summary":"0. はじめに 研究室単位で修論のテンプレートがあると思う．私の研","tags":["TeX"],"title":"卒論・修論のテンプレート (TeX) について","type":"post"},{"authors":[],"categories":["research"],"content":"0. はじめに 最近，私の研究が引用されたという通知が来た．また，M1 の後半に取り組んでいた研究が論文誌に採択された．私の研究に興味を持ってくださる方が少ないながらもいるようで，嬉しく思う．この記事では，私の研究のことを少し書きたいと思う．\nちなみにこれまでの研究については Publications に載せている．\n1. 研究でやりたいこと ここで書くことは，私が学部生の頃から考えていたことではなく，研究をしていく中で自分がしたい研究について少しずつ固まっていった後に考えていたことである．\n私がもともと気になっていたことは，人を動かすようなものである．例えばそれは感情のような内的なものであったり，法律のような外的なものだったりするだろう．\n一方で，システム工学について学んでいたということもあり，システムの制御にも興味があった．だが，ロボットの制御にはあまり興味が持てず，どちらかと言うとコンピュータシステムや人や組織から構成されるようなシステムの方に興味があった．特に人や組織が関わってくるようなシステムにおいては，そのシステムを動かすような制度や決まりごとが必要になってくると考えられる．\n私が現在研究でやりたいこと (やっていること) は，数理最適化やゲーム理論，制御理論を制度設計に応用することである．例えば，政府がある組織に対しての補助金の与え方を決定する問題を最適化問題として記述する，といったことができるかと思う．また，複数の組織がいる状況下で全ての組織にとって良い状況にしようということをゲームとして書くことができるだろう．また，組織の状態を所望なものにするための制御を導入することもできるだろう．\nこのように，現実の問題を解くためのツールである数理最適化，複数主体が関わる意思決定のための数学的なモデルであるゲーム，状態や出力の制御のための制御理論を，国や州などの制度の設計のために応用できれば面白いと思っている．\n2. 今の研究 色々と課題の多い研究だとは思っているが，お気持ちを少し書きたいと思う (どれくらい需要がある研究なのかということは正直あまりわかっていないところもある)．\n今はブロックチェーン1という技術のうち，パブリックブロックチェーン2に着目して研究している．特に，コンセンサスアルゴリズム3として Proof of Work4 (以下 PoW) が用いられているパブリックブロックチェーンの研究をしている (Proof of Stake の研究はしていない)．\nはじめのうちは，PoW に参加するマイナーの意思決定とマイニング報酬の関係について研究していた．非協力ゲームというものでモデル化をすることで，マイナーの意思決定をゲームのナッシュ均衡の解析をすることで解析した．この研究が最近引用されたようである．\nこの研究の後，進化ゲームで用いられるレプリケータダイナミクスというダイナミクス (用いたのは連続時間系) でモデル化をして，ダイナミクスの平衡点の安定解析をすることで，意思決定の解析をした．また，マイニングへの参加者がいなくならないようなマイニング報酬の制御という問題を考えた (すでにあるブロックチェーン基盤ではマイニング報酬の与え方は基盤が作られた時点で定まっているように思うが，後から制御できるという状況をここでは考えた)．この研究を書いた論文が最近査読に通った．\n現在は，政府がマイニングの収益に対して税金をかけているという状況で税率の設計ができないかな，と思って研究している．これを書いたものが国際会議のワークショップに採択された．12月に発表する予定である．研究を進めていくうちに自分がやってみたいことがだんだんわかってきたように思う．\n残り半年でもう1つくらい面白い結果が出てくれたら嬉しいと思っている．\n3. まとめ 4月から企業の研究所で働く予定である．残り半年，勉強と研究をしんどくならない程度に頑張りたいと思う．\n  分散台帳技術．詳しくは ブロックチェーンとは　〜初心者のためのわかりやすい解説〜 など．\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n ブロックチェーンのうち，管理者が存在しないもの，つまり，ネットワークに接続できれば誰でも参加できるもの．BitcoinやEthereumなど．\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 分散システムにおいて，全体の状態を1つにするための決まり．\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 費やした計算量によって合意を取るコンセンサスアルゴリズム．\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":1633094361,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1633094361,"objectID":"5a41df89a1b65a2d468c7acd3a4add07","permalink":"https://tachibana-ai.netlify.app/post/my_research/","publishdate":"2021-10-01T22:19:21+09:00","relpermalink":"/post/my_research/","section":"post","summary":"0. はじめに 最近，私の研究が引用されたという通知が来た．また，","tags":["research"],"title":"私の研究について","type":"post"},{"authors":[],"categories":[],"content":"Journal Paper   Kosuke Toda, Naomi Kuze, and Toshimitsu Ushio, \u0026ldquo;Effects of miners' location on blocks selection in blockchain,\u0026rdquo; IEICE Communications Express, vol.9, no.12, pp.610-615, December 2020, DOI: 10.1587/comex.2020COL0012 [paper]\n  Kosuke Toda, Naomi Kuze, and Toshimitsu Ushio, \u0026ldquo;Modeling Modeling and Supervisory Control of Blockchain Forks,\u0026rdquo; IEICE Transactions on Fundamentals of Electronics, Communications and Computer Sciences, vol.E104.A, no.2, pp.474-475, February 2021, DOI: 10.1587/transfun.2020MAL0001 [paper]\n  Kosuke Toda, Naomi Kuze, and Toshimitsu Ushio, \u0026ldquo;Game-Theoretic Approach to a Decision-Making Problem for Blockchain Mining,\u0026rdquo; IEEE Control Systems Letters, vol.5, no.5, pp.1783-1788, November 2021, DOI: 10.1109/LCSYS.2020.3043834. [paper] [arXiv]\n  Kosuke Toda, Naomi Kuze, and Toshimitsu Ushio, \u0026ldquo;Stability analysis and control of decision-making of miners in blockchain,\u0026rdquo; IEICE Transactions on Fundamentals of Electronics, Communications and Computer Sciences, vol.E105-A, no.4, pp.-, April 2022. [arXiv]\n  International Conference   Kosuke Toda, Naomi Kuze, and Toshimitsu Ushio, \u0026ldquo;Game-Theoretic Approach to a Decision-Making Problem for Blockchain Mining,\u0026rdquo; in Proceedings of the 2021 American Control Conference (ACC 2021), Online, May 2021. [link]\n  Kosuke Toda, Naomi Kuze, and Toshimitsu Ushio, \u0026ldquo;Dynamics of miners' decision making under taxation in blockchain,\u0026rdquo; in Proceedings of the 2021 NonLinear Science Workshop, Online, December 2021.\n  Domestic Conference   戸田康介・久世尚美・潮俊光, \u0026ldquo;ブロックチェーンマイニングの意思決定問題の解析 ～ マイナーが3人の場合 ～,\u0026rdquo; 電子情報通信学会技術研究報告, (信学技報), vol.120, no.246, pp.85-90, オンライン, 11月 2020.\n  戸田 康介，久世 尚美，潮 俊光, \u0026ldquo;ブロックチェーンにおけるマイナーの意思決定ダイナミクス,\u0026rdquo; 2021年 電子情報通信学会 NOLTA ソサイエティ大会, (IEICE, NOLTA ソサイエティ), p.19, オンライン, 6月 2021.\n  ","date":1633083272,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1633083272,"objectID":"40ea366a28f9524de71378c3212c5489","permalink":"https://tachibana-ai.netlify.app/publication/","publishdate":"2021-10-01T19:14:32+09:00","relpermalink":"/publication/","section":"","summary":"Journal Paper Kosuke Toda, Naomi Kuze, and Toshimitsu Ushio, \u0026ldquo;Effects of miners' location on blocks selection in blockchain,\u0026rdquo; IEICE Communications Express, vol.9, no.12, pp.610-615, December 2020, DOI: 10.1587/comex.2020COL0012 [paper] Kosuke","tags":[],"title":"Publications","type":"page"},{"authors":[],"categories":["blog"],"content":"0. はじめに 自分のこと の記事で，自分のことを少し書いた．今回も自分のことを少し書きたいと思う．\n1. ハンドルネームの由来 もともと『たちばな』というハンドルネームで Twitter をしていた．今のハンドルネームの『橘あい』は，そこから来ている．\n『たちばな』というハンドルネームは，好きなキャラクターの2人からとっている．パワプロシリーズの橘みずきと，ニセコイの橘万里花である．\n小学生から中学生の頃，パワプロ (特に13) のサクセスにハマっていた．特に聖タチバナ学園のストーリー，クレッセントムーン習得のエピソードの主人公，橘みずきと六道聖のエピソードは何度も聖タチバナ学園のサクセスを繰り返すほどに好きだった．\n高校生の頃，友人に勧められてニセコイを見た．どのヒロインも可愛いと思ったが，特に好きだったのは橘万里花と小野寺春だった．橘万里花の一条楽への積極的なアプローチは見ていてとても面白かった．橘万里花の好きなエピソードは，一条楽への叱咤のシーンである．小野寺春は，花火のシーン，ウェディングドレスのシーン，恋が実らなかったシーンが特に好き．\nまた，『あい』というのは，B4の頃 Twitter アカウントを新しくしたときにどうせなら『橘』を名字にしてかわいい名前にしようと考えた結果付けたものである．私はかわいいものが好きなので，かわいい名前を付けたかった．ひらがなの名前はかわいいと思う．また，(個人的には) 『橘あい』という響きが好きである．\nちなみに，私は高校生の頃，『ゆな』という名前の LINE アカウントを作って友人に LINE をしていたことがある．その友人は途中まで信じていたと思う (ちゃんとネタバラシをした)．また，文化祭で女装をしたこともある．\n私は昔からかなりの童顔で (今もたまに年齢確認されるくらいには童顔)，小学校の頃は年上の方に「かわいい」と言われて育ってきた．かわいいものが好きなのは，ここから来ているのかもしれない．\n2. 好きな香り バニラの香りが大好きである．いつから好きだったかはあまり覚えていないが，おそらく高校生の頃から好きだったように思う．きっかけは明確には覚えていないが，おそらくたまたますれ違った女の子からバニラの良い香りがして良いなと思ったことだったように思う．それからずっとバニラの香りが好きである．\n最近は自分も香水を買ってつけている．先日，DIORでバニラの香りの香水が新発売されたので，購入した．男性が女性もののような香水をつけるのはどうなのだろうか，とも思ったが，店員さんが「これはシトラス系の香りが入っていて男性にもおすすめですよ」と言ってくれたので，普通につけることにした．\n 私は手首と首筋に香水をつけている．つけるようになってから，PCでの作業中に良い香りで癒やされるようになった．好きな香りは心の癒やしになるなと思った．\n3. フェチ (おそらく) 重度の脚フェチ．特に好きなのは冬にタイツで少し高さのあるブーツを履いた女性の脚．\n厚底の靴はすごくかわいいと思う．\n好きな髪型は今は特にないが，昔は好きだった子の髪型がボブだったからボブが好きだった．\n4. おわりに 今回も自分のこと (ハンネの由来とか好きなものとか) を書いた．自分語りと駄文生成が好きなので，こういうブログはまた書くと思う．\n","date":1632737900,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1632737900,"objectID":"6e4efa4221a46227f9c24d153e6aea95","permalink":"https://tachibana-ai.netlify.app/post/blog_old_self_2/","publishdate":"2021-09-27T19:18:20+09:00","relpermalink":"/post/blog_old_self_2/","section":"post","summary":"0. はじめに 自分のこと の記事で，自分のことを少し書いた．今回も","tags":["blog"],"title":"自分のこと (2)","type":"post"},{"authors":[],"categories":["blog"],"content":"0. はじめに 気が向いたので，自分のことを少しだけ書きたいと思う (恥ずかしくなったら draft に戻そうと思う)．自己紹介の記事は，情報量があまりないので．\n1. 昔のこと (大学入学前) 剣道を小学校からやっていたが，そもそも運動が苦手でセンスもなく，長くやっている割には全然強くなれなかった．そのため中学の頃は同期から色々と言われたし，それで少し傷つくなどしていた．その頃から私は運動に関する自分の才能のなさに気付いており，そもそも体を動かすことが嫌いになっていた．高校まで剣道を続けたが，高校卒業を機に剣道から離れた．\n中学の頃と高校の頃は，田舎の公立学校だったこともあり，常に成績は学年で 1位 - 3位くらいだった．当時は自分には運動の才能はない代わりに多少は勉強ができるのだなと思っていた．井の中の蛙である．嫌いな先生の授業はほぼ聞かず，授業時間中に自分で勉強する，先生からすると生意気なガキだったと思う．自分の頭の中の理解を人に伝えるのが苦手であり，人に勉強を教えるといったことに対しては苦手意識を持っていた．\nアニメ好きであり，色々な設定を考えるのが好きだった．中二病患者でもあった．\n2. 昔のこと (学部生) 学部1年の冬に某アニメのイベントに参加してから，イベントやライブに行くのにハマった．学部2, 3年はイベントに行くためにバイトをたくさんして，成績も勉強の理解も全く気にしていなかった．\n学部4年で研究で苦しんだ (B4の頃に研究が辛かったときとその後の話)．それからは勉強と研究を頑張ることにした．\n2.1. 推し ここで，私が学部時代に追っていたグループ / 人を軽く紹介する．\n Aqours  ラブライブ！サンシャイン!!   Pile  ラブライブ！の声優の1人   スタァライト九九組  少女☆歌劇 レヴュースタァライト   鈴木愛奈  Aqoursの声優の1人   亜咲花  アニソンシンガー    歌の上手い人が好きである．\n3. 現在 (大学院) 研究と研究室の同期との勉強会をしている．勉強会でよく「自分以外の全人類は自分よりも賢い」という話をしている．自分の能力のなさに気付き，何とか食らいつこうとしているが，うまくいっていないような気もしている．\n最近は，超ハイスペックな個人勢の VTuber の天曰ひよさんという方を応援している．この人に対しては推しという感情よりもまず憧れと尊敬が先に来る．目標が高いことも好きなポイントである．\n他人を羨ましいと思う感情は今でも強く持っている．あまり気にしないようにしたいのだが，他人の良いところはとても素晴らしく見え，自分の悪いところはとことん悪く見えてしまう．応援している V への感情も，羨ましいというものなのだろうか．\n","date":1632583125,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1632583125,"objectID":"18b0797a4439404464788bd627f6100c","permalink":"https://tachibana-ai.netlify.app/post/blog_old_self/","publishdate":"2021-09-26T00:18:45+09:00","relpermalink":"/post/blog_old_self/","section":"post","summary":"0. はじめに 気が向いたので，自分のことを少しだけ書きたいと思う","tags":["blog"],"title":"自分のこと","type":"post"},{"authors":[],"categories":["blog"],"content":"0. はじめに 私が修士の間，私の研究科の講義はすべてオンライン開講である (他研究科の講義や集中講義は対面開講のものもあったが)．私がこれまでに参加した学会は国内，国際共に全てオンラインであったし，就活も全てオンラインだった．\n今回は，私が1年半体験したオンラインの物事について，私なりに感じたこと (良いと思った点と微妙だと思った点など) を書いていこうと思う．アンケートをとってデータを分析したわけでもなければ，文献を読んだわけでもないので，あくまで個人の感想程度に思っていただけたら幸いである．また，これはあくまでサービスを享受した側，特に学生視点の感想である．オンラインの物事を提供してくださる方には感謝したいと思う．\nきっと来年就職した後もリモートワークが主体だろうなと思うと，少しつらい．\n目次  1 講義 2 学会 3 就活 4 イベント (ライブ等) 5 まとめ  1. 授業 良かった点  移動する必要がないので，講義の空き時間を使って他のこと (e.g. 論文を探す，研究のプログラムを書く) 等ができる． 講義のビデオをアップロードしてくだされば，後から見返してそのときは理解できなくても後で理解することができる．  微妙な点  (特に家で講義を受けている場合，) 自分を律しないとだらけてしまう．特に作業部屋と寝室が同じ部屋であるような場合はベッドに寝転びながら講義を受けることが可能である．  これに関しては自分を律すればどうとでもなるが\u0026hellip;   スライドを使う講義では，理解する前に先に進むことが多い．事前に資料を配布してくれ，なおかつiPad等でそのスライドにメモを取らないと説明に追いつけない．顔を合わせていないので，「質問等ありますか？」という先生のコメントに対して何もコメントできない．  基本的すぎる質問をすることを怖がる自分の問題でもある．   オンデマンド形式の講義では，授業時間の時間分のビデオを用意されてしまうと，見るために講義時間の2 - 3倍程度かかる． オンライン講義に先生も学生も慣れていなかった2020年前期は，課題の多さに苦しんだ．  とっていた講義全てで課題が課されたことがあったため，とても苦しんだ． 成績評価のためには仕方なかったのかもしれない．今は改善されていると思う．   講義資料配布のみの講義の存在． 履修していない講義に潜るのが難しい．  オンライン講義に対する要望 ここでは，私が一番好きだった講義の形式について述べる．それは，iPad 等のタブレットで板書し，それを画面共有する形式である．\nこの形式の利点は，先生の板書のスピードに合わせてメモを取ることができ，書きながら理解できる点である．しかし，この形式でも，過去の板書 (議論) を見返すために画面を戻さないといけないという問題点がある．そのため，数学系の科目でオンライン講義は厳しいのではないか，と考えている．\n余談だが，私は理学研究科の数学の講義を履修していた．この講義は対面開講で，黒板を有効に使った講義であり，内容は難しかったが何とか議論を追うことはできた．やはり，数学系の科目は黒板を使ってくれるとありがたい．\n2. 学会 良かった点  参加費が安い．  (研究費から出してくれるので，それほどメリットは感じない)   移動費がかからない．  上に同じく   練習と発表の環境が同じ．  これはかなりのメリットだと思う．    微妙な点  発表の他の交流が失われているように思う．  発表後の議論等が行いにくい．   学会で発表して質疑応答するのみで，楽しみがない．モチベーションが下がる．  (国内旅行と海外旅行をするチャンスを失って悲しい顔になっている)   発表ツールのトラブルが現地開催のときよりも影響が大きいように思う． 発表の残り時間の伝えるベルをオンラインでも上手く使う方法を教えてほしい． 特に国際学会では，時差の影響が大きい．  私が参加した学会は米国の西海岸の時間で開催されていたので，23時半頃に発表した．眠かった．    個人的な要望 (特に国際) 学会は対面がいいです．\n3. 就活 良かった点  移動費が浮く．それに伴い，就活全体を通じた費用がかなり浮いた． (カメラを入れろという指示がないようなオンラインの説明会であれば) 気楽に参加できる． 色々な企業を見ることが可能． (スライドを使って説明できる企業は) スライドの有効活用が可能． オンラインでも「この人苦手だな」というのは普通にわかる．  これはメリットでもありデメリットでもある．   一日に複数の就活イベントに参加可能．  ただしメンタルにくる．    微妙な点  オンラインインターンは，家にいるのに家に帰りたい状態になる可能性がある．  参加企業の吟味は重要．   オンラインのグループワークには色々と思うところがある．  (そもそも私のような個人プレイをするような人間はグループワークが苦手というのもある) コミュニケーションが一方通行になっているように感じる．誰かが話しているときに他の人が入るのが難しい．   面談の手応えがつかめない． 一度も企業に行かずに内定．おそらく入社式まで一度も企業に行かない可能性がある．  個人的な考え 企業説明会はカメラオフで良いと思うが，その辺どうなのだろうか．\n4. イベント (ライブ等) 良かった点  チケ代が安い． 移動費が浮く． 地理的な制約と時間的な制約があり，絶対に現地には行けないだろうと思ったイベントにも参加することができる．  微妙な点  イベントが終わった後にご飯を食べながら語る楽しみがなくなった．  私のようなぼっちイベンターにとっては良いことだったかもしれない．   良い機器を揃えないと臨場感が出ない． (特にライブの場合，) 家で1人で声を出していると悲しい気持ちになる．  LV もスクリーンに向かって声出してるぞ()    個人的な考え あまり大人数ではないトークイベントはオンライン (Zoomとか) で良いかなとは思う．オンラインライブは判断が難しい．\n今後もオンラインお渡し会が続くのかは気になっている．\n5. まとめ ここまでの私の考えをまとめる．オンラインの物事を体験する側の人間の利点は，主に金銭的，地理的，時間的な制約の解消が挙げられると考える (同じタイムゾーンに属している限り)．そう考えると，対面の講義を行うことができていた時期とオンライン主体の時期で大学の授業料が同じであることに不平不満が出ることは仕方がないと思う．\nオンラインのメリットである地理的な制約の解消と金銭的な制約の解消は大きい．オンラインのデメリットばかり主張して不満を述べても仕方ないので，メリットも考えるようにしたいと思う．\n","date":1632143444,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1632143444,"objectID":"90db0046e1e8ae04883510b154789d8a","permalink":"https://tachibana-ai.netlify.app/post/blog_online/","publishdate":"2021-09-20T22:10:44+09:00","relpermalink":"/post/blog_online/","section":"post","summary":"0. はじめに 私が修士の間，私の研究科の講義はすべてオンライン開","tags":["blog"],"title":"この1年半体験したオンラインの物事についての所感","type":"post"},{"authors":[],"categories":["PC"],"content":"0. はじめに Plotly1 をご存知だろうか．統計や金融，科学等の幅広い分野で用いられている，データの可視化のためのライブラリであり，Python や R などで用いることができる．\nPlotly を用いると，3d plot をとてもきれいにできる．今回は，Plotly を用いて適当なグラフを描画して遊ぼうと思う．\n1. 準備 1.1. インストール Python にインストールするのであれば，pip install すればよい．\npip install plotly  1.2. プロットするもの 最適化のためのテスト関数2 の一部をプロットする．\nここでは，次の2つの関数をプロットする．\nRastrigin function   Definition $$f(\\boldsymbol{x}) = An + \\sum_{i = 1}^n (x_i^2 - A \\cos (2 \\pi x_i)), \\ \\ \\text{where} \\ \\ A = 10.$$\n  Search domain $$ -5.12 \\leq x_i \\leq 5.12, \\ \\ i = 1, \\ldots, n. $$\n  Global minimum $$ f(0, \\ldots, 0) = 0. $$\n  Ackley function   Definition $$ f(x, y) = -20 \\exp \\left(-0.2 \\sqrt{0.5(x^2 + y^2)} \\right)$$$$\\hspace{45mm} - \\exp \\left(0.5 (\\cos 2 \\pi x + \\cos 2 \\pi y)\\right) + e + 20.$$\n  Search domain $$ -5 \\leq x, y \\leq 5. $$\n  Global minimum $$ f(0, 0) = 0. $$\n  2. プロット ここでは，3D Surface Plot を行う．コードの書き方は，3を参考にした．\n 実装した Python のコード ########## Packages ########## import numpy as np import plotly.graph_objects as go from math import e ############################## class Test_function(): \u0026quot;\u0026quot;\u0026quot; The class of test functions \u0026quot;\u0026quot;\u0026quot; def rastrigin(self, x): \u0026quot;\u0026quot;\u0026quot; Rastrigin function \u0026quot;\u0026quot;\u0026quot; val = 10.0*x.size for i in range(x.size): val += x[i]**2 - 10*np.cos(2*np.pi*x[i]) return val def ackley(self, x): \u0026quot;\u0026quot;\u0026quot; Ackley function \u0026quot;\u0026quot;\u0026quot; val = -20*np.exp(-0.2*(np.sqrt(0.5*(x[0]**2 + x[1]**2)))) val += -np.exp(0.5*(np.cos(2*np.pi*x[0]) + np.cos(2*np.pi*x[1]))) val += e + 20 return val class Plot_func(): \u0026quot;\u0026quot;\u0026quot; The class to plot functions \u0026quot;\u0026quot;\u0026quot; def func_value(self, func, x_range, y_range): \u0026quot;\u0026quot;\u0026quot; get the value of the function (2 dim) Input: func: function x_range, y_range: numpy linspace Output: X, Y: numpy meshgrid Z: corresponding func value \u0026quot;\u0026quot;\u0026quot; X, Y = np.meshgrid(x_range, y_range) Z = np.empty_like(X) for i in range(len(X)): for j in range(len(X[i])): vec_x = np.array([X[i][j], Y[i][j]]) Z[i][j] = func(vec_x) return X, Y, Z def plotly_surface_contour(self, func, x_range, y_range): \u0026quot;\u0026quot;\u0026quot; plot the surface of the function using plotly, https://plotly.com/python/3d-surface-plots/ \u0026quot;\u0026quot;\u0026quot; ##### get the value of the function ##### X, Y, Z = self.func_value(func, x_range, y_range) ######################################### ##### plot ##### fig = go.Figure(data=[go.Surface(z=Z, x=X, y=Y)]) fig.update_traces(contours_z=dict(show=True, usecolormap=True, highlightcolor=\u0026quot;limegreen\u0026quot;, project_z=True)) fig.update_layout(autosize=False, scene_camera_eye=dict(x=1.87, y=0.88, z=-0.64), width=500, height=500, margin=dict(l=65, r=50, b=65, t=90)) fig.show() ################ ##### instance of the class ##### test = Test_function() pf = Plot_func() ################################# ##### Plot Rastrigin function ##### x = np.linspace(-5.12, 5.12, 100) y = np.linspace(-5.12, 5.12, 100) pf.plotly_surface_contour( func=test.rastrigin, x_range=x, y_range=y) ################################### ##### Plot Ackley function ##### x = np.linspace(-5, 5, 100) y = np.linspace(-5, 5, 100) pf.plotly_surface_contour( func=test.ackley, x_range=x, y_range=y) ################################   また，このコードを Jupyter notebook 形式にして html に変換したものを以下のリンクに置いている (表示に少し時間がかかる)．\n 変換した Jupyter Notebook  関数の表面がどうなっているか可視化されていて面白いと思う．また，動かすこともできるのが良い．\n3. まとめ Plotly は面白いので，詳しくなりたい．\n  plotly Graphing Libraries, accessed on 2021.9.17.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Test function for optimization (en: Wikipedia), accessed on 2021.9.17.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n plotly Graphing Libraries, 3D Surface Plots in Python, accessed on 2021.9.17.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":1631885301,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1632142401,"objectID":"60fb5a87ae9d3e677929d3c44c3b275f","permalink":"https://tachibana-ai.netlify.app/post/python_plotly/","publishdate":"2021-09-17T22:28:21+09:00","relpermalink":"/post/python_plotly/","section":"post","summary":"0. はじめに Plotly1 をご存知だろうか．統計や金融，科学等の幅広い分野","tags":["Python"],"title":"PythonのPlotlyで遊んだ","type":"post"},{"authors":[],"categories":["blog"],"content":"0. はじめに 自分の過去ツイをさかのぼっていたら，このようなツイートを見つけた．\n何もできてなさすぎて研究室にいるの辛くなって帰っちゃった\n\u0026mdash; 橘 あい (@tcbn_ai) October 31, 2019  これは私がB4で研究を初めて数ヶ月経過した頃，何も上手くいかずに辛くなっていたときのツイートである．今回は，このときのことを思い出して少し文章を書きたいと思う．\nあくまで自分が自分の努力不足等から来る不甲斐なさで勝手に辛くなって，鬱の一歩手前くらいになっていただけである．最後の方は少し自慢も入っているが，許してほしい．\n目次  1 そのとき起こったこと 2 原因 3 辛くなった後の対処 4 その後のこと 5 教訓  1. そのとき起こったこと 当時の自分は，周囲との比較をしがちだった (今もそうであるが，当時はそれが顕著だった)．研究室の同期が結果を出して論文を執筆したり，卒論を書き始めている中，自分だけ何もできておらず (そもそも何をすれば良いかわからなくなり)，自分で勝手に精神的に追い込まれていった．\n家では何もできず，研究室に行っても何もできず，研究室内でどうしようかと悩んでいたとき，ふと糸が切れたような感覚に陥り，体に力が入らなくなった．研究室の自分の居場所がどこにもないような気がしてきて，研究室にいるのが苦しくなってきて，家に帰ってしまった．\n家に帰り1人になるとさらに心が苦しくなり，心臓が冷たくなる感覚に陥った．このときは (おそらく) 人生で一番精神的に病んでおり，鬱の一歩手前のようになっていたと思う．2日ほど引きずっていた．\n2. 原因 何故このようなことになったのか，原因として考えられることを挙げる．\n過去を振り返って原因として考えられること  研究室でこれまで誰も取り組んでいなかったテーマに取り組もうとした 自分で論文を探そうとしなかった (自業自得) 論文の探し方がよくわかっていなかった (自業自得) 自分の興味があることがわからなくなっていた (自業自得) その結果，自分が何をしたくて何をすれば良いかわからなくなった (自業自得)  振り返ると自業自得なことばかり出てくる．ダメな学生の代表例のような感じである．\n研究室で誰も取り組んでいなかった研究テーマに取り組もうとしていた．指導教員が渡してくれた論文を読んではみたものの，そこから自分の研究にどのようにつなげるか，全く分からなかった．自分で論文を探していなかったのだから当然である．\nどうすれば良いか分からず，自分が選んだテーマは本当に自分がやりたかったテーマだったのだろうか，と思うようになっていった．そこで論文を探して何となく読んだが，自分のしたい研究がわからなくなっていった．\n結果，追い込まれていって (自分で自分を追い込んでいって)，何もできなくなってしまった．完全に自業自得であり，今振り返っても何も言えない．\n今思うと，まだ研究室に普通に行けた時期だったのが良かったと思う．1年ずれて家で研究をしなければならなかった時期であれば，おそらく耐えられなかっただろう．\n3. 辛くなった後の対処 辛くなった日 辛くなった日とその翌日は，家に引きこもって布団に潜っていた．一日中布団の中で過ごし，酒を飲んでアニメを見て寝る，という生活をした．翌日には鬱状態ではなくなっていたが，今思うと躁だったのかもしれない．\nちなみに，見たアニメは『荒ぶる季節の乙女どもよ。』である．このアニメの「ここでは今10個のおっぱいが揺れてる」というセリフでとても元気が出た．\nその後の対処 とりあえず無理はしないようにした．やっていて分からなくなったら考えた過程を示した上で先生に相談するようにした．\n(何故か) 卒論が終わるまで毎日魔剤を飲むようになってしまった．\n4. その後のこと 1月中旬頃，一応卒論に載せられるだけの結果は出た．修士からは別のことをやろうと思い，発表後のミーティングで先生に相談した．先生から，テーマを変えるなら，今の時点でやったことを論文として書くか発表してからにしよう，というお言葉をいただいたので，論文として書くことにした．今思うと，(研究内容と結果に納得はしていなかったが，) このとき論文として書いたことが良かったように思う．卒論では2つの内容に取り組んでいたが，どちらも英語の論文として執筆し， (国内の論文誌だったが) 採択された．\nM1の頃は，研究をB4の頃以上に頑張ったと思う (当然)．面白そうな研究に取り組んでいる大学のグループを見つけ，そのグループで出している論文と関連する研究の論文を読み，取り組んでみたいことをいくつかまとめ，先生と相談した．色々やっていたらM1の6月くらいに面白い結果が出て，それを国際の論文誌と国際会議に投稿したらどちらにも採択された，ということがあった．修論がM1のうちに書けてしまう状態になった．気付いたら鬱の症状も躁の症状もなくなっていたようである．\nその後，国内会議に参加したり (オンライン)，採択された国際会議に参加したり (オンライン)，英語で論文を書いたり，その論文がrejectされたりした．最近は，対面の学会に参加したかったな，と思いながら毎日を過ごしている．\n5. 教訓 過去に戻れるとしたら自分に言いたいこと  論文の探し方と読み方をB4の夏までに覚える． 周囲との比較は (なるべく) しない． 自分で自分を追い込まない． 思い込みをしない． 辛くなる前に相談する．特に，あまり対面が推奨されない現在は通話でもビデオ通話でも良いと思う．人と話すのが良いと思う． どうしても辛くなったらとことん落ち込み，何もしない．たぶん落ち込むときはとことん落ち込んだほうが戻るのが早い．  良かったこと  先生が見捨てないでいてくれたこと． 先生が助言をたくさんくれる方だったこと． 先生が発表する機会をたくさん見つけてくれるような方だったこと． 逃避できる趣味があったこと． (研究内容がどうであれ) 論文として書く機会をもらったことと，その機会に論文を書いたこと．  反省点  先生に頼りすぎてしまっているように感じている． 相談しすぎていると思う．  ","date":1631094370,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1631094370,"objectID":"4706f84fd43f7676f362da2847e51680","permalink":"https://tachibana-ai.netlify.app/post/blog_lab/","publishdate":"2021-09-08T18:46:10+09:00","relpermalink":"/post/blog_lab/","section":"post","summary":"0. はじめに 自分の過去ツイをさかのぼっていたら，このようなツイ","tags":["blog"],"title":"B4の頃に研究が辛かったときとその後の話","type":"post"},{"authors":[],"categories":["PC"],"content":"0. はじめに 研究室に残す予定のものをまとめているときに，色々と参考にしたウェブサイトや記事，使ったツールなどを記録しておこうと思った．\n目次  1 Ubuntu関連 2 Python関連 3 Docker関連 4 進捗管理関連 5 文献管理関連 6 論文関連 7 プレゼン関連 8 まとめ  1. Ubuntu関連  金子邦彦研究室  OSやアプリケーションのインストールの方法がとても丁寧にまとめられている (インストール，運用)． 個人的には，新しいアプリケーションを使おうとするときに一番苦労するのがインストールなので，このように丁寧にまとめられていてとても助かった．   stackoverflow  UbuntuなどのオープンソースのOSを使っているときは，エラーが出た際のトラブルシューティングは自分で何とかしなければならない． 出力されたエラーログを stackoverflow で検索すると，大抵自分と同じエラーが出た人の質問が出てくるので，かなり参考になる． また，プログラムを書いているときに，パッケージの依存関係のエラーが出ることがあるが，このようなときも同様にエラーログを調べられる．   Linux Fan Info  Ubuntuを使うときにインストール直後にやった方が良いことや，パッケージのインストールの方法などが日本語で説明されているのが良い． 特にUbuntuを使い始めた頃はかなり役立った．    2. Python関連  Python 数値計算プログラミング  数値計算のためのパッケージの解説がとても丁寧なのが良い． Matplotlibの解説もあるのが最高．   note.mkmk.me Python関連記事まとめ  Pythonの基本的な使い方，特に組み込み関数の使い方が丁寧にまとめられているのが良い．    3. Docker関連  Dockerで環境構築するための最低限の概念理解  Dockerの概念を理解するための助けになった． 図を用いて説明してくれているので，イメージしやすい．   いまさらだけどDockerに入門したので分かりやすくまとめてみた  とても丁寧にまとめられている． コマンドの実行例を載せてくれているので，したい処理に対してどのようなコマンドを実行すればよいかわかる．   VS CodeでDocker開発コンテナを便利に使おう  VSCodeの拡張機能の使い方が書いている． この拡張機能を使うと，コンテナ内の開発をローカルで行っているようにできる (remote sshとかremote wslみたいな感じ) ので，おすすめ．    4. 進捗管理関連  Git, GitHub  書いているコードの管理や執筆している論文の管理． 自宅のPCと研究室内のPCでのデータの同期にも使える． VSCodeやAtomの拡張機能を使えばリポジトリの管理が楽．   Evernote  私は各週や日のタスクや目標をチェックボックスに書き，やる必要があることと無理してやらなくてもいいことを区別するために使っていた． 複数端末でログインできるのも良い (アプリをダウンロードせずブラウザから入れば端末制限に引っかからない)．    5. 文献管理関連  Mendeley  ある程度の容量を無料で使えるのが強い． 引用のためのbibファイルを作るときに楽．   PaperShip  iPadで論文を読むときに便利． Mendeleyとのアカウント連携ができる．   BibTeX entry from URL  Chromeの拡張機能で，URLからbibtexの形式を取得できるもの． 記事やウェブサイトを引用するときに重宝する．    6. 論文関連  minoblog  研究の方向性に迷っていたときにこのブログを読み，非常に感銘を受けた． 特に以下の2つの記事はおすすめ．  【超重要】研究室に配属された学生が最初に学ぶべき論文の読み方【4つのポイント】 【なぜ論文を読むのか？】研究におけるメリットと重要性【アイデアは知識から】     Seitaro Shinagawa, 2020.06.01 M1勉強会 論文の読み方・書き方・研究室の過ごし方  論文の読み方に関しては，特に「速読」と「精読」の部分が素晴らしいと思った．本当に参考になった． 論文の書き方もとても参考になる．   参考文献の書き方  恥ずかしながら，私はM1まで教授に参考文献の書き方を直されていた． このサイトは，参考文献の書き方のルールがまとめられていて，論文を執筆するときの参考になった．   Grammarly  Googleアカウントがあれば使うことができる優秀なスペルチェッカー． 自分で書いているときにはなかなか気付けないスペルや文法のミスを指摘してくれるので，論文執筆時に重宝する． 専門用語もミスとして指摘することがあるが，それ以外は素晴らしいツールだと思う．   DeepL  論文執筆時に英語の表現が思いつかないときや，論文を読んでいるときに意味がつかめないときにかなり使える． 精度が良い． 論文をDeepLを使って書くことについて色々言われているが，全部DeepLを使うのではなく，どうしても思いつかない表現で使うというような使い方をすれば良いのではないだろうか． Grammarlyと組み合わせるとある程度マシな英語が書けると思う．    特に上2つのような素晴らしいブログやスライドを見ると，自分が底辺に思えてきます．\n7. プレゼン関連  研究発表のためのプレゼンテーション技術  プレゼンを構成する要素が分かりやすく書かれている． 私はこの記事を参考にスライドの構成を考えている．   わかりやすい研究発表をするための3つの手順【スライド・話し方】  minonさんの記事． スライドの作り方の他，発表の仕方などもとても参考になる．   OBS Studio  最近はオンライン学会が増えてきたり，学会発表がビデオ投稿のみであるものが多くなったりしている．また，学会発表の練習のために，自分の発表を録音して聞くことが有効だと考えられる (これはminonさんの記事でも挙げられている)． 発表の録画に役立つのがOBS Studioである．録画が非常に容易に行えるのが良い．    8. まとめ この記事では，研究室に入った後から今までお世話になっている神のウェブサイトや記事，ツールをまとめた．他にも良いものがある (見つける) と思うので，気付いたらこの記事も更新していきたいと思う．\n","date":1630744006,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1630744006,"objectID":"5c2518b8d08676bafb74a33efa188271","permalink":"https://tachibana-ai.netlify.app/post/good_references/","publishdate":"2021-09-04T17:26:46+09:00","relpermalink":"/post/good_references/","section":"post","summary":"0. はじめに 研究室に残す予定のものをまとめているときに，色々と","tags":["PC","Ubuntu","Docker"],"title":"研究室に入った後今までお世話になっている神サイト/ツールたち","type":"post"},{"authors":[],"categories":["Docker"],"content":"0. はじめに RとRStudioもDocker containerとして使えれば少しめんどくさかったインストール工程 (Ubuntu20.04にRとRStudioをインストールする) をやらなくても良いのではないだろうか，と考えた．\n調べたところ，RockerというものでRStudio ServerをDockerで使えるらしい1．\n今回は備忘録として，Rockerを使ったときのメモを残すことにした．\n1. 準備 最低限必要なことは，Docker Engineのインストールである．UbuntuへのDocker Engineのインストールは以前記事にした2．WindowsやMacについては他にも様々な記事があると思う．\n2. 使い方 今回は，rocker/tidyverse を使う．おそらくrocker/verse なども同様の方法でできると思う．\nまず，イメージファイルをローカルなマシンに落とす．これは，docker pull コマンドを用いればよい．\ndocker pull rocker/tidyverse  イメージファイルがあるかどうかは，次のコマンドで調べられる．\ndocker image ls | grep tidyverse  例えば，私のマシンで実行すると以下のように出力された．確かに rocker/tidyverse のイメージファイルがあることがわかる．\ntcbn@tcbn-V530-15ICR:~$ docker image ls | grep tidyverse rocker/tidyverse latest 63d48e0c8338 9 days ago 2.41GB  イメージファイルがある状態で，以下のように docker run コマンドを実行すればバックグラウンドでRStudio Serverが立ち上がる．\ndocker run --rm -d -p 8787:8787 -e PASSWORD=[yourpasswordhere] -v [mountdir]:/home/rstudio rocker/tidyverse  ここで，それぞれのオプションは以下のようなものである．\n --rm: コンテナの終了後にコンテナを削除する． -d: 端末から切り離してバックグラウンドで実行する． -p: ポートマッピングを設定する． -p [port number (host)]:[port number (container)]   -e: 環境変数を設定する． -v: ボリュームをマウントする． -v [host directory]:[container directory]    このコマンドの実行後，http://localhost:8787/ にアクセスすればユーザ名とパスワードの入力画面が出てくる．そこで，ユーザ名に rstudio を入力し，パスワードに -e で指定したパスワードを入力する．\n実際に私のマシンでやってみる．~/r_sample というディレクトリをマウントする．\ntcbn@tcbn-V530-15ICR:~/r_sample$ ls requirements.r test.r tcbn@tcbn-V530-15ICR:~/r_sample$ docker run --rm -d -p 8787:8787 -e PASSWORD=mypassword -v $(pwd):/home/rstudio rocker/tidyverse 83136d6a3c656386e74d14899e0ad55d4b10603ade1bad0dfe7dbde88e07e75c  この状態で，http://localhost:8787/ にアクセスすると，以下のようにユーザ名とパスワードの入力画面が出てくる．\n   ユーザ名とパスワードの入力画面  ユーザ名に rstudio，パスワードに指定したパスワードを入力し，サインインすると，次のような画面になる．\n   RStudio Server  先程見た~/rsample がマウントされていることがわかる．あとは必要なパッケージをインストールするなどしたら使えるようになる．\nコンテナ内のRStudio Server側でrのソースコードを書き換えるとそれがマウントしたローカルなディレクトリにも反映される．\n今起動しているDocker containerを docker ps コマンドで見ると，\ntcbn@tcbn-V530-15ICR:~/r_sample$ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 83136d6a3c65 rocker/tidyverse \u0026quot;/init\u0026quot; 7 minutes ago Up 7 minutes 0.0.0.0:8787-\u0026gt;8787/tcp, :::8787-\u0026gt;8787/tcp inspiring_nash  となっている．コンテナを docker stop コマンドで終了した後に docker ps -a コマンドでコンテナ一覧を見る．\ntcbn@tcbn-V530-15ICR:~/r_sample$ docker stop inspiring_nash inspiring_nash tcbn@tcbn-V530-15ICR:~/r_sample$ docker ps -a | grep tidyverse  --rm オプションで指定したとおり，終了後のコンテナが削除されている．\n3. まとめ 今回は，RStudio ServerをDockerで使うときのやり方を簡単にまとめた．例えば，rocker/tidyverse をイメージファイルに指定してDockerfileを作り，使いやすい環境を作るといったこともできる．\n  R Docker tutorial\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Ubuntu20.04にDocker Engineをインストールする\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":1630282539,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1630282539,"objectID":"f99b97064d034698d54fd312d7c42b75","permalink":"https://tachibana-ai.netlify.app/post/docker_r/","publishdate":"2021-08-30T09:15:39+09:00","relpermalink":"/post/docker_r/","section":"post","summary":"0. はじめに RとRStudioもDocker container","tags":["Docker","R"],"title":"RStudio ServerをDockerで使うときのメモ","type":"post"},{"authors":[],"categories":["blog"],"content":"0. はじめに 最近自分の生活について振り返る機会があった．今回は生活に必要だなと思ったものを何個か挙げていくことにする．\n私は理系 (情報系? 制御系?) の大学に進学し，そのまま同じ大学の研究科に進学した．私が大学入学時に欲しかった情報を書くことにする．\n目次  1 勉強・研究 2 日常生活 3 まとめ  1. 勉強・研究 勉強と研究に必要だと思ったものをいくつか挙げる．\n(ある程度スペックの良い) ノートパソコン 学部で使うノートパソコンは最低限，メモリ8GBとSSD256GBは欲しい．特にWindowsを使うことを考えると，徐々に必要なマシンスペックが上がっている中で，比較的快適に使うことのできるスペックの下限がこの程度だと思う．欲を言えば，メモリ16GB以上，SSD512GB以上は欲しい．\n一般にノートパソコンの寿命は4年ほどと言われている．院進する予定の人であれば，学部4年もしくは修士1年で買い直すのが良いと思う (研究室で買ってくれるかもしれないが)．そのときはスペックを盛ってもいいと思う．計算を回し続けることが必要な場合は，デスクトップPCを買っても良いかもしれない．私は既成品のデスクトップPCを買って色々魔改造をした．\n SSD換装． WindowsとUbuntuのデュアルブート． GPU搭載．  ディスプレイ 私は1人暮らしにTVは不要だと思っている．集金が鬱陶しいし，ニュースを見る分にはインターネットで事足りるし．私はTVを買うくらいなら，モニターを買うのが良いと思っている．23インチのモニターも1万円代で買うことができる．\n これは私が買ったモニターである．デュアルモニターにすると作業効率が3倍くらいになると思う (と実感している)．特に，公式ドキュメントを横に置きながらプログラムを書くときなどに重宝している．\nキーボード ノートパソコンのキーボードは打ちづらいと思ったことはないだろうか．私は何度も感じていたが，我慢して使っていた．\nキーボードの打ちやすさも作業効率に大きく関わってくる (と思っている)．キーボードに5千円くらい課金して作業効率が上がるなら，買うのが良いと思う．私は最近キーボードを購入したが，何故今まで購入しなかったのか，と後悔している．\n これは私が最近買ったキーボードである．テンキーレスでコンパクト，打ちやすい，慣れている日本語配列，といった利点からかなり重宝している．ノートパソコンにUSB接続して使うこともできるので，かなり良い．\nノートパソコンスタンド ノートパソコンを使っていて，画面が見づらいと思うことがあると思う．例えば机にノートパソコンを置いて使うとすると，視線は下向きになりがちである．\nその見づらさを解消してくれるものがノートパソコンスタンドである．M1のときにドクターの先輩に紹介してもらったが，ノートパソコンの画面が見やすくなり，かなり良い．\n これは私が買ったノートパソコンスタンドである (今は在庫切れだが)．ノートパソコンを置くだけでなく，本を置くときにも使えるのが良い．\n余談だが，就職活動のオンライン面接では，\u0026ldquo;上から目線\u0026rdquo; にならないようになどという \u0026ldquo;マナー\u0026rdquo; がある．このようなノートパソコンスタンドを使えば，このマナーに違反することはないだろう．\nヘッドセット COVID-19の影響で，講義や研究活動，就職活動におけるオンラインでの交流が増え，イヤホンを付ける機会が増えたように思う．イヤホンを長時間付けていると耳が痛くならないだろうか．\nヘッドセットはそんな悩みを解決してくれると思う．特にゲーミングヘッドセットはデザイン性に優れ，マイクの性能が優れているので良いと思う．\n 私はイヤホン専門店でこのヘッドセットを見つけ，つい買ってしまった．買って後悔はしていない．\n私はこのヘッドセットを就職活動でも利用していた．就活サイトなどでは，「イヤホンやヘッドホンはシンプルなものが良い」であったり，「ヘッドセットはおすすめしない」などと言われているが，就職活動の説明会や面接でこのヘッドセットを付けて行っても何も言われなかったし，むしろ話を展開するために使えたので，このヘッドセットを付けていて良かったと思っている．\niPad オンライン講義になり，講義資料もPDF形式で配布するといった講義も多いように思う．講義ノートを取る際，iPadを使うとかなり良かった．これは様々な人がYouTubeなどで紹介しているので，私から特に追加で言うことは少ない．\n私が思うiPadを使う利点をいくつか挙げる．\n 講義ノートをiPadのアプリで取ることができる．つまり，講義ノートが1つのiPadで完結する． ペンシルが優秀． 他のタブレットよりも操作性や性能が良い．  私は研究室の予算で買ったiPadを使っているので，卒業のタイミングで返す必要がある．社会人になって給料が入ったらすぐ買いたいと思っている．\n私はタブレットでノートを取るのは良いと思っているが，タブレットで専門書を読むのは好きではない．同時に複数のページを開くことが難しいということが主な理由である．特に専門書では，定義を振り返って読むことが多く，一度に複数のページを開きたいということが多い．現状電子書籍でこれを行うのは難しい．やはり専門書は紙のものに限ると思う (たくさん読む論文は別．印刷した論文が溜まるのが鬱陶しいので)．\n2. 日常生活 私はズボラなので，家事はめんどくさいと感じるタイプである．また，汚れている水回りに触れるのは嫌だと感じるし，虫は大の苦手である．しかし，1人暮らしをする以上，ある程度は我慢しなければならない．\nそんな私が重宝しているものをいくつか挙げる．\n使い捨てのダスター (特にキッチンの) 水回りの掃除で，ステンレスが汚れていたり濡れていたりするときなどに，使うことが多い．大量にあるから汚れたら捨てれば良く，汚くなった水回りの掃除に重宝する．\nホームセンターなどに安く売られているので，足りなくなったら買うようにしている．\n使い捨てのゴム手袋 久しぶりに掃除をするときに，汚れている水回りは素手で触りたくない．そんなときは，使い捨てのゴム手袋をすれば良い．いくら汚れていても素手では触れないからまだマシであろう．\n殺虫剤 家の中に虫が出ることもあるだろう．小さな虫なら良いが，大きな虫は見るだけで気持ち悪いし，触りたくない．そんなときは遠慮せずに殺虫剤を使うと精神衛生に良いだろう．キンチョールあたりは強力なので，ホームセンターあたりで買って常備しておくと良いだろう．\n3. まとめ 今回は，大学入学時に知っておきたかった，大学生活に必要だと思うものについてまとめた．私と同じような学科の人にはもしかしたら参考になるかもしれない．\n","date":1630074720,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1630074720,"objectID":"cda15e6157cbecd5009dfc9327c3496c","permalink":"https://tachibana-ai.netlify.app/post/requirements/","publishdate":"2021-08-27T23:32:00+09:00","relpermalink":"/post/requirements/","section":"post","summary":"0. はじめに 最近自分の生活について振り返る機会があった．今回は","tags":["blog","PC"],"title":"大学生と大学院生のとき生活に必要だと思ったもの","type":"post"},{"authors":[],"categories":["Optimal control"],"content":"0. はじめに 最適制御問題: 最適制御問題の数値解法 のdirect single shootingを実装したものを載せる．\n1. コード ########## Packages ########## from casadi import * import numpy as np import os import matplotlib.pyplot as plt ############################## ########### plt ########## plt.rcParams[\u0026quot;font.family\u0026quot;] = \u0026quot;serif\u0026quot; # fonts plt.rcParams[\u0026quot;font.serif\u0026quot;] = \u0026quot;Times New Roman\u0026quot; plt.rcParams[\u0026quot;font.size\u0026quot;] = 18 plt.rcParams[\u0026quot;mathtext.cal\u0026quot;] = \u0026quot;serif\u0026quot; plt.rcParams[\u0026quot;mathtext.rm\u0026quot;] = \u0026quot;serif\u0026quot; plt.rcParams[\u0026quot;mathtext.it\u0026quot;] = \u0026quot;serif:italic\u0026quot; plt.rcParams[\u0026quot;mathtext.bf\u0026quot;] = \u0026quot;serif:bold\u0026quot; plt.rcParams[\u0026quot;mathtext.fontset\u0026quot;] = \u0026quot;cm\u0026quot; ###########################  class Direct_single_shooting(): \u0026quot;\u0026quot;\u0026quot; Solve optimal control problem numerically using direct single shooting method. \u0026quot;\u0026quot;\u0026quot; def __init__(self, T, N): self.T = T # time horizon self.N = N # number of control intervals def model_equation(self, x0, x1, u): \u0026quot;\u0026quot;\u0026quot; model equation dx_0/dt = (1 - x_1^2)x_0 - x_1 + u dx_1/dt = x_0 \u0026quot;\u0026quot;\u0026quot; return vertcat((1 - x1**2)*x0 - x1 + u, x0) def stage_cost(self, x0, x1, u): \u0026quot;\u0026quot;\u0026quot; stage cost L(x, u) = x_0^2 + x_1^2 + u^2 \u0026quot;\u0026quot;\u0026quot; return x0**2 + x1**2 + u**2 def discrete_dynamics(self, x0, x1, u): \u0026quot;\u0026quot;\u0026quot; Formulate discrete time dynamics \u0026quot;\u0026quot;\u0026quot; x = vertcat(x0, x1) xdot = self.model_equation(x0, x1, u) L = self.stage_cost(x0, x1, u) # CVODES from the SUNDIALS suite dae = {'x': x, 'p': u, 'ode': xdot, 'quad': L} opts = {'tf': self.T/self.N} F = integrator('F', 'cvodes', dae, opts) return F def nlp(self, x0, x1, u, xinit): \u0026quot;\u0026quot;\u0026quot; Formulate and solve the NLP Given - x, u: MX.sym - xinit: initial value of x \u0026quot;\u0026quot;\u0026quot; # discrete time dynamics F = self.discrete_dynamics(x0, x1, u) # empty w = [] w0 = [] lbw = [] ubw = [] J = 0 g = [] lbg = [] ubg = [] # Formulate the NLP Xk = MX(xinit) for k in range(self.N): # New NLP variable for the control Uk = MX.sym('U_' + str(k)) w += [Uk] lbw += [-1] # lower bound of u ubw += [1] # upper bound of u w0 += [0] # Integrate till the end of the interval Fk = F(x0=Xk, p=Uk) Xk = Fk['xf'] J = J + Fk['qf'] # Add inequality constraints g += [Xk[0]] lbg += [-0.25] # lower bound of x ubg += [inf] # upper bound of x # Create an NLP slver prob = {'f': J, 'x': vertcat(*w), 'g': vertcat(*g)} solver = nlpsol('solver', 'ipopt', prob) # Solve the NLP sol = solver(x0=w0, lbx=lbw, ubx=ubw, lbg=lbg, ubg=ubg) return sol def plot_solution(self, x0, x1, u, xinit): \u0026quot;\u0026quot;\u0026quot; Plot the solution Given - x, u: MX.sym - xinit: initial value of x \u0026quot;\u0026quot;\u0026quot; F = self.discrete_dynamics(x0, x1, u) sol = self.nlp(x0, x1, u, xinit) u_opt = sol['x'] x_opt = [xinit] for k in range(self.N): Fk = F(x0=x_opt[-1], p=u_opt[k]) x_opt.append(Fk['xf'].full()) x0_opt = [r[0] for r in x_opt] x1_opt = [r[1] for r in x_opt] tgrid = [self.T/self.N*k for k in range(self.N + 1)] fig = plt.figure(figsize=(10, 7.5)) ax = fig.add_subplot(1,1,1) ax.plot(tgrid, x0_opt, '--', label=r'$x_0$') ax.plot(tgrid, x1_opt, '-', label=r'$x_1$') ax.step(tgrid, vertcat(DM.nan(1), u_opt), '-.', label=r'$u$') ax.legend(loc='best') ax.set_xlabel(r'$t$'); ax.set_ylabel(r'$x_0, x_1, u$') ax.set_xlim([0, self.T]) ax.grid(True) plt.show()  ########## Parameters ########## T = 10 N = 20 ################################ ########## Instance ########## direct_single_shooting = Direct_single_shooting(T=T, N=N) ############################## ########## figure ########## x0 = MX.sym('x0') x1 = MX.sym('x1') u = MX.sym('u') xinit = [0, 1] direct_single_shooting.plot_solution(x0=x0, x1=x1, u=u, xinit=xinit) ############################  ","date":1630073759,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1630073759,"objectID":"9619547c84a757227e4260c1fb8631b4","permalink":"https://tachibana-ai.netlify.app/post/optimal_control_direct_method/","publishdate":"2021-08-27T23:15:59+09:00","relpermalink":"/post/optimal_control_direct_method/","section":"post","summary":"0. はじめに 最適制御問題: 最適制御問題の数値解法 のdirect","tags":["Optimal control","Python"],"title":"最適制御問題: 直接法 (プログラム)","type":"post"},{"authors":[],"categories":["Optimal control"],"content":"0. はじめに 先日，6章の内容をまとめた (最適制御問題: 動的計画法と最小原理)．7章の数値解法のあたりでかなり詰まってしまっていた．今回は他の文献も用いてまとめたいと思う．\n理解が間違えている箇所もあるかもしれないので，ミスに気付いたら修正したいと思っている．\n0.1. 目次  1 導入  1.1 最適制御のアプローチ   2 直接法  2.1 Direct Single Shooting 2.2 Collocation 2.3 Direct Multiple Shooting   3 実装 4 手書きメモ 5 まとめ  1. 導入 ここで扱う最適制御問題は，以下の形式をしているものとする．\n$$\\underset{x(\\cdot), u(\\cdot)}{\\mathrm{minimize}} \\ \\ \\varphi(x(T)) + \\int_0^T L(x(t), u(t)) dt \\tag{1}$$ subject to $$\\begin{cases} x(0) - x_0 = 0, \u0026amp; (\\text{initial value}) \\\\ \\dot{x}(t) - f(x(t), u(t)) = 0, \\ \\forall t \\in [0, T], \u0026amp; (\\text{state equation}) \\\\ h(x(t), u(t)) \\geq 0, \\ \\forall t \\in [0, T], \u0026amp; (\\text{path constraints}) \\\\ r(x(T)) = 0. \u0026amp; (\\text{terminal constraints}) \\end{cases}$$\n例えば，ロボットがトルクや角度に関する制約を満たしながらある所望の終端状態になるように動作するというものはこのような問題として記述される．\n1.1. 最適制御のアプローチ 最適制御問題の数値解法として，主に以下の3つのアプローチがある1．\n Dynamic programming Indirect methods Direct methods  Dynamic programming (動的計画法)  最適性の原理を使用して任意の時刻$t$および任意の初期状態$x_0$に対するフィードバック制御を再帰的に計算する． 連続時間の場合，Hamilton-Jacobi-Bellman (HJB) 方程式という状態空間上の偏微分方程式が導かれる． 近似的に数値計算する方法はあるが，「次元の呪い」によって小さい次元に制限される．  Indirect methods (間接法)  無限次元の最適化の必要条件を使用して，常微分方程式の初期値境界値問題を導出する． \u0026ldquo;first optimize, then discretize\u0026rdquo; 変分法 初期値境界値問題を解くのが難しい．  Direct methods (直接法)  無限次元の最適化問題を有限次元の非線形計画問題に変換し，非線形計画問題を数値的に解く． \u0026ldquo;first discretize, then optimize\u0026rdquo; 制御軌道の有限次元のパラメータ化に基づく．  実世界への実装ではdirect methodsが広く用いられている．次節でdirect methodsについて簡単にまとめる．\n2. 直接法 直接法は，無限次元の最適制御問題 (1) を有限次元の非線形計画問題 (NLP) $$\\underset{w}{\\text{minimize}} \\ a(w) \\ \\ \\text{subject to} \\ b(w) = 0, \\ c(w) \\geq 0 \\tag{2}$$ に帰着させる方法である．ただし，$w$は最適化の自由度を表す有限次元ベクトル，$a$ は微分可能関数 (スカラー)，$b, c$は微分可能関数 (ベクトル) である． 直接法はまず制御軌道をパラメータ化するが，状態軌道の処理方法は\u0026quot;sequential\u0026quot; approach と \u0026ldquo;simultaneous\u0026rdquo; approachに分けられる．\nSequential approach  状態の軌道$x(t)$は制御入力$u(t)$と初期状態$x_0$の陰関数とみなされる． (例) Direct single shooting. ODE solverによるforward simulation. Simulationとoptimizationのiterationsは順番に進む． 離散化された制御入力が得られる．  Simultaneous approach  状態の軌道$x(t)$をNLP内の最適化変数として記述し，ODEモデルを表す等式制約を追加する． Simulationとoptimizationは同時に進行する． 制御入力の軌道に対応する状態の軌道がNLPの解として得られる． (例) Direct collocation, direct multiple shooting.  次に，直接法の代表的な3つの手法，(i) direct single shooting, (ii) direct collocation, (iii) direct multiple shooting の考え方についてまとめる．\n2.1. Direct Single Shooting Single shootingではまず，制御入力を離散化する．評価区間$[0, T]$を$0 = t_0 \u0026lt; t_1 \u0026lt; \\cdots \u0026lt; t_N = T$の$N$個に分割し，制御入力$u(t)$を $$u(t) = q_i \\ \\ \\text{for} \\ \\ t \\in [t_i, t_{i + 1}]$$ のようにpiecewise constantになるようにする．つまり，$u(t)$は制御パラメータ$q = (q_0, q_1, \\ldots, q_{N - 1})$にのみ依存し，$u(t; q)$と書くことができる．よって，初期値問題 $$x(0) = x_0, \\ \\dot{x}(t) = f(x(t), u(t; q)), \\ \\ \\forall t \\in [0, T]$$ を考え，$t \\in [0, T]$における状態$x(t)$を従属変数として$x(t; q)$と表す．Direct single shootingは例えば下の図のように表される．\n   Direct single shootingの例  Semi-infinite problemにならないようにするために，Path constraintsも離散化することを考える．例えば，$h(x(t), u(t)) \\geq 0$が点$t_i$でのみ成り立つようにする．\n以上をまとめると，以下のような有限次元の非線形計画問題を得る．\n$$\\underset{q}{\\text{minimize}} \\ \\ \\varphi(x(T; q)) + \\int_0^T L(x(t; q), u(t;q)) dt \\tag{3}$$ subject to $$\\begin{cases} h(x(t_i; q), u(t_i; q)) \\geq 0, \\ \\ i = 0, \\ldots, N \u0026amp; (\\text{discretized path constraints}) \\\\ r(x(T; q)) = 0 \u0026amp; (\\text{terminal constraints}) \\end{cases}$$\nこの問題は有限次元の最適化ソルバで解くことができる．例えば，IPOPT2 (主双対内点法という方法を利用した連続最適化問題を解くライブラリ) などを用いることができる．\nDirect single shootingの利点  最先端のODEまたはDAEソルバーを使用できること． 大規模なODEまたはDAEシステムでも最適化の自由度が少ないこと． 必要なことが制御入力の自由度の初期推定のみであること．  Direct single shootingの欠点  初期化で状態の軌道$x$の知識を使用できない． ODEの解$x(t; q)$が$q$の非線形性に依存する可能性がある．  実装の容易さなどからsingle shooting approachは工学的応用の観点ではよく用いられる．\n2.2. Collocation ここでは，collocationの考え方について簡単にまとめる．まず，制御入力と状態を離散化する．特に，制御入力が各$[t_i, t_{i + 1}]$で$q_i$である (piecewise constantである) ように選ぶ．また，点$t_i$における状態が$s_i \\approx x(t_i)$であるとする．\nこのとき，無限次元のODE $$\\dot{x}(t) - f(x(t), u(t)) = 0, \\ \\ t \\in [0, T]$$ は有限個の等式制約 $$c_i(q_i, s_i, s_i^{\\prime}, s_{i + 1}) = 0, \\ \\ i = 0, \\ldots, N - 1$$ に置き換えられる．ただし，$s_i^{\\prime}$は区間$[t_i, t_{i + 1}]$中の \u0026ldquo;collocation points\u0026rdquo; における状態の軌道を表すものとする．これらの点の位置を適切に選択することで，高いオーダーでの近似が達成される．通常$s_i^{\\prime}$は直交多項式の零点になるように選ばれる．\nここでは簡単のため，中間変数$s_i^{\\prime}$が存在しない場合について述べる．このとき，追加の等式制約は以下のように表される． $$c(q_i, s_i, s_{i + 1}) := \\frac{s_{i + 1} - s_i}{t_{i + 1} - t_i} - f\\left( \\frac{s_i + s_{i + 1}}{2}, q_i \\right).$$\n次に，collocation intervals内の積分を近似する．例えば， $$l_i(q_i, s_i, s_{i + 1}) := L\\left( \\frac{s_i + s_{i + 1}}{2}, q_i \\right) (t_{i + 1} - t_i) \\approx \\int_{t_i}^{t_{i + 1}} L(x(t), u(t)) dt$$ のようにする．このような離散化をすると，巨大だがスパースなNLPを得る．\n$$\\underset{s, q}{\\text{minimize}} \\ \\ \\varphi(s_N) + \\sum_{i = 0}^{N - 1} l(q_i, s_i, s_{i + 1})$$ subject to $$\\begin{cases} s_0 - x_0 = 0, \u0026amp; (\\text{fixed initial value}) \\\\ c_i(q_i, s_i, s_{i + 1}) = 0, \\ i = 0, \\ldots, N - 1, \u0026amp; (\\text{discretized ODE model}) \\\\ h(s_i, q_i) = 0, \\ i = 0, \\ldots, N, \u0026amp; (\\text{discretized path constraints}) \\\\ r(s_N) = 0. \u0026amp; (\\text{terminal constraints}) \\end{cases}$$\nこの問題は内点法を用いたソルバで解くことができる．効率的なNLPの手法では通常，反復が実行可能に保たれないので，離散化されたODE modelの方程式はNLPの解でのみ満たされる．つまり，simulationとoptimizationが同時に進行する．\nCollocation methodsの利点  非常にスパースなNLPが得られること． 初期化で状態軌道$x$の知識を使用できること． 局所収束が高速であること． 不安定なシステムを扱うことができること． 状態と終端制約の処理が容易であること．  Collocation methodsの欠点  離散化の誤差を適応的に制御しようとすると，再度grid化を行う必要があり，NLPの次元を変更する必要があること．  そのため，collocationのapplicationでは適切な離散化誤差の制御の問題に対処しないことがよくある．    Collocation methodsは実用的な最適制御問題にも使われている．\n2.3. Direct Multiple Shooting Direct multiple shooting methodは，simultaneous method (e.g. collocation) とsingle shootingの利点を組み合わせ，adaptive, error controlled ODE solversを使えるようにしたものである．\nまず，制御入力を $$u(t) = q_i \\ \\ \\text{for} \\ \\ t \\in [t_i, t_{i + 1}]$$ のようにpicewise constantになるようにする．ただし，$t_i$と$t_{i + 1}$の間隔はsingle shootingと同じになるようにする．\n次に，各時間区間$[t_i, t_{i + 1}]$において独立に，人工的な初期値$s_i$からODEを解く． $$\\dot{x}_i(t) = f(x_i(t), q_i), \\ \\ t \\in [t_i, t_{i + 1}],$$ $$x_i(t_i) = s_i.$$ ここまでで得られる制御入力と軌道は，例えば下の図のようになる．   Direct Multiple Shootingの例  この初期値問題を数値的に解くことによって，軌道$x(t; s_i, q_i)$を得る．このODEの解の計算と同時に積分 $$l_i(s_i, q_i) := \\int_{t_i}^{t_{i + 1}} L(x_i(t_i; s_i, q_i)) dt$$ を数値的に計算する．\n人工的な変数$s_i$を物理的に意味のある値に拘束するために，連続性の条件 $$s_{i + 1} = x_i(t_{i + 1}; s_i, q_i)$$ を課す．このようにして，single shootingで得られたNLPと等価でありながら，余剰の変数$s_i$を含み，block sparse structureを持つNLPの定式化を得る．\n$$\\underset{s, q}{\\text{minimize}} \\ \\ \\varphi(s_N) + \\sum_{i = 0}^{N - 1} l_i(s_i, q_i) \\tag{4}$$ subject to $$\\begin{cases} s_0 - x_0 = 0, \u0026amp; (\\text{initial value}) \\\\ s_{i + 1} - x_i(t_{i + 1}; s_i, q_i) = 0, \\ \\ i = 0, \\ldots, N - 1, \u0026amp; (\\text{continuity}) \\\\ h(s_i, q_i) \\geq 0, \\ \\ i = 0, \\ldots, N, \u0026amp; (\\text{discretized path constraints}) \\\\ r(s_N) = 0. \u0026amp; (\\text{terminal constraints}) \\end{cases}$$\nすべての変数を$w := (s_0, q_0, s_1, q_1, \\ldots, s_N)$とまとめると，(2)の形式のNLPを得る．\nDirect multiple shootingは，sequential methodとsimultaneous methodの利点を両方持つ．オフラインの最適制御問題の数値計算の他，オンライン最適化やMPCにも応用されている．\n3. 実装 以下の例題を数値的に解く． $$\\underset{x(\\cdot) \\in \\mathbb{R}^2, u(\\cdot) \\in \\mathbb{R}}{\\text{minimize}} \\ \\ \\int_0^T (x_1^2 + x_2^2 + u^2) dt$$ subject to $$\\begin{cases} x(0) = x_0, \u0026amp; (\\text{initial value}) \\\\ \\dot{x}_0 = (1 - x_1^2)x_0 - x_1 + u, \\ \\ \\dot{x}_1 = x_0 \\ \\ t \\in [0, T], \u0026amp; (\\text{state equation}) \\\\ x_1 \\geq -0.25, |u(t)| \\leq 1, \\ \\ t \\in [0, T], \u0026amp; (\\text{bounds}) \\end{cases}$$ 初期値を$x_0 = [0, 1]^{\\mathrm{T}}$とし，$T = 10, N = 20$とする．\nCasADi3 を用いてdirect single shooting methodを実装した．実装したコードは最適制御問題: 直接法 (プログラム) に載せている．\n実行後得られた最適制御および状態を以下に示す．\n   得られた最適制御と状態  4.手書きメモ 非線形最適制御問題入門4の7章では，最適制御問題の数値解法がいくつか紹介されている．\n   数値解法 長所 短所 適する用途     勾配法 $H$の高階導関数が不要 最適解近傍での収束が遅い 最適解のおおよその様子を手軽に知りたいとき   シューティング法 未知量が有限次元 計算が発散しやすい 良好な初期推定解が選べるとき   入力関数のニュートン法 最適解近傍での収束が速い $H$の2階偏導関数が必要で，各反復での計算量が多い 最適解を精度よく求めたいとき   動的計画法 状態フィードバック制御が得られる 状態の次元が高いと記憶量が膨大 状態の次元が低いか，狭い範囲だけ考慮すればよいとき    以下に手書きメモを掲載する．\n 7.1節 7.2節 7.3節 7.4 - 7.6節  5.まとめ この記事では，最適制御の数値解法について簡単にまとめ，例題を数値的に解いた．理解が間違えている箇所があるかもしれないので，もう一度確認したいと思っている．\n  M. Diehl, et al., \u0026ldquo;Fast direct multiple shooting algorithms for optimal robot control,\u0026rdquo; Fast motions in biomechanics and robotics, pp. 66-93, Springer, 2006.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n A. Wächter and L. T. Biegler, \u0026ldquo;On the Implementation of a Primal-Dual Interior Point Filter Line Search Algorithm for Large-Scale Nonlinear Programming,\u0026rdquo; Mathematical Programming vol. 106, no. 1, pp. 25-57, 2006 (preprint)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n J. A. E.Andersson, et al, \u0026ldquo;CasADi - A software framework for nonlinear optimization and potimal control,\u0026rdquo; Mathematical Programming Computation, In Press, 2018.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 大塚，非線形最適制御問題入門，コロナ社，2011.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":1630072515,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1630072515,"objectID":"bafa58e2bfc29930782cd8baafe6f22e","permalink":"https://tachibana-ai.netlify.app/post/optimal_control_numerical/","publishdate":"2021-08-27T22:55:15+09:00","relpermalink":"/post/optimal_control_numerical/","section":"post","summary":"0. はじめに 先日，6章の内容をまとめた (最適制御問題: 動的計画","tags":["Optimal control","Python"],"title":"最適制御問題: 最適制御問題の数値解法","type":"post"},{"authors":[],"categories":["blog"],"content":"0. はじめに 最近体調が優れない (低気圧の影響) ことが多く，やる気も起こらず，研究の進捗もそれほど良くないということが続いている．このままでは良くない\u0026hellip;と思い，来週は1週間休みを取り，研究のことはあまり考えずにリフレッシュすることにした．来週休みを取るために，今週金曜までは集中講義に参加するほか，論文の修正作業を少しだけ頑張っていた．\n話は変わるが，私は学部1年から近所のバーに行くことが好きだった．今回はバーについて書こうと思う．\n流れてきたキャバクラ漫画見てこれ思い出した https://t.co/TqsBKW9YWW\n\u0026mdash; 橘 あい (@tcbn_ai) August 8, 2021  キャバクラの漫画を見て，これを思い出したので．\n1. 通っていた近所のバー 先に書いておくが，私が学部1年から行っていたバーはガールズバーではなく，普通の (?) お酒を提供しているバーであった．学部1年のときは1ヶ月に1回くらい夕食をそこで食べたりノンアルコールの飲み物を飲んだりしていた．\nそのバーで30代の方や40代の方と知り合って，話すようになった．自分はコミュ障だと思っていたが，意外と大人とは話せるということに気付いた (この「大人と話せる」というものは就活や研究室でのミーティングで大いに活かされている)．同年代の人と話すのは少し苦手意識がある．\n恋愛的な相談をしたり，将来のことを話したり，常連の方と話したり，常連の方のお子さんの勉強について少し話したり，といろいろなことがあり，学部時代の楽しみの1つになっていた．\nそのバーの常連さんの1人に，かなりお金持ちでほぼ毎回奢ってくれる方 (以降Aさん) がいた．学部卒業のとき，学位記授与の前日にAさんにガールズバーに連れて行ってもらった．\n2. 一度だけ行ったガールズバー 人生で初めて入ったガールズバーのレポートを1年半後にする，というのはなかなか面白い試みである．かなり衝撃を受けたのを覚えており，今でもレポートが書けてしまう．\n2.1. ガールズバーに行くことになった経緯 卒論発表が終わった翌週くらいに近所のバーに行っていた．そのときAさんもバーにいて，卒業前に一緒にご飯に行こう，と誘ってくれた．\nAさんの仕事終わりに駅前の居酒屋で軽くご飯を食べて，軽く飲んでいた．その後，Aさんから「ガールズバー行く？おっぱい揉みたい？」と言われた．そういう店が近くにあるかは疑問だったが，私はこれまで入ったことのないガールズバーというものに惹かれ，「行きたいです！」と答えた．\n2.2. ガールズバーの中 Aさんが予約してくれた．お店に入り，席につくと，私とAさんが座ったところに女の子2人がついてくれた．1人は私より若かった．服装は，キャバクラの漫画に出てくるような女性の服装をイメージしていただければ幸いである．当然谷間を出して胸を強調した服装である．\nこういうことに耐性のない私は当然緊張していた．ゲームをして負けたら一気みたいなことをすることになった．私と女の子が2人負けで一緒に飲むということになり，「優しいね」とその子が言ってくれた．リップサービスと分かっていても，嬉しくなった．また，当然のようにボディータッチもしてきて，耐性のない私はずっとどぎまぎしていた．さまざまな意味で変な反応をしてしまわないように，お酒が入った状態で必死に理性を保とうとしていた．\n1時間半程経過して，女の子のチェンジが入った．席の交代で来てくださった方の1人は私より年上で，日中は他の仕事をしている方だった．興味がわき，その人の話を聞いていた．私も，自分が大学でやっていたことなどを話していた．\nその方はかなり頭の切れる方で，私も話していてとても楽しかった．やはり私は知的好奇心を満たしてくれる方や理知的な方が人間的に好きなのだろう，と実感した．\n3時間ほどお店にいた後，Aさんが潰れたので帰ることになった．料金はAさんが全て払ってくれた．ありがたかった．\n3. まとめ  バーに通っていた 学部卒業の際，ガールズバーに行った リップサービスでも嬉しいものは嬉しいが，私には慣れない  ","date":1628427409,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1628427409,"objectID":"ca289be0c6823484fa62ee3ee8678c26","permalink":"https://tachibana-ai.netlify.app/post/blog_bar/","publishdate":"2021-08-08T21:56:49+09:00","relpermalink":"/post/blog_bar/","section":"post","summary":"0. はじめに 最近体調が優れない (低気圧の影響) ことが多く，やる","tags":["blog","バー"],"title":"学部生の頃バーに行っていた話と学部卒業時にガールズバーに行った話","type":"post"},{"authors":[],"categories":["Optimal control"],"content":"0. はじめに 先日は，5章の内容をまとめた (最適制御問題: 連続時間システムの最適制御)．少し間が空いてしまったが，今回は6章の内容をまとめる．\n1. 6章の概要 6章では，最適制御問題に動的計画法を適用して，HJB方程式という偏微分方程式を導出している．変分法で導かれた常微分方程式の2点境界値問題であるオイラー・ラグランジュ方程式と，動的計画法から導かれた偏微分方程式であるHJB方程式は何らかのつながりがある．動的計画法から最小原理と呼ばれる条件を経由してオイラー・ラグランジュ方程式が導かれる．\n以下に，各節の内容をまとめた手書きのメモを掲載する．\n 6.1節 6.2節 6.3節  2. まとめ ここまで読んで，オイラー・ラグランジュ方程式とHJB方程式の関係が何となく分かってきた．実際の数値計算をどうするか，ということで少し詰まってしまって時間がかかっている．\n","date":1627906348,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1627906348,"objectID":"124d4af2fdc4e8f5f7bb327862e25b0e","permalink":"https://tachibana-ai.netlify.app/post/optimal_control_dp/","publishdate":"2021-08-02T21:12:28+09:00","relpermalink":"/post/optimal_control_dp/","section":"post","summary":"0. はじめに 先日は，5章の内容をまとめた (最適制御問題: 連続時","tags":["Optimal control"],"title":"最適制御問題: 動的計画法と最小原理","type":"post"},{"authors":[],"categories":["blog"],"content":"0. はじめに これまで体験したアルバイトと，経験したことについて書こうと思う．遊ぶためにバイトをしていたので，企業でプログラミングや機械学習の勉強をしながらバイト，というような経験をしてこなかったのは反省点である．\n私は学部入学が2016年4月，学部卒業が2020年3月であり，修士課程入学が2020年4月である．\nアルバイト歴    年 アルバイト先     2016.5 - 2017.3 本屋   2017.4 - 2019.3 飲食店 (24時間営業)   2017.6 - 2018.6 採点バイト   2018.12 - 2019.1 郵便局 (短期バイト)   2020.4 - 現在 TA (不定期)    1. 本屋のバイト 1.1. 始めたきっかけ 学部入学後，本屋でバイトをしていた (これが初バイトだった)．本屋でバイトを始めようと思った理由は主に2つある．\n 本屋のバイトは楽だと思っていた (当時) 普通に読書が好きだった  1つ目の理由は，本屋のバイトが楽そうだったからである．レジ打ち，掃除，予約注文くらいできれば良いのかなと思っていた．2つ目の理由は，高校まで普通に読書が好きで (氷菓という作品の影響)，本屋なら苦痛なくバイトできるのではないか，と考えたからである．\n1.2. バイト体験と印象に残っているエピソード 本屋のバイトでは，レジに入ることよりも，雑誌を回収して並べるというような肉体労働が多かった．イメージしていた本屋のバイトとは違ったような気がした．\nバイトをしていて一番印象に残っているエピソードがあるので，紹介したいと思う．かなり汚い話だが，ご容赦願いたい．\nバイトを初めて半年ほど経過した頃のこと．閉店作業をしている際，店の外のベンチに男が座っていた．流石にどいてもらわないと片づけられないな，と思い，声をかけようとしたところ，男の前に茶色くて嫌なにおいのするブツが落ちていた．頭に疑問符を浮かべながら近づくと異臭がした．これはやばい\u0026hellip;と思い，男に「もう店終わるので帰ってもらっていいですか？」と言って帰し，社長に報告した．社長に「片づけといて」と言われたので，水で流すなどして片づけた．\nその茶色いブツは明らかに人間のモノではあったが，その男のものだったのかは分からない．監視カメラがついていない角度だったので，状況が分からない．だが，落ちている異臭を放っている誰のモノか分からないブツを片づける，という強烈な体験をしたことは5年ほど経過した今でも忘れられない．\n1.3. 辞めようと思った理由 辞めようと思った理由は主に3つある．\n シフト固定制だった 腰痛 時給が最低賃金だった  学部1年終わり頃から2次元コンテンツを追いかけることにハマってしまった．事前にシフトが固定されており，代わりの人を見つけないといけないということから，毎回イベントに参加しようとするたびにこのようなことを連絡するのはしんどいな，と思った．\n(これは甘えだが，) 腰痛がひどくなってしまったことも理由の1つである．本屋のバイトでは古い週刊誌を箱詰めして新しい週刊誌を並べる，ということをする必要があったが，箱詰めした本を運ぶ際に腰を痛めてしまい，それが長続きしてしまったので，この働き方は無理だと感じ，辞めようかな，と思った．\n最大の理由は，最低賃金だったことである．最低賃金と他のバイト先の時給に100円以上の差があることを知り，何故自分は最低賃金で働いているのだろうと思い，辞めようと思った．\n1.4. その他  良かったこと  ある程度の常識は身に付けられたのではないかと思う   悪かったこと  (自業自得) 本への興味が薄れた   反省点  最低賃金と時給を比較する 業務内容は面接の際に聞いておく    2. 飲食店のバイト 2.1. 始めたきっかけ 上記のバイトを辞めた後すぐにバイトを探し始めた．条件としては，\n シフト固定ではない 時給が最低賃金よりはそこそこ高い  というもので探した．友人が24時間営業の飲食店でバイトをしていたこともあり，私も24時間営業の飲食店でバイトをすることにした．\n2.2. バイト体験と印象に残っているエピソード このアルバイトは比較的長く続いた．朝，昼，夜，深夜など，色々な時間帯に入った．\nアルバイトをしていて印象に残ったエピソードはいくつもあるが，3つほど紹介させていただく．\n バイト先の社員とパートの人の不倫騒動 深夜勤務の人が飛ぶ 社員が来ない  2.2.1. 不倫騒動 一番印象に残っているのは，不倫騒動である．バイト先は主婦の方が多かったので，これはかなり話題になった．\n特定されそうなので詳細は話せないが，一言でまとめると，社員が某店舗のパートの人と不倫してそれがバレてクビになった，というものである．\n自業自得である．\n2.2.2. 深夜勤務の人が飛ぶ 深夜勤務の30代の人が飛ぶ，ということがあった．ディナーの時間帯 (17時 - 22時) に勤務して，21時半頃から引継ぎの準備をしていた．21時50分頃に深夜勤務の人のうち1人来た．もう1人来る予定だったが，来ず，連絡もつかない．これはまずい，と思い，社員の方に来ていただくように連絡をしたが，しばらく来れない，とのことで3時間程 (1時頃まで) 残業した．\n社会にはいろんな人がいる，ということを実感したエピソードの1つである．\n2.2.3. 社員が来ない 土曜の昼は忙しい，というのは飲食店に勤務したことがある方，もしくは飲食店に土曜の昼に入ったことのある方なら納得のいくことであろう．たまたまその日は私以外に主婦の方と社員の方の3人で回すことになっていた．\n忙しくなければいいですね，主婦の方と話していた矢先，社員から「今日他の店舗に行くことになったから来れない」という電話がかかってきた．来れないなら仕方ないが，他の人の手配もしていないと聞き，主婦の方も私も呆れた．その日はかなり忙しかったので，2人で回すのはかなり無理があった．実際かなりお客さんを待たせてしまった．\n私はその日まで5連勤していた，ということもあり，かなり機嫌は悪かった．その社員が入っているグループLINEで長文メッセを送ってしまった (店長に言われたので)．\nちなみにその社員はこのことがあった2週間後くらいに別の地域に飛ばされた．店長も嫌っていたし，仕方ない．次入った社員の方からはかなり謝られた．別に良かったのに．\n大人になっても人の手配すらできないような人がいるのだな，と実感したエピソードの1つである．\n2.3. 辞めた理由 辞めた理由は学部4年の研究室配属である．\n私は学部3年まではバイトして遊んでテスト前だけ勉強して，という底辺大学生であった．研究室配属をきっかけに変わろうと思い，収入源であるバイトを辞め，2次元コンテンツやアニソンシンガーを追いかけるのも控えて，勉強と研究に集中しよう，と思った．\n色々あったが，飲食店のバイトは満足している．店長は厳しかったが，優しく気にかけてくださった．同年代の方もみんな良い人ばかりで話が合う人も多かった．大阪を離れる前に一度立ち寄ろうかな，と思っている．\n2.4. その他  良かったこと  結構長続きした いろんなタイプの人と交流できた かなり金が入った   悪かったこと  社員\u0026hellip; 他の方に苦しめられたこと (仕方ない)    3. 採点バイト 3.1. 始めたきっかけ 学部2年のとき，全休を作ることができたので，1日フルでバイトしようと思った．所属していたサークルの先輩が採点バイトをしているというのを聞き，私もやろうかなと思った．\n3.2. バイト体験と印象に残っているエピソード 初めて2週間ほどでバイトリーダーに呼び出され，「バイトリーダーをやってみないか」と言われた．時給が少し上がるし，交流もできると言われた．私はそのとき飲食店でバイトしているという理由で断った．\n今更ながら，2週間ほどしか勤務をしていないただの学部生にバイトリーダーをやらないか，と招待するのは謎だった．\n3.3. 辞めた理由 化学の採点をしていたが，大学で化学を使っておらず，高校当時程化学ができないことに気付いた．また，単調な作業だったので，金は入ってくるが飽きてしまった．\n3.4. その他  良かったこと  フルタイムの勤務 (9:00 - 18:00) でもそれほど疲れない   悪かったこと  単調すぎて飽きる    4. 郵便局 4.1. 始めたきっかけ 3回生の頃，必要単位を取りきっていたことと，院試で必要なTOEICで良い点数を取れたという理由で遊びまくっていた (反省)．飲食店のバイトもしていたが，別のバイトも少しするか，と思い，郵便局の年賀状仕分けのバイトをすることにした．\n4.2. バイト体験と印象に残っているエピソード 年末年始に飲食店バイトと合わせて14連勤をしたこと．12/30の昼に郵便局でバイト，1時間後に飲食店でバイト (深夜1:30まで)，大晦日の昼に郵便局でバイト，飲食店で夜勤バイトというときが一番きつかった．栄養ドリンクを毎日飲んでいた．もうできないなと思う．\nその月の給料は両方合わせて15万円だった．3月までに全て使い切った．\n4.3. 辞めた理由 短期バイトだからなし．\n4.4. その他  良かったこと  勤務後に飲食店のバイトができる程度には体力的な余裕がある   悪かったこと  特になし    5. TA 5.1. 始めたきっかけ 私の研究テーマと内容がかぶっていたので，指導教員からTAをするように頼まれた．\n5.2. バイト体験と印象に残っているエピソード オンラインでTAなんてできるのか，と思ったが，意外と何とかなっている．\n5.3. その他  良かったこと  小遣い稼ぎになる 時給がそこそこ高い   悪かったこと  今のところはそれほどない    6. まとめ これまでのバイト経験を書いた．意外と長くなった．過去を思い出すと後悔が残るが，この経験で今の自分が構成されていると思うと別に良いかなとも思える．\n","date":1627130664,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1630283304,"objectID":"2c676b581aacdf715414febd015917b3","permalink":"https://tachibana-ai.netlify.app/post/blog_part_time/","publishdate":"2021-07-24T21:44:24+09:00","relpermalink":"/post/blog_part_time/","section":"post","summary":"0. はじめに これまで体験したアルバイトと，経験したことについて","tags":["blog","アルバイト"],"title":"アルバイトの経験談","type":"post"},{"authors":[],"categories":["Optimal control"],"content":"0. はじめに 先日は，4章の内容をまとめた (最適制御問題: 変分法)．今回は，5章の内容をまとめる．\n1. 5章の概要 5章では，連続時間システムに対する最適制御問題を扱っている．最適制御問題の基本的な問題設定，変分法から導出した停留条件 (オイラー・ラグランジュ方程式)，局所最適性の十分条件，最適解の摂動についてまとめられている．このブログではオイラー・ラグランジュ方程式までをまとめる (詳しい導出は省略)．詳しい導出とそれ以降の内容は手書きの資料に載せている．\nここで扱う最適制御問題は連続時間システム\n\\[\\dot{x}(t) = f(x(t), u(t), t) \\tag{5.1}\\]\n(ただし，\\(x(t) \\in \\mathbb{R}^n\\)は状態ベクトル，\\(u(t) \\in \\mathbb{R}^m\\)は制御入力ベクトル) に対して，初期時刻\\(t_0\\)，終端時刻\\(t_f\\)，初期状態\\(x(t_0) = x_0\\)が与えられた下で評価関数\n\\[J = \\varphi(x(t_f)) + \\int_{t_0}^{t_f} L(x(t), u(t), t) dt \\tag{5.2}\\]\nが与えられ，それを最小化するような最適制御\\(u(t)\\)を求める，というような問題である．つまり，ここで考える最適制御問題は，関数\\(x(t)\\)と\\(u(t)\\)の汎関数である評価関数\\(J\\)を，等式制約である状態方程式の下で最小化する変分問題である．\n等式制約\n\\[f(x, u, t) - \\dot{x} = 0\\]\nに対応するラグランジュ乗数のベクトルを\\(\\lambda(t) \\in \\mathbb{R}^n\\)として，制約条件の下での停留条件を求めるための汎関数\\(\\overline{J}\\)を構成すると，\n\\[\\overline{J} = \\varphi(x(t_f)) + \\int_{t_0}^{t_f} \\{L(x, u, t + \\lambda^{\\mathrm{T}} (f - \\dot{x}) \\}dt \\tag{5.3}\\]\nとなる．ここで，スカラー値関数\\(H\\)を\n\\[H(x, u, \\lambda, t) := L(x, u, t) + \\lambda^{\\mathrm{T}} f(x, u, t)\\]\nと定義する．\\(H\\)は最適制御問題のハミルトン関数と呼ばれる．この\\(H\\)を用いると，汎関数\\(\\overline{J}\\)は，以下のように\\(\\dot{x}\\)の項とそれ以外の項に分けて書き直される．\n\\[\\overline{J} = \\varphi(x(t_f)) + \\int_{t_0}^{t_f} \\left(H(x, u, \\lambda, t) - \\lambda^{\\mathrm{T}}\\dot{x}\\right) dt\\]\n上記の問題設定の下で，評価関数 (5.2) を最小にする最適制御 \\(u(t) \\ (t_0 \\leq t \\leq t_f)\\) が存在するとし，対応する最適軌道を\\(x(t)\\)とすると，\\(n\\)次元ベクトル値関数\\(\\lambda(t)\\)が存在して以下のオイラー・ラグランジュ方程式が成り立つ．\n\\[\\dot{x} = f(x, u, t), \\ x(t_0) = x_0 \\tag{5.4}\\]\n\\[\\dot{\\lambda} = - \\left(\\frac{\\partial H}{\\partial x} \\right)^{\\mathrm{T}}(x, u, \\lambda, t), \\ \\lambda(t_f) = \\left( \\frac{\\partial \\varphi}{\\partial x} \\right)(x(t_f)) \\tag{5.5}\\]\n\\[\\frac{\\partial H}{\\partial u}(x, u, \\lambda, t) = 0 \\tag{5.6}\\]\nこれは，\\(x(t)\\)と\\(u(t)\\)の連立微分方程式とみなすことができるが，\\(x(t)\\)は初期状態\\(x(t_0)\\)が与えられているのに対し，\\(\\lambda(t)\\)は終端値\\(\\lambda(t_f)\\)に対する条件が与えられている．このような問題を2点境界値問題という．多くの場合，非線形の微分方程式の解析解は得られないので，初期状態を未知のパラメータとして終端条件が成り立つための条件を書き下すことは困難である．\n以下に，各節の内容をまとめた手書きのメモを掲載する．\n 5.1節 5.2節 5.3節 5.4節  2. まとめ ここまで読んで，最適制御問題は状態と入力の汎関数である評価関数を等式制約である状態方程式の下で最小化する変分問題であり，最適制御と最適軌道，ラグランジュ乗数に対してオイラー・ラグランジュ方程式が成り立つことは分かったが，その後どうするのかまだ分かっていない．連休中にやる気があれば6章と7章を読みたいと思っている．\n","date":1626938087,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1626938087,"objectID":"fee2353d0612d40b5ffdb02a9140a185","permalink":"https://tachibana-ai.netlify.app/post/optimal_control_continuous/","publishdate":"2021-07-22T16:14:47+09:00","relpermalink":"/post/optimal_control_continuous/","section":"post","summary":"0. はじめに 先日は，4章の内容をまとめた (最適制御問題: 変分法","tags":["Optimal control"],"title":"最適制御問題: 連続時間システムの最適制御","type":"post"},{"authors":[],"categories":["Optimal control"],"content":"0. はじめに 研究で最適制御問題を扱うことになったが，これまでまともに勉強してこなかったので，勉強する．研究では連続時間の最適制御問題を扱う予定なので，連続時間の最適制御問題の文献を読んでまとめた手書きのメモを公開することにした．\n次の本を参考にしている．4章から7章まで勉強する予定である．\n 大塚，非線形最適制御問題入門，コロナ社，2011  0.1. 方針 GoodNotesを使ってメモを取りながら，本を読んで数式を追っている．ある程度まとめたらメモを載せることにする．誤字や記述が怪しい箇所，理解が足りていない箇所も多いと思う．\n普段，定理や補題の主張を読み，証明は読み飛ばすか流れだけを見ることが多いので，今回もそうなると思う．\n1. 4章の概要とまとめ 4章では，変分法の基本がまとめられている．最適制御問題は，時間の関数である状態 $x(t)$ と入力 $u(t)$ の 汎関数 である評価関数 $J$ を，等式制約 (状態方程式) の下で最小化する問題であり，これは変分問題である．よって，変分法は最適制御問題の基礎になっている．\n以下に，各節の内容をまとめた手書きのメモを掲載する．\n 4.1節 4.2節 4.3節 4.4節  ","date":1626592738,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1626660958,"objectID":"208b0d9ba516e2003f72d88f68fd184a","permalink":"https://tachibana-ai.netlify.app/post/optimal_control_validation/","publishdate":"2021-07-18T16:18:58+09:00","relpermalink":"/post/optimal_control_validation/","section":"post","summary":"0. はじめに 研究で最適制御問題を扱うことになったが，これまでま","tags":["Optimal control"],"title":"最適制御問題: 変分法","type":"post"},{"authors":[],"categories":["Security"],"content":"0. はじめに ハッキング・ラボのつくりかたという本を読み進めていたところ，最新版のKali linux 2021.2では実行できない部分があったので (4章, 252ページ等)，書籍の環境である Kali linux 2018.2に合わせることにした．インストールにかなり苦戦した．\n後から気付いたが，apt updateとapt upgradeをしてしまうとmetasploitも更新される．苦労してインストールしたが，同一の環境を作ることが目的であれば，実行しない方が良い．私はこの仮想マシンが翌日にグラフィカルモードで起動しなくなったので，消した．\nこのようなことは二度としないと思うが，自分への戒めとして，また，もし今後このような状況があったときに備えて記事に残すが，真似はしない方が良い．可能であれば安定起動版か最新版を入れた方が良いし，わざわざ少し古いバージョンを入れて更新するのは手間である．\n0.1. 概要  インストール  DNSサーバに8.8.8.8を指定する   署名  archive.kali.orgから入手する   依存関係  ruby-http-parser.rbの依存関係  apt-get installする   thinのエラー  /var/lib/dpkg/infoにある該当ファイルを削除して，apt installする   ruby-progressbarのエラー  dpkg -i --force-overwriteする      1. Kali linux 2018.2のインストール ovaがないので，isoファイルをダウンロードする．ここでは，kali-linux-2018.2-amd64.isoを以下からダウンロードした．\n Index of /kali-images  あとはVirtualboxで仮想マシンを入れるのと同様にすれば良いが，nameserverに8.8.8.8を指定することを忘れないようにする (名前解決の問題)．\n2. インストール後の処理 2.1. 署名 1でインストールしたkali linuxでapt updateしようとすると，\u0026ldquo;The following signatures were invalid\u0026quot;のエラーが出る．\n   signatureのエラー  同様のエラーをStackExchangeで探し，同じように解決しようと試みた．\n 参考  Invalid signature for Kali Linux repositories : “The following signatures were invalid: EXPKEYSIG ED444FF07D8D0BF6 Kali Linux Repository”    gpg --keyserver hkp://keys.gnupg.net --recv-key 7D8D0BF6 gpg --fingerprint 7D8D0BF6 gpg -a --export 7D8D0BF6 | apt-key add - apt update  と\nwget -q -O - https://archive.kali.org/archive-key.asc | apt-key add  が紹介されていた．前者でうまくいかなかったので，後者を試した．\n   gpgキーを追加する  2.2. 依存関係 apt updateはできたので，apt upgradeしようとしたところ，ruby-http-parser.rbに依存関係の問題があるらしく，できなかった．\n   依存関係  ruby-http-parser.rbをインストールすれば良いかもしれない．\n 参考  Kali \u0026lsquo;the following packages have unmet dependencies\u0026rsquo;       ruby-http-parser.rbのインストール  apt-get install ruby-http-parser.rb  を実行したところ，上のapt-listchangesが出力された．末尾まで見てqで進めた．途中に質問されたが，そのまま答えた．\n   質問     cron  最後まで進めたところ，エラーが出た．\n   thinのエラー  とりあえず，apt-get cleanとapt-get -f installをしてみることにしたが，同じエラーが残っている．\n   同様のエラー  同様のエラーを解決している記事を発見したので，以下の記事のようにしてエラーを解消する．\n 参考  【LIVA】【Ubuntu server14.04】apt-getでエラー発生（post-installationスクリプトエラー） apt-getのpost-installationスクリプトエラー    dpkg --audit dpkg --configure thin     dpkgコマンド  参考サイトによると，/var/lib/dpkg/info以下の関連するファイルを削除すれば良いらしい．\ncd /var/lib/dpkg/info rm -rf thin.postinst thin.postrm thin.prerm     ファイルの削除  この後に\ndpkg --configure thin  をすれば良いらしいが，何故かうまくいかなかった．\n   thinのsetup  仕方ないので，thinをインストールすることにした．\napt install thin     thinのインストール  エラーが出なかったので，確認する．\ndpkg -s thin     status  Status install ok installedになっているので，良さそう．\n 参考  apt-getによる依存関係の解決方法    apt updateとapt upgradeを試す．\n途中で\u0026quot;Configuring macchanger\u0026quot;と\u0026quot;sslh configuration\u0026quot;について聞かれたが，それぞれ\u0026quot;Yes\u0026quot;と\u0026quot;from inetd\u0026quot;にした．\nまた，\u0026ldquo;Configuring base-passwd\u0026quot;というのも聞かれた．今変更しなくても後から変更できるらしいので，\u0026ldquo;No\u0026quot;を選択した．\n   エラー  またエラーが出たので，原因を探す．とりあえず，apt-get cleanとかを実行する．\n   apt-get cleanを実行  \u0026ldquo;ruby-cms-scanner: \u0026ldquo;の行から，依存関係の問題があることが分かった．\napt install ruby-progressbar  でインストールしようとしたが，先ほどと同様のエラーが出た．\n   上と同様のエラー  以下のサイトと類似しているエラーだったので，関連debを上書きインストールする方法を試してみた．\ndpkg -i --force-overwrite /var/cache/apt/archives/ruby-progressbar_1.10.1-1_all.deb apt --fix-broken install   参考  apt \u0026ndash;fix-broken installしろと言われた場合の対応    \u0026ldquo;Configuring postgresql-common\u0026quot;について聞かれたので，\u0026ldquo;Ok\u0026quot;とした．\n   apt \u0026ndash;fix-broken後  いけたように見える．一応apt updateとapt upgradeを確認する．\n   not-upgraded  \u0026ldquo;not-upgraded\u0026quot;となっているが，一応エラーは消えているようなので，この処理は終了．\n2.3. ネットワーク設定 書籍第2章に合わせる．\n アダプター1  ホストオンリーアダプター   アダプター2  NAT    Kali linux 2021.2に10.0.0.2を割り振っているので，Kali linux 2018.2には10.0.0.3を割り振る．\n   2.4. ユーザの追加 \u0026ldquo;ai\u0026quot;というユーザを追加する．\nuseradd -m ai passwd ai usermod -a -G sudo ai chsh -s /bin/bash ai     ユーザを追加  2.5. ssh環境 (1) SSHホスト鍵の再生成 cd /etc/ssh mkdir default_keys mv ssh_host_* default_keys/ dpkg-reconfigure openssh-server  (2) sshdの起動 service ssh start update-rc.d ssh enable apt install sysv-rc-conf -y  (3) ログインできるか確認 ローカルから\nssh ai@localhost     ローカルからssh接続  Windows側から\nssh ai@10.0.0.3     Windowsからssh接続  どちらも接続できている．\n(4) rootログインの許可 /etc/ssh/sshd_configを編集して\nPermitRootLogin yes  にする．\n   rootログイン  (5) 公開鍵認証 Windows側で公開鍵があるディレクトリで，\nscp .\\id_rsa.pub root@10.0.0.3:/root/  とする．\nkali linux側で，\ncat id_rsa.pub \u0026gt;\u0026gt; ./.ssh/authorized_keys chmod -R 700 ./.ssh/ chmod -R 600 ./.ssh/authorized_keys  を実行．\n/etc/ssh/sshd_configのPubkeyAuthenticationとAuthorizedKeysFileのコメントを外す．\nWindows側の.ssh/configに以下を追加．\nHost kali_2018 HostName 10.0.0.3 User root IdentityFile [authorized_keysに対応する秘密鍵のパス]  ssh kali_2018  でログインできることを確認する．\n3. まとめ kali linux 2018.2を導入し，初期設定をした．2018を入れたつもりだが，アップグレードされていた．結局消したが，苦労したので戒めとして残した．真似はしない方が良い．\n","date":1626180452,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1626180452,"objectID":"cf24a2704d14de2076556b90981303d8","permalink":"https://tachibana-ai.netlify.app/post/kali-linux-log/","publishdate":"2021-07-13T21:47:32+09:00","relpermalink":"/post/kali-linux-log/","section":"post","summary":"0. はじめに ハッキング・ラボのつくりかたという本を読み進めてい","tags":["Hacking-lab","Security","Kali-linux"],"title":"古いバージョンのKali linuxをインストールしようとした","type":"post"},{"authors":[],"categories":["Security"],"content":"0. はじめに 最近，ハッキング・ラボのつくりかたという本を読んでいる．ツイートされていた方もいらっしゃったが，書籍第4章のWindowsに紹介されているmeterpreterのプロンプトでrun hashdumpやrun scraperが実行できない．\n 該当ツイート     runのエラー  Meterpreterがスクリプトの実行をサポートしなくなったことが原因の1つだと考えたので，何とか書籍のコードを実行できないか試してみたいと思った．\n 該当ツイートへのリプライ GitHubのmetasploit-framework-webexec  今回は，書籍の環境に合わせることで実行した．もっと良い方法があるはずだが，知識のない私にはこれが限界だった．\n1. 環境について 1.1. これまで用いていた環境 私がこれまで使っていた環境を記載する．Virtualbox上で仮想マシンを動かしている．\n ホストOS  Windows11  IP address (ホストオンリーネットワーク): 10.0.0.1     ゲストOS  Kali Linux 2021.2  LANアダプター1 (ホストオンリーネットワーク): 10.0.0.2 LANアダプター2 (NAT): DHCP metasploit v6.0.52-dev   Windows7 (ターゲット端末)  LANアダプター1 (ホストオンリーネットワーク): DHCP      1.2. 書籍の環境と今回比較のために用いる環境 書籍では，Kali Linux 2018.2を用いている．\n 書籍の環境  Kali Linux 2018.2  LANアダプター1 (ホストオンリーネットワーク): 10.0.0.2 LANアダプター2 (NAT): DHCP metasploit v4.16.65-dev (書籍pp.240より)      今回は，1.1で作った環境を壊したくなかったので，Virtualbox上に新しく特定のバージョンのKali linuxをisoファイルからインストールして，それを用いる．\n 今回作った環境  Kali Linux 2018.2  LANアダプター1 (ホストオンリーネットワーク): 10.0.0.3 metasploit v4.16.48-dev      ここで，Kali Linux 2018.2に関しては，インターネットに接続せず，Windows7との通信のためだけに用いることにする．\n apt updateやapt upgradeを行うとmetasploitのバージョンが更新される可能性がある． apt updateやapt upgradeをしようとしたときにエラーが出た．何とか改善したが，metasploitのバージョンまで更新された(1敗)．  古いバージョンのKali linuxをインストールしようとした    また，旧バージョンのisoファイルは，以下からダウンロードした．\n Index of /kali-images  2. Kali Linux 2018.2での実行 2.1. 環境構築 isoファイルを使って仮想マシンを構築する．途中のDNSサーバを指定するところで，8.8.8.8を指定するのを忘れない．\n 参考  Kali Linux on Linux Deploy - resolv.confの編集    うまくいくと，以下のようなデスクトップとして起動できる．\n   デスクトップの起動  IPアドレスの編集を行う．Virtualbox側でホストオンリーネットワークを指定し，Kali linux側の/etc/network/interfacesに以下を追加．\nallow-hotplug eth0 iface eth0 inet static address 10.0.0.3 netmask 255.255.255.0  設定後再起動し，うまく割り振られているか，ホストOSにpingが飛ぶか確認した．\n   pingの確認  2.2. metasploitの起動と確認 次に，msfconsoleでmetasploitを起動し，バージョンを確認する．\n   metasploitのバージョンの確認  v4.16.48-devであることが分かり，書籍よりも前のバージョンであることが分かる．\n書籍の処理を実行してみる．まず，ペイロードを作成し，実行した．\n   ペイロードの実行  次に，SYSTEM権限を奪取して，run hashdumpを実行した．\n   hashdumpの実行  注意は出たが，止まらずに実行できているようである．期待できそうだったので，run scraperもやってみる．\n   run scraperの実行  実行できた．run persistenceも実行できた．\n3. まとめ 書籍の環境に合わせたら一応実行はできた．もっと良い方法があるとは思うが，演習だと思えば\u0026hellip;\n","date":1626179072,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1626179072,"objectID":"5ebb7a361430cd8f0e4ccbcec540ce0d","permalink":"https://tachibana-ai.netlify.app/post/hacking-lab_1/","publishdate":"2021-07-13T21:24:32+09:00","relpermalink":"/post/hacking-lab_1/","section":"post","summary":"0. はじめに 最近，ハッキング・ラボのつくりかたという本を読んで","tags":["Hacking-lab","Security","Kali-linux"],"title":"書籍を読みながらMetasploitを使ってみて詰まったところ","type":"post"},{"authors":[],"categories":["Ubuntu"],"content":"0. はじめに 以前ファイルサーバを構築したので，そのときのログを残す．\n色々と怪しい部分もあるかもしれないので，一個人の記録として見ていただければ幸いである．\n以下，LinuxサーバをUbuntu18.04とし，クライアント側はWindows10もしくはUbuntu20.04とする．Windows10の場合はGit Bashが導入済みであるものとする．\n SSH接続の設定 Sambaの設定 バックアップの設定 CUI運用にする  という流れで実行した．\n1 SSH接続 サーバにリモートで接続して手元で扱うときには，SSH (Secure Shell) 接続を用いることが多い．SSHは，セキュアな通信でリモートアクセスするためのプロトコルであり，強固な認証と暗号化の機能がある (詳しい説明は省略)．ここでは，LinuxサーバのSSH設定の手順について述べる．認証方式は公開鍵認証とする．\n以下，サーバ側のシェルに(server)とし，接続するクライアント側のシェルに(client)と書くものとする．\n(1) sshdのインストールと自動起動の設定 (サーバ側) ホスト側でsshをインストールして，自動起動の設定を行う．\n(server) sudo apt update \u0026amp;\u0026amp; sudo apt -y upgrade (server) sudo apt -y install ssh (server) sudo systemctl start ssh.service (server) sudo systemctl enable ssh.service  この後サーバを再起動し，以下のコマンドを実行．\n(server) sudo systemctl is-enabled ssh.service (server) sudo systemctl status ssh.service  上のコマンドを実行し，enabledと出力されれば，ブート時に起動する．下のコマンドを実行し，Active: active (running)と出力されれば現在sshdが起動している．\nこの時点でサーバ側にパスワード認証で入ることができる．\n(client) ssh [user]@[IP address of the server]  (userはサーバのユーザ名)とすると，特に設定が間違えていなければ接続できる．\n今回の目的は公開鍵認証で入ることなので，以下の手順を\n(2) キーペアを作る (クライアント側) クライアント側でキーペアを作る．キーペアの作り方については以下の記事を参考にした．\nGit Bash (Ubuntuはterminal)で，以下のコマンドを実行する．\n(client) ssh-keygen -t rsa -b 4096 -C \u0026quot;comment\u0026quot;  上記のコマンドを実行すると，鍵のパスを変えるか，パスフレーズは必要か聞かれる．鍵はデフォルトでは\u0026lt;user\u0026gt;/.ssh直下にid_rsaとid_rsa.pubとして保存されるが，複数の鍵を作る場合は新しいディレクトリを.ssh以下に作るなどすれば良いと思う．\ncommentは任意だが，複数人が管理するファイルサーバという機能を持たせると考えると，自分の名字にするのが良いように思う．\n参考  お前らのSSH Keysの作り方は間違っている  (3) クライアント側からホスト側に公開鍵を送信する (1)でSSH接続ができているとすると，クライアント側でscpコマンドを実行すると，サーバ側のuserのホームディレクトリ直下に公開鍵を転送できる．\n(client) scp [client rsa pub key path] [user]@[IP address of the server]:/home/[user]  ここで，scpはSSHを使ってリモートホストとローカルホストの通信を暗号化した上で，ファイルの送信をするコマンドであり，scp [from] [to]のように書けば，fromのパスで指定したファイルがtoのパスの下に送られる．\n[client rsa pub key path]は，キーペアを作るときに変えていなければ，(Windowsの場合は)\nC:\\Users\\[user]\\.ssh\\id_rsa.pub  である．\n(4) authorized_keysファイルを作る 次に，サーバ側で鍵の設定をする．(3)で，ホームディレクトリ直下に公開鍵が送られたとする．このファイルの内容をauthorized_keysファイルにコピーする．その後，chmodコマンドで所有者のみが読めるようにする．\n(server) cat id_rsa.pub \u0026gt;\u0026gt; ./.ssh/authorized_keys (server) chmod 700 ./.ssh (server) chmod 600 ./.ssh/authorized_keys (server) rm -rf id_rsa.pub  (5) sshd_configの設定 (サーバ側) 公開鍵認証を有効化するために，sshdの設定ファイルを編集する．一旦バックアップをとる．\n(server) cd /etc/ssh (server) sudo cp sshd_config sshd_config.bk (server) sudo vim sshd_config  以下の行のコメントを外し，有効化する．\n#PubkeyAuthentication yes #AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2  一応Rootでのログインはできないようにしておく．\nPermitRootLogin no  参考  SSHの鍵認証設定  (6) .sshのconfigファイルの設定 (クライアント側) (5)までで公開鍵認証でSSH接続できるようになった．\nssh -i [client rsa private key path] [user]@[IP address of the server]  接続のたびにこのコマンドを打つのはめんどくさいので，エイリアス設定をする．.ssh/configファイルに以下を追加 (Windowsの場合．秘密鍵が.ssh直下にあるとする)．\nHost [server name] HostName xxx.xxx.xxx.xxx # IP address of the server User [user] # user name of the server Identityfile C:\\Users\\[user]\\.ssh\\id_rsa  このようにすると，\nssh [servername]  でサーバに接続できる．\n2 Sambaの設定 Sambaとは，Linux上でWindowsのネットワーク機能を実現するソフトウェアである．これを使うことで，ファイルサーバの機能が実現される．\n以下，ホームディレクトリ直下のShare_dirを共有するものとする．ここでは，同一のネットワークのホストに対してフルパーミッションで権限を与える場合を想定する．\n参考  【Linux】Ubuntuでファイルサーバーを作って遊ぼう！(中級者～上級者向け)【世界一わかりやすい解説(かもしれない)】  このYouTubeの動画を参考にした．    (1) Sambaのインストール (server) sudo apt install -y samba  (2) samba.confのバックアップと編集 (server) cd /etc/samba/ (server) sudo cp smb.conf smb.conf.bk (server) sudo vim smb.conf  末尾に以下を追加．\n# fileserver [fileserver] comment = Ubuntu FileServer path = /home/[user]/Share_dir/ browseable = yes read only = no guest ok = yes guest only = yes create mode = 0777 directory mode = 0777  (3) 再起動と自動起動の設定 (server) sudo systemctl restart smbd nmbd (server) sudo systemctl enable smbd nmbd  3. バックアップ 共有したディレクトリをHDDなどにバックアップすることを考える．これは，突然PCが落ちてデータが飛ぶようなリスクへの対策となる．\nここではHDDがマウントポイント/mnt/Elementsにマウントされているとし，システム起動時にマウントするように設定したとする．\n(1) バックアップ用のディレクトリの作成 Server_backupディレクトリにバックアップを取るものとする．\n(server) mkdir /mnt/Elements/Server_backup  (2) バックアップの設定 ここでは，差分バックアップを取るものとする．このときに使うコマンドはrsyncである．\n(server) sudo rsync -av /home/[user]/Share_dir/ /mnt/Elements/Server_backup  これは，Share_dirの中身を/mnt/Elements/Server_backupにバックアップするというようなものである．ここで，引数-avは，今どこをコピーしているのかを表示出力するためのものである．\n(3) バックアップのスケジューラの設定 毎日バックアップを更新するために，スケジューラを用いる．crontabを編集すれば良い．\n(server) sudo vim /etc/crontab  以下を追加した．\n# m h dom mon dow user\tcommand 00 3\t* * *\troot rsync -av /home/[user]/Share_dir/ /mnt/Elements/Server_backup  4. CUI運用にする ファイルサーバとしての運用であれば，CUI運用の方が良い．\n# 一時的にCUIモードにする (server) sudo systemctl isolate multi-user.target # デフォルトをCUIモードにする (server) sudo systemctl set-default multi-user.target  GUIに戻したいときは以下のコマンドを実行．\n# 一時的にGUIモードにする (server) sudo systemctl isolate graphical.target # デフォルトをGUIモードにする (server) sudo systemctl set-default graphical.target  5. まとめ ファイルサーバを作った際のログを残した．\n","date":1625823586,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1625823586,"objectID":"ca04bb706e701eccfe4dc16f78019f27","permalink":"https://tachibana-ai.netlify.app/post/create_server/","publishdate":"2021-07-09T18:39:46+09:00","relpermalink":"/post/create_server/","section":"post","summary":"0. はじめに 以前ファイルサーバを構築したので，そのときのログを","tags":["Ubuntu","Server"],"title":"ファイルサーバを構築したときのログ (Ubuntu18.04)","type":"post"},{"authors":[],"categories":["PC"],"content":"0. はじめに この記事では，私が普段使っているPC周りの環境を書く．就職したらもっと良いのがほしい．\n1. 自宅の環境とノートPC  デスクトップ  Lenovo V530  色々手を加えた   OS: Windows11 SSD: 512GB  もともと256GB．換装した．   RAM: 16GB CPU: Core i5-9500 GPU (増設): GTX-1050Ti  PH-GTX1050TI-4G     ノート  iiyama 14インチ (BTO) OS: Ubuntu20.04 SSD: 256GB HDD: 1TB RAM: 16GB CPU: Core i5-8265   モニター  ASUS 23インチ    2. 研究室の環境  デスクトップ  自作 OS: Ubuntu20.04 SSD: 480GB RAM: 16GB CPU: Core i5-8400   モニター  iiyama 23インチ ASUS 27インチ    3. 用途  デスクトップ (家)  ゲーム  ドラクエ11S楽しい！   Virtualboxを使ったセキュリティの勉強  最近ハッキング・ラボのつくりかたという本を読んでる   Hugoを使ってこのサイトの記事の編集 学会発表の練習のためにOBSを使って録音   ノートパソコン  研究  デスクトップからモニターを外してデュアルモニターにして作業してる 論文を読む プログラムを書く TeXで資料をまとめる / スライドを作る 論文を書く   勉強  最近は非線形現象の勉強を少しやってる プログラムを書く Markdown形式でまとめる     デスクトップ (研究室)  ノートパソコンと同じ環境を作っているので，研究室ではノートの代わりにデスクトップを使っている GitHubのprivateリポジトリで共有してる    ","date":1625739353,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1625739353,"objectID":"59b96572dd4af2f16ba8d10bcd4f9258","permalink":"https://tachibana-ai.netlify.app/post/myenv/","publishdate":"2021-07-08T19:15:53+09:00","relpermalink":"/post/myenv/","section":"post","summary":"0. はじめに この記事では，私が普段使っているPC周りの環境を書","tags":["PC"],"title":"普段使っているPC周りの環境","type":"post"},{"authors":[],"categories":["Docker"],"content":"0. はじめに この記事では，Docker containerとしてPythonの開発環境を作ったときのメモを残す． この記事の内容は，GitHubのサブのアカウントのpublicリポジトリで公開している．\n1. 必要なもの  Docker Engineのインストール VSCodeのインストール  Remote Developementの導入    2. 基本構成  Docker Image  pythonの3.8.10-busterを使っている．   ディレクトリ構成 |- test_code/ # コードを置いている |- .devcontainer/ |- devcontainer.json |- docker-compose.yml |- dockerfile |- requirements.txt    各種ファイル  devcontainer.json  VSCodeのRemoteを使うときの設定 // For format details, see https://aka.ms/devcontainer.json. For config options, see the README at: // https://github.com/microsoft/vscode-dev-containers/tree/v0.177.0/containers/docker-existing-dockerfile { // 名前は任意 \u0026quot;name\u0026quot;: \u0026quot;Docker-Python\u0026quot;, // dockercomposefileの場所 (同階層に置いている) \u0026quot;dockerComposeFile\u0026quot;: \u0026quot;docker-compose.yml\u0026quot;, // 使う拡張機能 \u0026quot;extensions\u0026quot;: [ \u0026quot;ms-python.python\u0026quot; ], // ここに記載している\u0026quot;service\u0026quot;名とdocker-compose.ymlに記載している\u0026quot;service\u0026quot;を一致させる \u0026quot;service\u0026quot;: \u0026quot;python\u0026quot;, // コンテナ内に入ったときのworkdir \u0026quot;workspaceFolder\u0026quot;: \u0026quot;/code\u0026quot;, // VSCodeを閉じたときのアクション \u0026quot;shutdownAction\u0026quot;: \u0026quot;stopCompose\u0026quot; }     docker-compose.yml  複数のコンテナを定義し，実行することができる． 今回は，1つのコンテナに対する処理を記述 version: \u0026quot;3\u0026quot; # 3が最新版 services: python: # ここの名前とdevcontainer.jsonの\u0026quot;service\u0026quot;を一致させる build: . # 同階層のdockerfileからビルドする command: sleep infinity volumes: - ../:/code # 上階層のディレクトリをDocker Container上のworkdirにマウント environment: SHELL: /bin/bash     dockerfile  コンテナを作るための処理 ########### Image file ########### FROM python:3.8.10-buster ################################## ########### update and install packages ########### # apt-get upgradeに-yを付けないとexit 1になります．追加しました．(5/23) RUN apt-get update \u0026amp;\u0026amp; \\ apt-get -y upgrade \u0026amp;\u0026amp; \\ apt-get install -y vim git \u0026amp;\u0026amp; \\ rm -rf /var/lib/apt/lists* ################################################### ########### create workspace ########### RUN mkdir /code WORKDIR /code ADD ./requirements.txt /code/ ######################################## ########### install packages via pip ########### RUN pip3 install -r requirements.txt ADD . /code/ ################################################     requirements.txt  pip installするファイル ############ Requirements Packages ############ pylint numpy scipy sympy matplotlib statsmodels sklearn pandas networkx      3. 使用時  test_codeと同階層に自分のコードを格納したフォルダを配置して，VSCodeの左下の\u0026quot;Open Remote Window\u0026quot;を選択． Reopen in Containerを選択． ワークスペースが開いたら，terminalを開き，python *.pyで実行する．  4. いろいろ変えたいとき  pip installするパッケージを変更したいとき  requirements.txtを書き換える   Pythonのバージョンを3の別バージョンに変えたいとき  dockerfileのイメージファイル (2行目のFROM以下) を書き換える．   Pythonのバージョンを2にしたいとき  pythonには2系がないので，イメージファイルをUbuntu等にして1からインストールする．    ","date":1625738331,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1625738331,"objectID":"7471e873b14f0c8e0af18a6a496e2caf","permalink":"https://tachibana-ai.netlify.app/post/docker_python/","publishdate":"2021-07-08T18:58:51+09:00","relpermalink":"/post/docker_python/","section":"post","summary":"0. はじめに この記事では，Docker containerとして","tags":["Python","Docker"],"title":"Python3の開発環境をDocker containerとして作る","type":"post"},{"authors":[],"categories":["Ubuntu"],"content":"0. はじめに 私が学部4年から修士1年までに使っていたPythonの開発環境はUbuntu上にpipとpipenvを入れ，pipenvで仮想環境を作って使うというものだった．Ubuntuを20にアップグレードしたときにこれまで使っていた仮想環境でプログラムが動かない，ということが起こった．\nこのように，OSに1つの環境を作って動かそうとした際には，更新に伴いプログラムが動かなくなるというリスクがある．さらに，以下のような問題が挙げられる．\n OSが汚れる  OSに直接インストールするので，複数のバージョンが共存するといったことが起こる．   問題の切り分けが難しい  OSのアップグレードの問題なのか，パッケージの問題なのか分からなくなる．    そんなときDockerに出会う．Dockerの説明は省略するが，イメージは1つのサーバに独立した複数のサーバを同時に構築することができる，というものである．これは良いと思い，研究の開発環境をDocker container上に作ることにした．\nUbuntu20.04にDocker Engineをインストールするためのシェルスクリプトを作ったので，この記事で共有する．\n1. Dockerの利点と欠点 私が思うDockerの利点と欠点を以下に示す．あまり詳しくないエアプ発言かもしれない．\n利点  Dockerfileに開発に必要なパッケージのインストールについて記述できるので，Dockerfileとして記述してしまえば，そのとおりに環境構築ができる． 移植しやすい． Python等のバージョンが変わったときもDockerfileの内容を変えることで最新版にアップデートできる． OSのバージョンに依らない．依存関係に関する問題を，パッケージのバージョンにまで絞り込める． OSが汚れない． 1つのPCの中に複数の異なる開発環境を構築できる． VSCodeの拡張機能が優秀で，使いやすい．  欠点  Windowsでエラーが出ることが多い気がする．Windowsで同じようなことをしようと思ってもうまく動かないことがある． WindowsではWSL2をバックエンドにしているので，メモリの消費量が多い．まともに動かそうと思うとメモリ16GBはないと厳しい． 導入コスト．(自分が賢くないだけだけど) 難しい．  2. インストールのためのシェルスクリプト 福山大学の金子邦彦先生のウェブサイト がかなり参考になった．Docker Engineの導入以外にもかなり参考にさせていただいた．\n次のようなシェルスクリプトを作り，~/install_docker.shとして保存した．\n#!/bin/bash # Written by A.Tachibana, 2021/3/19 # Objective ## To install docker in Ubuntu 20 # Reference ## https://www.kkaneko.jp/tools/docker/ubuntu_docker.html ############ To execute ############ # chmod 755 install_docker.sh # ./install_docker.sh #################################### # Require password printf \u0026quot;password: \u0026quot; read -s password # Update and Upgrade echo \u0026quot;$password\u0026quot; | sudo -S apt update \u0026amp;\u0026amp; sudo -S apt -y upgrade # Install Docker ## Delete old version (if exists) sudo -S apt -y remove docker docker-engine docker.io containerd docker-ce docker-ce-cli sudo -S apt -y autoremove ## Install required software sudo -S apt update sudo -S apt -y install apt-transport-https ca-certificates curl software-properties-common sudo -S apt -y install linux-image-generic ## Set docker repository curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - apt-key fingerprint 0EBFCD88 sudo -S add-apt-repository \\ \u0026quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -sc) \\ stable\u0026quot; sudo -S apt update ## Install docker.io sudo -S apt -y install docker.io containerd docker-compose ## Add authority sudo -S usermod -aG docker $USER ## Set autostart sudo -S systemctl unmask docker.service sudo -S systemctl enable docker sudo -S systemctl is-enabled docker ## let user ubuntu use docker sudo gpasswd -a $USER docker  このファイルに実行権限を与え，実行する．\nchmod 755 install_docker.sh ./install_docker.sh  なお，このシェルスクリプトは，私のサブのGitHubアカウントのpublicリポジトリにアップロードしている．\n参考  Docker Engine のインストールと使用法（Ubuntu 上）  ","date":1625736339,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1630283319,"objectID":"2d5b8af647c7799f914162293fa262cc","permalink":"https://tachibana-ai.netlify.app/post/ubuntu_docker/","publishdate":"2021-07-08T18:25:39+09:00","relpermalink":"/post/ubuntu_docker/","section":"post","summary":"0. はじめに 私が学部4年から修士1年までに使っていたPytho","tags":["Docker","Ubuntu"],"title":"Ubuntu20.04にDocker Engineをインストールする","type":"post"},{"authors":[],"categories":["Ubuntu"],"content":"0. はじめに 授業でRとRStudioを使う必要があったのでインストールした． 前処理がめんどくさかったので，シェルスクリプトを書いた．\n参考  RとRStudioのインストールと初期設定 Linux (Ubuntu) 編  1. 前処理 次のようなシェルスクリプトを書き，~/install_R_requirement.shとして保存した．\n#!/bin/bash # Written by A.Tachibana, 2021/4/28 # Objective ## To install R in Ubuntu 20 ## Requirement packages # Reference ## https://yukiyanai.github.io/jp/resources/docs/install-R_ubuntu.pdf ############ To execute ############ # chmod 755 install_R_requirement.sh # ./install_R_requirement.sh #################################### # Require password printf \u0026quot;password: \u0026quot; read -s password # Update and Upgrade echo \u0026quot;$password\u0026quot; | sudo -S apt update \u0026amp;\u0026amp; sudo -S apt -y upgrade # 1. Install tools sudo -S apt -y install gdebi-core wget # 2. Get fonts sudo -S apt -y install fonts-ipaexfont fc-cache -f -v # 3. Install requirement tools ## requirement tools sudo -S apt -y install build-essential libxml2-dev libssl-dev libx11-dev libglu1-mesa-dev libmagick++-dev libudunits2-0 libudunits2-dev libgdal-dev libproj-dev libgmp3-dev curl  このファイルに実行権限を与え，実行する．\nchmod 755 install_R_requirement.sh ./install_R_requirement.sh  2. RとRStudioのインストール 次のようなシェルスクリプトを書き，~/install_R.shとして保存した．\n#!/bin/bash # Written by A.Tachibana, 2021/4/28 # Objective ## To install R in Ubuntu 20 # Reference ## https://yukiyanai.github.io/jp/resources/docs/install-R_ubuntu.pdf ############ To execute ############ # chmod 755 install_R.sh # ./install_R.sh # execute after install_R_requirement.sh #################################### # Require password printf \u0026quot;password: \u0026quot; read -s password # 1. add repository sudo -S apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 sudo -S add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/' # 2. install R base sudo -S apt update sudo -S apt -y install r-base # 3. install RStudio cd ~/Downloads/ # 2021/4/28 wget https://download1.rstudio.org/desktop/bionic/amd64/rstudio-1.4.1106-amd64.deb sudo -S gdebi rstudio-1.4.1106-amd64.deb  このファイルに実行権限を与え，実行する．\nchmod 755 install_R.sh ./install_R.sh  注意点  RStudioに関しては2021/4/28時点で最新のものをダウンロードしたが，現在はもっと新しいものが出ていると思う．  「最新版を持ってくる」ような書き方が分からなくて，頭の悪い書き方をしている．   install_R.shは，install_R_requirement.shの実行後に実行する．  ","date":1625735266,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1625735266,"objectID":"529205779250c5d569ccc2521875a22a","permalink":"https://tachibana-ai.netlify.app/post/ubuntu_rstudio/","publishdate":"2021-07-08T18:07:46+09:00","relpermalink":"/post/ubuntu_rstudio/","section":"post","summary":"0. はじめに 授業でRとRStudioを使う必要があったのでイン","tags":["R","Ubuntu"],"title":"Ubuntu20.04にRとRStudioをインストールする","type":"post"},{"authors":[],"categories":["Ubuntu"],"content":"0. はじめに  UbuntuにTeXを入れたときのメモ  1. やること 好きなエディタを入れる TeXLiveを入れる ~/.latexmkrcを作る 動作テスト  好きなエディタを入れる  私はTeXの文書を作るときはAtomを使うので，Atomを入れた．  公式サイト (https://atom.io/) からdebをダウンロードして実行． sudo apt install ./atom-amd64.deb   パッケージを入れる．  latex language-latex latexer pdf-view      TeXLiveを入れる  日本の大学(e.g. NAIST)のリポジトリからダウンロードして中身を展開する． wget http://ftp.naist.jp/pub/CTAN/systems/texlive/tlnet/install-tl-unx.tar.gz tar -zxvf install-tl-unx.tar.gz cd install-tl-[date]   管理者権限で実行する．リポジトリはダウンロードしたところ． sudo ./install-tl --repository http://ftp.naist.jp/pub/CTAN/systems/texlive/tlnet/   \u0026ldquo;I\u0026quot;でインストール   パスを通す． sudo /usr/local/texlive/2020/bin/x86_64-linux/tlmgr path add   これは私の例である．   TeXLiveのアップデート  参照するリポジトリの指定 sudo tlmgr option repository http://ftp.naist.jp/pub/CTAN/systems/texlive/tlnet/   アップデート sudo tlmgr update --self --all      ~/.latexmkrcの作成  毎回コンパイル(platexしてdvipdfmxして\u0026hellip;)というのは面倒 → latexmkを使うことで，保存する度に自動的にpdfまで生成するようにする．  参考: latexmkの薦め Ubuntuでは以下のファイルをホームディレクトリ直下(~/.latexmkrc)に配置したところ，正常に動作した．  #!/usr/bin/perl $latex = 'platex -guess-input-enc -src-specials -interaction=nonstopmode -synctex=1'; $latex_silent = 'platex -interaction=batchmode'; $dvips = 'dvips'; $bibtex = 'pbibtex'; $makeindex = 'mendex -r -c -s jind.ist'; $dvi_previewer = 'start dviout'; $dvipdf = 'dvipdfmx %O -o %D %S'; $pdf_previewer = 'xdg-open'; $preview_continuous_mode = 1; $pdf_mode = 3; $pdf_update_method = 4;   latexmkについては， vim ~/.latexmkrc  などとして，上記のようなものを作ればよい．\n    動作テスト platex  \u0026ldquo;test.tex\u0026quot;という名前のファイルをtextestというディレクトリの中に作った． \\documentclass[dvipdfmx]{jsarticle} \\title{ {\\LaTeX} 動作テスト・サンプルファイル} \\date{\\today} \\begin{document} \\maketitle \\section{test} これはテストです． \\begin{equation} f(x) = 2x + 3 \\end{equation} \\end{document}   textestというディレクトリに移動して，以下のコマンドを実行する． platex test.tex \u0026amp;\u0026amp; dvipdfmx test.dvi  実行後にpdfファイルが問題なく生成されていたら良い．\n  latexmk  先程のファイルに対して， latexmk test.tex  として，正しくpdfファイルが生成され，変更して保存した後にpdfファイルが更新されたら問題なく導入されている．\n  ","date":1625734811,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1625734811,"objectID":"dcc46d0d1cccad07876cdbbfa6d610c0","permalink":"https://tachibana-ai.netlify.app/post/ubuntu_tex/","publishdate":"2021-07-08T18:00:11+09:00","relpermalink":"/post/ubuntu_tex/","section":"post","summary":"0. はじめに UbuntuにTeXを入れたときのメモ 1. やること 好","tags":["TeX","Ubuntu"],"title":"Ubuntu20.04にTeX Liveをインストールする","type":"post"},{"authors":[],"categories":["Introduction"],"content":"0. 自己紹介 (2021年現在)  ハンドルネーム  たちばな / 橘 あい   居住地  大阪府   学歴  学士 現在修士2年   研究  計算機科学 非線形力学系   趣味  旅行 自転車 技術書を読んで手元で動かすこと    1. 記事を始めたきっかけ もともとGitHubのリポジトリにMarkdown形式で自分が勉強したこと / 知ってることをまとめていた．\n先日，研究室の後輩からHugoというものを使うとMarkdown形式で書いた文書をウェブサイトにできるということを教えてもらったので，ウェブサイトにしようかなと思った．\n2. 今後の予定 博士進学せず，来年4月から就職します．それまでにこれまで書いたMarkdownの資料をこちらに移植したいと思っています．\n","date":1625728442,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1625728442,"objectID":"2247257f33c5eaa1cd0616bf37b07249","permalink":"https://tachibana-ai.netlify.app/post/first-post/","publishdate":"2021-07-08T16:14:02+09:00","relpermalink":"/post/first-post/","section":"post","summary":"0. 自己紹介 (2021年現在) ハンドルネーム たちばな / 橘 あい 居","tags":["Introduction"],"title":"自己紹介","type":"post"}]
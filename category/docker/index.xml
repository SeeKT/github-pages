<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker | 立ち話</title>
    <link>https://tachibana-ai.netlify.app/category/docker/</link>
      <atom:link href="https://tachibana-ai.netlify.app/category/docker/index.xml" rel="self" type="application/rss+xml" />
    <description>Docker</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ja-jp</language><copyright>@SeeKT</copyright><lastBuildDate>Mon, 30 Aug 2021 09:15:39 +0900</lastBuildDate>
    <image>
      <url>https://tachibana-ai.netlify.app/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Docker</title>
      <link>https://tachibana-ai.netlify.app/category/docker/</link>
    </image>
    
    <item>
      <title>RStudio ServerをDockerで使うときのメモ</title>
      <link>https://tachibana-ai.netlify.app/post/docker_r/</link>
      <pubDate>Mon, 30 Aug 2021 09:15:39 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/docker_r/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;RとRStudioもDocker containerとして使えれば少しめんどくさかったインストール工程 (&lt;a href=&#34;https://tachibana-ai.netlify.app/post/ubuntu_rstudio/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ubuntu20.04にRとRStudioをインストールする&lt;/a&gt;) をやらなくても良いのではないだろうか，と考えた．&lt;/p&gt;
&lt;p&gt;調べたところ，RockerというものでRStudio ServerをDockerで使えるらしい&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;．&lt;/p&gt;
&lt;p&gt;今回は備忘録として，Rockerを使ったときのメモを残すことにした．&lt;/p&gt;
&lt;h3 id=&#34;1-準備&#34;&gt;1. 準備&lt;/h3&gt;
&lt;p&gt;最低限必要なことは，Docker Engineのインストールである．UbuntuへのDocker Engineのインストールは以前記事にした&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;．WindowsやMacについては他にも様々な記事があると思う．&lt;/p&gt;
&lt;h3 id=&#34;2-使い方&#34;&gt;2. 使い方&lt;/h3&gt;
&lt;p&gt;今回は，&lt;a href=&#34;https://hub.docker.com/r/rocker/tidyverse&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;rocker/tidyverse&lt;/code&gt;&lt;/a&gt; を使う．おそらく&lt;code&gt;rocker/verse&lt;/code&gt; なども同様の方法でできると思う．&lt;/p&gt;
&lt;p&gt;まず，イメージファイルをローカルなマシンに落とす．これは，&lt;code&gt;docker pull&lt;/code&gt; コマンドを用いればよい．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull rocker/tidyverse
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;イメージファイルがあるかどうかは，次のコマンドで調べられる．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker image ls | grep tidyverse
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例えば，私のマシンで実行すると以下のように出力された．確かに &lt;code&gt;rocker/tidyverse&lt;/code&gt; のイメージファイルがあることがわかる．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tcbn@tcbn-V530-15ICR:~$ docker image ls | grep tidyverse
rocker/tidyverse                                latest                  63d48e0c8338   9 days ago      2.41GB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;イメージファイルがある状態で，以下のように &lt;code&gt;docker run&lt;/code&gt; コマンドを実行すればバックグラウンドでRStudio Serverが立ち上がる．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -d -p 8787:8787 -e PASSWORD=[yourpasswordhere] -v [mountdir]:/home/rstudio rocker/tidyverse
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここで，それぞれのオプションは以下のようなものである．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--rm&lt;/code&gt;: コンテナの終了後にコンテナを削除する．&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt;: 端末から切り離してバックグラウンドで実行する．&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;: ポートマッピングを設定する．
&lt;pre&gt;&lt;code&gt;-p [port number (host)]:[port number (container)]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt;: 環境変数を設定する．&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v&lt;/code&gt;: ボリュームをマウントする．
&lt;pre&gt;&lt;code&gt;-v [host directory]:[container directory]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このコマンドの実行後，&lt;code&gt;http://localhost:8787/&lt;/code&gt; にアクセスすればユーザ名とパスワードの入力画面が出てくる．そこで，ユーザ名に &lt;code&gt;rstudio&lt;/code&gt; を入力し，パスワードに &lt;code&gt;-e&lt;/code&gt; で指定したパスワードを入力する．&lt;/p&gt;
&lt;p&gt;実際に私のマシンでやってみる．&lt;code&gt;~/r_sample&lt;/code&gt; というディレクトリをマウントする．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tcbn@tcbn-V530-15ICR:~/r_sample$ ls
requirements.r  test.r
tcbn@tcbn-V530-15ICR:~/r_sample$ docker run --rm -d -p 8787:8787 -e PASSWORD=mypassword -v $(pwd):/home/rstudio rocker/tidyverse
83136d6a3c656386e74d14899e0ad55d4b10603ade1bad0dfe7dbde88e07e75c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この状態で，&lt;code&gt;http://localhost:8787/&lt;/code&gt; にアクセスすると，以下のようにユーザ名とパスワードの入力画面が出てくる．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ユーザ名とパスワードの入力画面&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/input_userinfo.png&#34; alt=&#34;fig1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ユーザ名とパスワードの入力画面
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;ユーザ名に &lt;code&gt;rstudio&lt;/code&gt;，パスワードに指定したパスワードを入力し，サインインすると，次のような画面になる．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-rstudio-server&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/rstudio_server.png&#34; alt=&#34;fig2&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      RStudio Server
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;先程見た&lt;code&gt;~/rsample&lt;/code&gt; がマウントされていることがわかる．あとは必要なパッケージをインストールするなどしたら使えるようになる．&lt;/p&gt;
&lt;p&gt;コンテナ内のRStudio Server側でrのソースコードを書き換えるとそれがマウントしたローカルなディレクトリにも反映される．&lt;/p&gt;
&lt;p&gt;今起動しているDocker containerを &lt;code&gt;docker ps&lt;/code&gt; コマンドで見ると，&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tcbn@tcbn-V530-15ICR:~/r_sample$ docker ps
CONTAINER ID   IMAGE              COMMAND   CREATED         STATUS         PORTS                                       NAMES
83136d6a3c65   rocker/tidyverse   &amp;quot;/init&amp;quot;   7 minutes ago   Up 7 minutes   0.0.0.0:8787-&amp;gt;8787/tcp, :::8787-&amp;gt;8787/tcp   inspiring_nash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;となっている．コンテナを &lt;code&gt;docker stop&lt;/code&gt; コマンドで終了した後に &lt;code&gt;docker ps -a&lt;/code&gt; コマンドでコンテナ一覧を見る．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tcbn@tcbn-V530-15ICR:~/r_sample$ docker stop inspiring_nash 
inspiring_nash
tcbn@tcbn-V530-15ICR:~/r_sample$ docker ps -a | grep tidyverse
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;--rm&lt;/code&gt; オプションで指定したとおり，終了後のコンテナが削除されている．&lt;/p&gt;
&lt;h3 id=&#34;3-まとめ&#34;&gt;3. まとめ&lt;/h3&gt;
&lt;p&gt;今回は，RStudio ServerをDockerで使うときのやり方を簡単にまとめた．例えば，&lt;code&gt;rocker/tidyverse&lt;/code&gt; をイメージファイルに指定してDockerfileを作り，使いやすい環境を作るといったこともできる．&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://jsta.github.io/r-docker-tutorial/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Docker tutorial&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://tachibana-ai.netlify.app/post/ubuntu_docker/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ubuntu20.04にDocker Engineをインストールする&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Python3の開発環境をDocker containerとして作る</title>
      <link>https://tachibana-ai.netlify.app/post/docker_python/</link>
      <pubDate>Thu, 08 Jul 2021 18:58:51 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/docker_python/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;この記事では，Docker containerとしてPythonの開発環境を作ったときのメモを残す．
この記事の内容は，GitHubのサブのアカウントの&lt;a href=&#34;https://github.com/tcbn-ai/Docker_python_env&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;publicリポジトリ&lt;/a&gt;で公開している．&lt;/p&gt;
&lt;h3 id=&#34;1-必要なもの&#34;&gt;1. 必要なもの&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Docker Engineのインストール&lt;/li&gt;
&lt;li&gt;VSCodeのインストール
&lt;ul&gt;
&lt;li&gt;Remote Developementの導入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-基本構成&#34;&gt;2. 基本構成&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Docker Image
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/python&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;python&lt;/a&gt;の&lt;a href=&#34;https://github.com/docker-library/python/blob/e0e01b8482ea14352c710134329cdd93ece88317/3.8/buster/Dockerfile&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;3.8.10-buster&lt;/a&gt;を使っている．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ディレクトリ構成
&lt;pre&gt;&lt;code&gt;|- test_code/   # コードを置いている
|- .devcontainer/
    |- devcontainer.json
    |- docker-compose.yml
    |- dockerfile
    |- requirements.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;各種ファイル&#34;&gt;各種ファイル&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;devcontainer.json&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;VSCodeのRemoteを使うときの設定
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
// https://github.com/microsoft/vscode-dev-containers/tree/v0.177.0/containers/docker-existing-dockerfile
{
  // 名前は任意
  &amp;quot;name&amp;quot;: &amp;quot;Docker-Python&amp;quot;,
  // dockercomposefileの場所 (同階層に置いている)
  &amp;quot;dockerComposeFile&amp;quot;: &amp;quot;docker-compose.yml&amp;quot;,
  // 使う拡張機能
  &amp;quot;extensions&amp;quot;: [
    &amp;quot;ms-python.python&amp;quot;
  ],
  // ここに記載している&amp;quot;service&amp;quot;名とdocker-compose.ymlに記載している&amp;quot;service&amp;quot;を一致させる
  &amp;quot;service&amp;quot;: &amp;quot;python&amp;quot;,
  // コンテナ内に入ったときのworkdir
  &amp;quot;workspaceFolder&amp;quot;: &amp;quot;/code&amp;quot;,
  // VSCodeを閉じたときのアクション
  &amp;quot;shutdownAction&amp;quot;: &amp;quot;stopCompose&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;複数のコンテナを定義し，実行することができる．&lt;/li&gt;
&lt;li&gt;今回は，1つのコンテナに対する処理を記述
&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;version: &amp;quot;3&amp;quot;    # 3が最新版
services: 
    python: # ここの名前とdevcontainer.jsonの&amp;quot;service&amp;quot;を一致させる
        build: .    # 同階層のdockerfileからビルドする
        command: sleep infinity
        volumes: 
            - ../:/code  # 上階層のディレクトリをDocker Container上のworkdirにマウント
        environment: 
            SHELL: /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dockerfile&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;コンテナを作るための処理
&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;########### Image file ###########
FROM python:3.8.10-buster
##################################

########### update and install packages ###########
# apt-get upgradeに-yを付けないとexit 1になります．追加しました．(5/23)
RUN apt-get update &amp;amp;&amp;amp; \
    apt-get -y upgrade &amp;amp;&amp;amp; \
    apt-get install -y vim git &amp;amp;&amp;amp; \
    rm -rf /var/lib/apt/lists*
###################################################

########### create workspace ###########
RUN mkdir /code
WORKDIR /code
ADD ./requirements.txt /code/
########################################

########### install packages via pip ###########
RUN pip3 install -r requirements.txt
ADD . /code/
################################################
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requirements.txt&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip install&lt;/code&gt;するファイル
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;############ Requirements Packages ############
pylint
numpy
scipy
sympy
matplotlib
statsmodels
sklearn
pandas
networkx
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-使用時&#34;&gt;3. 使用時&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;test_code&lt;/code&gt;と同階層に自分のコードを格納したフォルダを配置して，VSCodeの左下の&amp;quot;Open Remote Window&amp;quot;を選択．&lt;/li&gt;
&lt;li&gt;Reopen in Containerを選択．&lt;/li&gt;
&lt;li&gt;ワークスペースが開いたら，terminalを開き，&lt;code&gt;python *.py&lt;/code&gt;で実行する．&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-いろいろ変えたいとき&#34;&gt;4. いろいろ変えたいとき&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip install&lt;/code&gt;するパッケージを変更したいとき
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;requirements.txt&lt;/code&gt;を書き換える&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pythonのバージョンを3の別バージョンに変えたいとき
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dockerfile&lt;/code&gt;のイメージファイル (2行目の&lt;code&gt;FROM&lt;/code&gt;以下) を書き換える．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pythonのバージョンを2にしたいとき
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/python&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;python&lt;/a&gt;には2系がないので，イメージファイルをUbuntu等にして1からインストールする．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>

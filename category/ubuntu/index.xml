<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ubuntu | 立ち話</title>
    <link>https://tachibana-ai.netlify.app/category/ubuntu/</link>
      <atom:link href="https://tachibana-ai.netlify.app/category/ubuntu/index.xml" rel="self" type="application/rss+xml" />
    <description>Ubuntu</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ja-jp</language><copyright>@SeeKT</copyright><lastBuildDate>Sat, 20 Nov 2021 09:20:14 +0900</lastBuildDate>
    <image>
      <url>https://tachibana-ai.netlify.app/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Ubuntu</title>
      <link>https://tachibana-ai.netlify.app/category/ubuntu/</link>
    </image>
    
    <item>
      <title>KVM を使って仮想マシンを作成する (試験勉強用)</title>
      <link>https://tachibana-ai.netlify.app/post/setting_kvm/</link>
      <pubDate>Sat, 20 Nov 2021 09:20:14 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/setting_kvm/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;Linux の試験を受けようと考えている．普段家で使っている OS は Ubuntu 20.04 であるが，試験勉強用の環境を普段使っている OS とは隔離された形で作りたいと思った．&lt;/p&gt;
&lt;p&gt;そこで，今回は Ubuntu の仮想化機能である KVM を用いて仮想マシンを作成する．あくまで試験勉強用の環境であり，一般用途として使う際に適しているとは限らない．&lt;/p&gt;
&lt;h5 id=&#34;目次&#34;&gt;目次&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;1 &lt;a href=&#34;#section1&#34;&gt;構成と仕様&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2 &lt;a href=&#34;#section2&#34;&gt;KVM の導入と仮想マシンの作成&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;2.1 &lt;a href=&#34;#section2-1&#34;&gt;KVM の導入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2.2 &lt;a href=&#34;#section2-2&#34;&gt;仮想マシンの作成&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3 &lt;a href=&#34;#section3&#34;&gt;SSH 接続の設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4 &lt;a href=&#34;#section4&#34;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-a-namesection1構成と仕様a&#34;&gt;1. &lt;a name=&#34;section1&#34;&gt;構成と仕様&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;試験では Debian 系の OS と Red Hat 系の OS の両方の知識が求められると考えられるので，両方を導入する．Debian 系 OS として Ubuntu 20.04 を導入し，Red Hat 系 OS として CentOS 7 を導入する．&lt;/p&gt;
&lt;p&gt;また，練習用途として利用するために，次のようなことを求める．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;インターネットに接続できる．&lt;/li&gt;
&lt;li&gt;ホスト OS と ssh で接続できる．&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-a-namesection2kvm-の導入と仮想マシンの作成a&#34;&gt;2. &lt;a name=&#34;section2&#34;&gt;KVM の導入と仮想マシンの作成&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;21-a-namesection2-1kvm-の導入a&#34;&gt;2.1. &lt;a name=&#34;section2-1&#34;&gt;KVM の導入&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;仮想化機能の KVM を導入する (参考:&lt;a href=&#34;https://www.tecmint.com/install-kvm-on-ubuntu/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to Install KVM on Ubuntu 20.04&lt;/a&gt;)．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(Host)
sudo apt -y install virt-manager qemu-system
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;KVM をインストールすると，デフォルトで &lt;code&gt;virbr0&lt;/code&gt; というブリッジが作成される (参考: &lt;a href=&#34;https://qiita.com/yoshiyasu1111/items/8d07a4fd55116fba07f7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KVMでゲストOSをブリッジ接続する&lt;/a&gt;)．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(Host)
tcbn@tcbn-V530-15ICR:~$ ifconfig virbr0
virbr0: flags=4099&amp;lt;UP,BROADCAST,MULTICAST&amp;gt;  mtu 1500
        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255
        ether 52:54:00:fe:91:8f  txqueuelen 1000  (Ethernet)
        RX packets 291159  bytes 16410705 (16.4 MB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 582378  bytes 822922760 (822.9 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;192.168.122.0&lt;/code&gt; というネットワークであり，ホスト OS は &lt;code&gt;192.168.122.1&lt;/code&gt; という IP address でゲスト OS と接続できる．&lt;/p&gt;
&lt;h4 id=&#34;22-a-namesection2-2仮想マシンの作成a&#34;&gt;2.2. &lt;a name=&#34;section2-2&#34;&gt;仮想マシンの作成&lt;/a&gt;&lt;/h4&gt;
&lt;h5 id=&#34;手順&#34;&gt;手順&lt;/h5&gt;
&lt;p&gt;まず，ISO ファイルを入手する．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.ubuntu.com/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ubuntu 20.04&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.centos.org/download/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CentOS 7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;(Host)
virt-manager
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;で virt-manager を起動し，&amp;ldquo;Create a new virtual machine&amp;rdquo; を選択する．基本的に手順にしたがって新しい仮想マシンを作成する．ネットワークは，Virtual network &amp;lsquo;default&amp;rsquo;: NAT を選択する (これを選択するとインターネットに接続できたため．他の方法もあるだろう)．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-step-1-of-5-local-install-media-を選択&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./step1.png&#34; alt=&#34;Step 1 of 5, Local install media を選択．&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Step 1 of 5, Local install media を選択．
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-step-2-of-5-browse-を選択しbrowse-local-で先程インストールした-iso-ファイルを指定する&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./step2.png&#34; alt=&#34;Step 2 of 5, Browse を選択し，Browse Local で先程インストールした ISO ファイルを指定する．&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Step 2 of 5, Browse を選択し，Browse Local で先程インストールした ISO ファイルを指定する．
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-step-3-of-5-割り当てるメモリと-cpu-を適当に指定する&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./step3.png&#34; alt=&#34;Step 3 of 5, 割り当てるメモリと CPU を適当に指定する．&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Step 3 of 5, 割り当てるメモリと CPU を適当に指定する．
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-step-4-of-5-仮想マシンのディスクイメージのサイズを適当に指定する&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./step4.png&#34; alt=&#34;Step 4 of 5, 仮想マシンのディスクイメージのサイズを適当に指定する．&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Step 4 of 5, 仮想マシンのディスクイメージのサイズを適当に指定する．
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-step-5-of-5-network-selection-で-virtual-network-default-nat-を選択する&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./step5.png&#34; alt=&#34;Step 5 of 5, Network selection で Virtual network &amp;#39;default&amp;#39;: NAT を選択する．&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Step 5 of 5, Network selection で Virtual network &amp;lsquo;default&amp;rsquo;: NAT を選択する．
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;あとは通常の OS のインストールと同様の操作である．&lt;/p&gt;
&lt;h3 id=&#34;3-a-namesection3ssh-接続の設定a&#34;&gt;3. &lt;a name=&#34;section3&#34;&gt;SSH 接続の設定&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;以降，Ubuntu での操作を載せる．CentOS は異なるコマンドだが，同様の操作をすることで実現できる．&lt;/p&gt;
&lt;p&gt;OS のインストール後は &lt;code&gt;update&lt;/code&gt; と &lt;code&gt;upgrade&lt;/code&gt; を行う．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(Guest)
sudo apt update &amp;amp;&amp;amp; sudo apt -y upgrade
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次に，SSH 接続のために OpenSSH Server を導入する．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(Guest)
sudo apt -y install openssh-server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また，&lt;code&gt;ssh.service&lt;/code&gt; が active か，マシンの起動後に active になるか (enable か) を確認する．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(Guest)
sudo systemctl is-enabled ssh
sudo systemctl status ssh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ssh-の状態の確認&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ssh.png&#34; alt=&#34;ssh の状態の確認．&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ssh の状態の確認．
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;ゲスト OS の IP address を &lt;code&gt;ip addr&lt;/code&gt; で確認する．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ip-address-の確認&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ipaddr.png&#34; alt=&#34;IP address の確認．&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      IP address の確認．
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;今回，Ubuntu 20.04 には &lt;code&gt;192.168.122.165&lt;/code&gt; という IP address が割り当てられている．この IP address は &lt;a href=&#34;https://www.nic.ad.jp/ja/basics/terms/dhcp.html#:~:text=DHCP%E3%81%A8%E3%81%AF%E3%80%8CDynamic%20Host,%E8%A1%8C%E3%81%86%E3%81%9F%E3%82%81%E3%81%AE%E3%83%97%E3%83%AD%E3%83%88%E3%82%B3%E3%83%AB%E3%81%A7%E3%81%99%E3%80%82&amp;amp;text=%E3%81%AA%E3%81%8ADHCP%E3%81%AB%E3%81%AF%E8%AA%8D%E8%A8%BC,%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6%E8%84%86%E5%BC%B1%E3%81%A7%E3%81%99%E3%80%82&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DHCP&lt;/a&gt; で割り当てられたものである&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;．&lt;/p&gt;
&lt;p&gt;ホスト OS とゲスト OS 間の接続ができるかどうか，確認する．&lt;/p&gt;
&lt;p&gt;ホスト OS → ゲスト OS:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tcbn@tcbn-V530-15ICR:~$ ping -c 3 192.168.122.165
PING 192.168.122.165 (192.168.122.165) 56(84) bytes of data.
64 bytes from 192.168.122.165: icmp_seq=1 ttl=64 time=0.544 ms
64 bytes from 192.168.122.165: icmp_seq=2 ttl=64 time=0.201 ms
64 bytes from 192.168.122.165: icmp_seq=3 ttl=64 time=0.366 ms

--- 192.168.122.165 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2043ms
rtt min/avg/max/mdev = 0.201/0.370/0.544/0.140 ms
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ゲスト OS → ホスト OS:
















&lt;figure  id=&#34;figure-ゲスト-os--ホスト-os-に-ping&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ping.png&#34; alt=&#34;ゲスト OS → ホスト OS に ping.&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ゲスト OS → ホスト OS に ping.
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;両方向に接続できていることが確認される．&lt;/p&gt;
&lt;p&gt;SSH 接続を行う．学習用環境なので，パスワード認証で十分だろう． ホスト OS 側で &lt;code&gt;ssh [username]@[IP address]&lt;/code&gt; とする．初回接続時は確認が出るが，yes を選択する．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(Host)
tcbn@tcbn-V530-15ICR:~$ ssh ai@192.168.122.165
ai@192.168.122.165&#39;s password: 
Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.11.0-40-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

0 updates can be applied immediately.

Your Hardware Enablement Stack (HWE) is supported until April 2025.
Last login: Sat Nov 20 09:08:44 2021 from 192.168.122.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;毎回このコマンドを打つのは面倒 (特に，公開鍵認証を用いている場合) なので，ホスト OS 側の &lt;code&gt;~/.ssh/config&lt;/code&gt; ファイルに設定を書く (パスはこれではない可能性もある)．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Host Host_name
    HostName [IP address]
    User [username]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;という書式である (参考: &lt;a href=&#34;https://linux.die.net/man/5/ssh_config&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ssh_config(5) - Linux man page&lt;/a&gt;)．&lt;code&gt;ssh Host_name&lt;/code&gt; で接続できる&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;．&lt;/p&gt;
&lt;h3 id=&#34;4-a-namesection4まとめa&#34;&gt;4. &lt;a name=&#34;section4&#34;&gt;まとめ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;学習用の環境を仮想マシンで作った．特にインターネット接続あたりで詰まったので，備忘録としてまとめた．&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;IP address を固定しようと思ったが，固定するとインターネット接続ができなくなったので DHCP で割り当てられた IP address を用いることにした．原因が分からなかったので，いずれ調べたいと思う．&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;VS Code に優秀な拡張機能 Remote - SSH があるので，使うのをおすすめする．接続先のファイルをまるで手元で扱っているかのように編集できる．&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>ファイルサーバを構築したときのログ (Ubuntu18.04)</title>
      <link>https://tachibana-ai.netlify.app/post/create_server/</link>
      <pubDate>Fri, 09 Jul 2021 18:39:46 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/create_server/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;以前ファイルサーバを構築したので，そのときのログを残す．&lt;/p&gt;
&lt;p&gt;色々と怪しい部分もあるかもしれないので，一個人の記録として見ていただければ幸いである．&lt;/p&gt;
&lt;p&gt;以下，LinuxサーバをUbuntu18.04とし，クライアント側はWindows10もしくはUbuntu20.04とする．Windows10の場合はGit Bashが導入済みであるものとする．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SSH接続の設定&lt;/li&gt;
&lt;li&gt;Sambaの設定&lt;/li&gt;
&lt;li&gt;バックアップの設定&lt;/li&gt;
&lt;li&gt;CUI運用にする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という流れで実行した．&lt;/p&gt;
&lt;h3 id=&#34;1-ssh接続&#34;&gt;1 SSH接続&lt;/h3&gt;
&lt;p&gt;サーバにリモートで接続して手元で扱うときには，SSH (Secure Shell) 接続を用いることが多い．SSHは，セキュアな通信でリモートアクセスするためのプロトコルであり，強固な認証と暗号化の機能がある (詳しい説明は省略)．ここでは，LinuxサーバのSSH設定の手順について述べる．認証方式は公開鍵認証とする．&lt;/p&gt;
&lt;p&gt;以下，サーバ側のシェルに&lt;code&gt;(server)&lt;/code&gt;とし，接続するクライアント側のシェルに&lt;code&gt;(client)&lt;/code&gt;と書くものとする．&lt;/p&gt;
&lt;h4 id=&#34;1-sshdのインストールと自動起動の設定-サーバ側&#34;&gt;(1) sshdのインストールと自動起動の設定 (サーバ側)&lt;/h4&gt;
&lt;p&gt;ホスト側でsshをインストールして，自動起動の設定を行う．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) sudo apt update &amp;amp;&amp;amp; sudo apt -y upgrade
(server) sudo apt -y install ssh
(server) sudo systemctl start ssh.service
(server) sudo systemctl enable ssh.service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この後サーバを再起動し，以下のコマンドを実行．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) sudo systemctl is-enabled ssh.service
(server) sudo systemctl status ssh.service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上のコマンドを実行し，&lt;code&gt;enabled&lt;/code&gt;と出力されれば，ブート時に起動する．下のコマンドを実行し，&lt;code&gt;Active: active (running)&lt;/code&gt;と出力されれば現在sshdが起動している．&lt;/p&gt;
&lt;p&gt;この時点でサーバ側にパスワード認証で入ることができる．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(client) ssh [user]@[IP address of the server]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(userはサーバのユーザ名)とすると，特に設定が間違えていなければ接続できる．&lt;/p&gt;
&lt;p&gt;今回の目的は公開鍵認証で入ることなので，以下の手順を&lt;/p&gt;
&lt;h4 id=&#34;2-キーペアを作る-クライアント側&#34;&gt;(2) キーペアを作る (クライアント側)&lt;/h4&gt;
&lt;p&gt;クライアント側でキーペアを作る．キーペアの作り方については以下の記事を参考にした．&lt;/p&gt;
&lt;p&gt;Git Bash (Ubuntuはterminal)で，以下のコマンドを実行する．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(client) ssh-keygen -t rsa -b 4096 -C &amp;quot;comment&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記のコマンドを実行すると，鍵のパスを変えるか，パスフレーズは必要か聞かれる．鍵はデフォルトでは&lt;code&gt;&amp;lt;user&amp;gt;/.ssh&lt;/code&gt;直下に&lt;code&gt;id_rsa&lt;/code&gt;と&lt;code&gt;id_rsa.pub&lt;/code&gt;として保存されるが，複数の鍵を作る場合は新しいディレクトリを&lt;code&gt;.ssh&lt;/code&gt;以下に作るなどすれば良いと思う．&lt;/p&gt;
&lt;p&gt;commentは任意だが，複数人が管理するファイルサーバという機能を持たせると考えると，自分の名字にするのが良いように思う．&lt;/p&gt;
&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/suthio/items/2760e4cff0e185fe2db9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;お前らのSSH Keysの作り方は間違っている&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-クライアント側からホスト側に公開鍵を送信する&#34;&gt;(3) クライアント側からホスト側に公開鍵を送信する&lt;/h4&gt;
&lt;p&gt;(1)でSSH接続ができているとすると，クライアント側でscpコマンドを実行すると，サーバ側のuserのホームディレクトリ直下に公開鍵を転送できる．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(client) scp [client rsa pub key path] [user]@[IP address of the server]:/home/[user]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここで，scpはSSHを使ってリモートホストとローカルホストの通信を暗号化した上で，ファイルの送信をするコマンドであり，&lt;code&gt;scp [from] [to]&lt;/code&gt;のように書けば，fromのパスで指定したファイルがtoのパスの下に送られる．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[client rsa pub key path]&lt;/code&gt;は，キーペアを作るときに変えていなければ，(Windowsの場合は)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\Users\[user]\.ssh\id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;である．&lt;/p&gt;
&lt;h4 id=&#34;4-authorized_keysファイルを作る&#34;&gt;(4) &lt;code&gt;authorized_keys&lt;/code&gt;ファイルを作る&lt;/h4&gt;
&lt;p&gt;次に，サーバ側で鍵の設定をする．(3)で，ホームディレクトリ直下に公開鍵が送られたとする．このファイルの内容を&lt;code&gt;authorized_keys&lt;/code&gt;ファイルにコピーする．その後，&lt;code&gt;chmod&lt;/code&gt;コマンドで所有者のみが読めるようにする．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) cat id_rsa.pub &amp;gt;&amp;gt; ./.ssh/authorized_keys
(server) chmod 700 ./.ssh
(server) chmod 600 ./.ssh/authorized_keys
(server) rm -rf id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-sshd_configの設定-サーバ側&#34;&gt;(5) &lt;code&gt;sshd_config&lt;/code&gt;の設定 (サーバ側)&lt;/h4&gt;
&lt;p&gt;公開鍵認証を有効化するために，sshdの設定ファイルを編集する．一旦バックアップをとる．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) cd /etc/ssh
(server) sudo cp sshd_config sshd_config.bk
(server) sudo vim sshd_config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以下の行のコメントを外し，有効化する．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;#PubkeyAuthentication yes
#AuthorizedKeysFile .ssh/authorized_keys  .ssh/authorized_keys2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一応Rootでのログインはできないようにしておく．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;PermitRootLogin no
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;参考-1&#34;&gt;参考&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/gotohiro55/items/36a22516de2b381b3c6e&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SSHの鍵認証設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;6-sshのconfigファイルの設定-クライアント側&#34;&gt;(6) &lt;code&gt;.ssh&lt;/code&gt;のconfigファイルの設定 (クライアント側)&lt;/h4&gt;
&lt;p&gt;(5)までで公開鍵認証でSSH接続できるようになった．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;ssh -i [client rsa private key path] [user]@[IP address of the server]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接続のたびにこのコマンドを打つのはめんどくさいので，エイリアス設定をする．&lt;code&gt;.ssh/config&lt;/code&gt;ファイルに以下を追加 (Windowsの場合．秘密鍵が&lt;code&gt;.ssh&lt;/code&gt;直下にあるとする)．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Host [server name]
  HostName xxx.xxx.xxx.xxx  # IP address of the server
  User [user]               # user name of the server
  Identityfile C:\Users\[user]\.ssh\id_rsa
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このようにすると，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh [servername]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;でサーバに接続できる．&lt;/p&gt;
&lt;h3 id=&#34;2-sambaの設定&#34;&gt;2 Sambaの設定&lt;/h3&gt;
&lt;p&gt;Sambaとは，Linux上でWindowsのネットワーク機能を実現するソフトウェアである．これを使うことで，ファイルサーバの機能が実現される．&lt;/p&gt;
&lt;p&gt;以下，ホームディレクトリ直下の&lt;code&gt;Share_dir&lt;/code&gt;を共有するものとする．ここでは，同一のネットワークのホストに対してフルパーミッションで権限を与える場合を想定する．&lt;/p&gt;
&lt;h5 id=&#34;参考-2&#34;&gt;参考&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=eVVfJYXq1ug&amp;amp;list=LL&amp;amp;index=1&amp;amp;t=740s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;【Linux】Ubuntuでファイルサーバーを作って遊ぼう！(中級者～上級者向け)【世界一わかりやすい解説(かもしれない)】&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;このYouTubeの動画を参考にした．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1-sambaのインストール&#34;&gt;(1) Sambaのインストール&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) sudo apt install -y samba
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-sambaconfのバックアップと編集&#34;&gt;(2) &lt;code&gt;samba.conf&lt;/code&gt;のバックアップと編集&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) cd /etc/samba/
(server) sudo cp smb.conf smb.conf.bk
(server) sudo vim smb.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;末尾に以下を追加．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;# fileserver
[fileserver]
comment = Ubuntu FileServer
path = /home/[user]/Share_dir/
browseable = yes
read only = no
guest ok = yes
guest only = yes
create mode = 0777
directory mode = 0777
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-再起動と自動起動の設定&#34;&gt;(3) 再起動と自動起動の設定&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) sudo systemctl restart smbd nmbd
(server) sudo systemctl enable smbd nmbd
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-バックアップ&#34;&gt;3. バックアップ&lt;/h3&gt;
&lt;p&gt;共有したディレクトリをHDDなどにバックアップすることを考える．これは，突然PCが落ちてデータが飛ぶようなリスクへの対策となる．&lt;/p&gt;
&lt;p&gt;ここではHDDがマウントポイント&lt;code&gt;/mnt/Elements&lt;/code&gt;にマウントされているとし，システム起動時にマウントするように設定したとする．&lt;/p&gt;
&lt;h4 id=&#34;1-バックアップ用のディレクトリの作成&#34;&gt;(1) バックアップ用のディレクトリの作成&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Server_backup&lt;/code&gt;ディレクトリにバックアップを取るものとする．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) mkdir /mnt/Elements/Server_backup
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-バックアップの設定&#34;&gt;(2) バックアップの設定&lt;/h4&gt;
&lt;p&gt;ここでは，差分バックアップを取るものとする．このときに使うコマンドは&lt;code&gt;rsync&lt;/code&gt;である．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) sudo rsync -av /home/[user]/Share_dir/ /mnt/Elements/Server_backup
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これは，&lt;code&gt;Share_dir&lt;/code&gt;の中身を&lt;code&gt;/mnt/Elements/Server_backup&lt;/code&gt;にバックアップするというようなものである．ここで，引数&lt;code&gt;-av&lt;/code&gt;は，今どこをコピーしているのかを表示出力するためのものである．&lt;/p&gt;
&lt;h4 id=&#34;3-バックアップのスケジューラの設定&#34;&gt;(3) バックアップのスケジューラの設定&lt;/h4&gt;
&lt;p&gt;毎日バックアップを更新するために，スケジューラを用いる．crontabを編集すれば良い．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) sudo vim /etc/crontab
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以下を追加した．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# m h dom mon dow user	command
00 3	* * *	root    rsync -av /home/[user]/Share_dir/ /mnt/Elements/Server_backup
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4-cui運用にする&#34;&gt;4. CUI運用にする&lt;/h3&gt;
&lt;p&gt;ファイルサーバとしての運用であれば，CUI運用の方が良い．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 一時的にCUIモードにする
(server) sudo systemctl isolate multi-user.target
# デフォルトをCUIモードにする
(server) sudo systemctl set-default multi-user.target
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;GUIに戻したいときは以下のコマンドを実行．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 一時的にGUIモードにする
(server) sudo systemctl isolate graphical.target
# デフォルトをGUIモードにする
(server) sudo systemctl set-default graphical.target
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5-まとめ&#34;&gt;5. まとめ&lt;/h3&gt;
&lt;p&gt;ファイルサーバを作った際のログを残した．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu20.04にDocker Engineをインストールする</title>
      <link>https://tachibana-ai.netlify.app/post/ubuntu_docker/</link>
      <pubDate>Thu, 08 Jul 2021 18:25:39 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/ubuntu_docker/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;私が学部4年から修士1年までに使っていたPythonの開発環境はUbuntu上にpipとpipenvを入れ，pipenvで仮想環境を作って使うというものだった．Ubuntuを20にアップグレードしたときにこれまで使っていた仮想環境でプログラムが動かない，ということが起こった．&lt;/p&gt;
&lt;p&gt;このように，OSに1つの環境を作って動かそうとした際には，更新に伴いプログラムが動かなくなるというリスクがある．さらに，以下のような問題が挙げられる．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OSが汚れる
&lt;ul&gt;
&lt;li&gt;OSに直接インストールするので，複数のバージョンが共存するといったことが起こる．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;問題の切り分けが難しい
&lt;ul&gt;
&lt;li&gt;OSのアップグレードの問題なのか，パッケージの問題なのか分からなくなる．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;そんなときDockerに出会う．Dockerの説明は省略するが，イメージは1つのサーバに独立した複数のサーバを同時に構築することができる，というものである．これは良いと思い，研究の開発環境をDocker container上に作ることにした．&lt;/p&gt;
&lt;p&gt;Ubuntu20.04にDocker Engineをインストールするためのシェルスクリプトを作ったので，この記事で共有する．&lt;/p&gt;
&lt;h3 id=&#34;1-dockerの利点と欠点&#34;&gt;1. Dockerの利点と欠点&lt;/h3&gt;
&lt;p&gt;私が思うDockerの利点と欠点を以下に示す．あまり詳しくないエアプ発言かもしれない．&lt;/p&gt;
&lt;h4 id=&#34;利点&#34;&gt;利点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Dockerfileに開発に必要なパッケージのインストールについて記述できるので，Dockerfileとして記述してしまえば，そのとおりに環境構築ができる．&lt;/li&gt;
&lt;li&gt;移植しやすい．&lt;/li&gt;
&lt;li&gt;Python等のバージョンが変わったときもDockerfileの内容を変えることで最新版にアップデートできる．&lt;/li&gt;
&lt;li&gt;OSのバージョンに依らない．依存関係に関する問題を，パッケージのバージョンにまで絞り込める．&lt;/li&gt;
&lt;li&gt;OSが汚れない．&lt;/li&gt;
&lt;li&gt;1つのPCの中に複数の異なる開発環境を構築できる．&lt;/li&gt;
&lt;li&gt;VSCodeの拡張機能が優秀で，使いやすい．&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;欠点&#34;&gt;欠点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Windowsでエラーが出ることが多い気がする．Windowsで同じようなことをしようと思ってもうまく動かないことがある．&lt;/li&gt;
&lt;li&gt;WindowsではWSL2をバックエンドにしているので，メモリの消費量が多い．まともに動かそうと思うとメモリ16GBはないと厳しい．&lt;/li&gt;
&lt;li&gt;導入コスト．(自分が賢くないだけだけど) 難しい．&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-インストールのためのシェルスクリプト&#34;&gt;2. インストールのためのシェルスクリプト&lt;/h3&gt;
&lt;p&gt;福山大学の&lt;a href=&#34;https://www.kkaneko.jp/tools/docker/ubuntu_docker.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;金子邦彦先生のウェブサイト&lt;/a&gt; がかなり参考になった．Docker Engineの導入以外にもかなり参考にさせていただいた．&lt;/p&gt;
&lt;p&gt;次のようなシェルスクリプトを作り，&lt;code&gt;~/install_docker.sh&lt;/code&gt;として保存した．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

# Written by A.Tachibana, 2021/3/19

# Objective
## To install docker in Ubuntu 20

# Reference
## https://www.kkaneko.jp/tools/docker/ubuntu_docker.html

############ To execute ############
# chmod 755 install_docker.sh
# ./install_docker.sh
####################################


# Require password
printf &amp;quot;password: &amp;quot;
read -s password

# Update and Upgrade
echo &amp;quot;$password&amp;quot; | sudo -S apt update &amp;amp;&amp;amp; sudo -S apt -y upgrade

# Install Docker
## Delete old version (if exists)
sudo -S apt -y remove docker docker-engine docker.io containerd docker-ce docker-ce-cli
sudo -S apt -y autoremove
## Install required software
sudo -S apt update
sudo -S apt -y install apt-transport-https ca-certificates curl software-properties-common
sudo -S apt -y install linux-image-generic
## Set docker repository
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
apt-key fingerprint 0EBFCD88
sudo -S add-apt-repository \
    &amp;quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
    $(lsb_release -sc) \
    stable&amp;quot;
sudo -S apt update
## Install docker.io
sudo -S apt -y install docker.io containerd docker-compose
## Add authority
sudo -S usermod -aG docker $USER
## Set autostart
sudo -S systemctl unmask docker.service
sudo -S systemctl enable docker
sudo -S systemctl is-enabled docker
## let user ubuntu use docker
sudo gpasswd -a $USER docker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このファイルに実行権限を与え，実行する．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod 755 install_docker.sh
./install_docker.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;なお，このシェルスクリプトは，私のサブのGitHubアカウントの&lt;a href=&#34;https://github.com/tcbn-ai/TIL/blob/main/Study_Docker/shellscript/install_docker.sh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;publicリポジトリ&lt;/a&gt;にアップロードしている．&lt;/p&gt;
&lt;h4 id=&#34;参考&#34;&gt;参考&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kkaneko.jp/cc/vm/ubuntu_docker.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker Engine のインストールと使用法（Ubuntu 上）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu20.04にRとRStudioをインストールする</title>
      <link>https://tachibana-ai.netlify.app/post/ubuntu_rstudio/</link>
      <pubDate>Thu, 08 Jul 2021 18:07:46 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/ubuntu_rstudio/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;授業でRとRStudioを使う必要があったのでインストールした．
前処理がめんどくさかったので，シェルスクリプトを書いた．&lt;/p&gt;
&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yukiyanai.github.io/jp/resources/docs/install-R_ubuntu.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RとRStudioのインストールと初期設定 Linux (Ubuntu) 編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-前処理&#34;&gt;1. 前処理&lt;/h3&gt;
&lt;p&gt;次のようなシェルスクリプトを書き，&lt;code&gt;~/install_R_requirement.sh&lt;/code&gt;として保存した．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

# Written by A.Tachibana, 2021/4/28

# Objective
## To install R in Ubuntu 20
## Requirement packages

# Reference
## https://yukiyanai.github.io/jp/resources/docs/install-R_ubuntu.pdf

############ To execute ############
# chmod 755 install_R_requirement.sh
# ./install_R_requirement.sh
####################################

# Require password
printf &amp;quot;password: &amp;quot;
read -s password

# Update and Upgrade
echo &amp;quot;$password&amp;quot; | sudo -S apt update &amp;amp;&amp;amp; sudo -S apt -y upgrade

# 1. Install tools
sudo -S apt -y install gdebi-core wget 

# 2. Get fonts
sudo -S apt -y install fonts-ipaexfont
fc-cache -f -v

# 3. Install requirement tools
## requirement tools
sudo -S apt -y install build-essential libxml2-dev libssl-dev libx11-dev libglu1-mesa-dev libmagick++-dev libudunits2-0 libudunits2-dev libgdal-dev libproj-dev libgmp3-dev curl 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このファイルに実行権限を与え，実行する．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod 755 install_R_requirement.sh
./install_R_requirement.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-rとrstudioのインストール&#34;&gt;2. RとRStudioのインストール&lt;/h3&gt;
&lt;p&gt;次のようなシェルスクリプトを書き，&lt;code&gt;~/install_R.sh&lt;/code&gt;として保存した．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

# Written by A.Tachibana, 2021/4/28

# Objective
## To install R in Ubuntu 20

# Reference
## https://yukiyanai.github.io/jp/resources/docs/install-R_ubuntu.pdf

############ To execute ############
# chmod 755 install_R.sh
# ./install_R.sh
    # execute after install_R_requirement.sh
####################################

# Require password
printf &amp;quot;password: &amp;quot;
read -s password

# 1. add repository
sudo -S apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9
sudo -S add-apt-repository &#39;deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/&#39;
# 2. install R base
sudo -S apt update
sudo -S apt -y install r-base 
# 3. install RStudio
cd ~/Downloads/
# 2021/4/28
wget https://download1.rstudio.org/desktop/bionic/amd64/rstudio-1.4.1106-amd64.deb
sudo -S gdebi rstudio-1.4.1106-amd64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このファイルに実行権限を与え，実行する．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod 755 install_R.sh
./install_R.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;注意点&#34;&gt;注意点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;RStudioに関しては2021/4/28時点で最新のものをダウンロードしたが，現在はもっと新しいものが出ていると思う．
&lt;ul&gt;
&lt;li&gt;「最新版を持ってくる」ような書き方が分からなくて，頭の悪い書き方をしている．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;install_R.sh&lt;/code&gt;は，&lt;code&gt;install_R_requirement.sh&lt;/code&gt;の実行後に実行する．&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu20.04にTeX Liveをインストールする</title>
      <link>https://tachibana-ai.netlify.app/post/ubuntu_tex/</link>
      <pubDate>Thu, 08 Jul 2021 18:00:11 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/ubuntu_tex/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;UbuntuにTeXを入れたときのメモ&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-やること&#34;&gt;1. やること&lt;/h3&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;好きなエディタを入れる&lt;/li&gt;
&lt;li&gt;TeXLiveを入れる&lt;/li&gt;
&lt;li&gt;~/.latexmkrcを作る&lt;/li&gt;
&lt;li&gt;動作テスト&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;好きなエディタを入れる&#34;&gt;好きなエディタを入れる&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;私はTeXの文書を作るときはAtomを使うので，Atomを入れた．
&lt;ul&gt;
&lt;li&gt;公式サイト (&lt;a href=&#34;https://atom.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://atom.io/&lt;/a&gt;) からdebをダウンロードして実行．
&lt;pre&gt;&lt;code&gt;sudo apt install ./atom-amd64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;パッケージを入れる．
&lt;ul&gt;
&lt;li&gt;latex&lt;/li&gt;
&lt;li&gt;language-latex&lt;/li&gt;
&lt;li&gt;latexer&lt;/li&gt;
&lt;li&gt;pdf-view&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;texliveを入れる&#34;&gt;TeXLiveを入れる&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;日本の大学(e.g. NAIST)のリポジトリからダウンロードして中身を展開する．
&lt;pre&gt;&lt;code&gt;wget http://ftp.naist.jp/pub/CTAN/systems/texlive/tlnet/install-tl-unx.tar.gz
tar -zxvf install-tl-unx.tar.gz
cd install-tl-[date]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;管理者権限で実行する．リポジトリはダウンロードしたところ．
&lt;pre&gt;&lt;code&gt;sudo ./install-tl --repository http://ftp.naist.jp/pub/CTAN/systems/texlive/tlnet/
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;I&amp;quot;でインストール&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;パスを通す．
&lt;pre&gt;&lt;code&gt;sudo /usr/local/texlive/2020/bin/x86_64-linux/tlmgr path add
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;これは私の例である．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TeXLiveのアップデート
&lt;ul&gt;
&lt;li&gt;参照するリポジトリの指定
&lt;pre&gt;&lt;code&gt;sudo tlmgr option repository http://ftp.naist.jp/pub/CTAN/systems/texlive/tlnet/
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;アップデート
&lt;pre&gt;&lt;code&gt;sudo tlmgr update --self --all
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;latexmkrcの作成&#34;&gt;~/.latexmkrcの作成&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;毎回コンパイル(platexしてdvipdfmxして&amp;hellip;)というのは面倒 → latexmkを使うことで，保存する度に自動的にpdfまで生成するようにする．
&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&#34;https://qiita.com/tdrk/items/16f31e45826c57bce412&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;latexmkの薦め&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ubuntuでは以下のファイルをホームディレクトリ直下(~/.latexmkrc)に配置したところ，正常に動作した．&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;#!/usr/bin/perl
$latex = &#39;platex -guess-input-enc -src-specials -interaction=nonstopmode -synctex=1&#39;;
$latex_silent = &#39;platex -interaction=batchmode&#39;;
$dvips = &#39;dvips&#39;;
$bibtex = &#39;pbibtex&#39;;
$makeindex = &#39;mendex -r -c -s jind.ist&#39;;
$dvi_previewer = &#39;start dviout&#39;;
$dvipdf = &#39;dvipdfmx %O -o %D %S&#39;;
$pdf_previewer = &#39;xdg-open&#39;;
$preview_continuous_mode = 1;
$pdf_mode = 3;
$pdf_update_method = 4;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;latexmkについては，
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vim ~/.latexmkrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;などとして，上記のようなものを作ればよい．&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;動作テスト&#34;&gt;動作テスト&lt;/h4&gt;
&lt;h5 id=&#34;platex&#34;&gt;platex&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;test.tex&amp;quot;という名前のファイルをtextestというディレクトリの中に作った．
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\documentclass[dvipdfmx]{jsarticle}
\title{ {\LaTeX} 動作テスト・サンプルファイル}
\date{\today}
\begin{document}
\maketitle
\section{test}
これはテストです．
\begin{equation}
  f(x) = 2x + 3
\end{equation}
\end{document}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;textestというディレクトリに移動して，以下のコマンドを実行する．
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;platex test.tex &amp;amp;&amp;amp; dvipdfmx test.dvi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行後にpdfファイルが問題なく生成されていたら良い．&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;latexmk&#34;&gt;latexmk&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;先程のファイルに対して，
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;latexmk test.tex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;として，正しくpdfファイルが生成され，変更して保存した後にpdfファイルが更新されたら問題なく導入されている．&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R | 立ち話</title>
    <link>https://tachibana-ai.netlify.app/tag/r/</link>
      <atom:link href="https://tachibana-ai.netlify.app/tag/r/index.xml" rel="self" type="application/rss+xml" />
    <description>R</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ja-jp</language><copyright>@SeeKT</copyright><lastBuildDate>Mon, 30 Aug 2021 09:15:39 +0900</lastBuildDate>
    <image>
      <url>https://tachibana-ai.netlify.app/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>R</title>
      <link>https://tachibana-ai.netlify.app/tag/r/</link>
    </image>
    
    <item>
      <title>RStudio ServerをDockerで使うときのメモ</title>
      <link>https://tachibana-ai.netlify.app/post/docker_r/</link>
      <pubDate>Mon, 30 Aug 2021 09:15:39 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/docker_r/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;RとRStudioもDocker containerとして使えれば少しめんどくさかったインストール工程 (&lt;a href=&#34;https://tachibana-ai.netlify.app/post/ubuntu_rstudio/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ubuntu20.04にRとRStudioをインストールする&lt;/a&gt;) をやらなくても良いのではないだろうか，と考えた．&lt;/p&gt;
&lt;p&gt;調べたところ，RockerというものでRStudio ServerをDockerで使えるらしい&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;．&lt;/p&gt;
&lt;p&gt;今回は備忘録として，Rockerを使ったときのメモを残すことにした．&lt;/p&gt;
&lt;h3 id=&#34;1-準備&#34;&gt;1. 準備&lt;/h3&gt;
&lt;p&gt;最低限必要なことは，Docker Engineのインストールである．UbuntuへのDocker Engineのインストールは以前記事にした&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;．WindowsやMacについては他にも様々な記事があると思う．&lt;/p&gt;
&lt;h3 id=&#34;2-使い方&#34;&gt;2. 使い方&lt;/h3&gt;
&lt;p&gt;今回は，&lt;a href=&#34;https://hub.docker.com/r/rocker/tidyverse&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;rocker/tidyverse&lt;/code&gt;&lt;/a&gt; を使う．おそらく&lt;code&gt;rocker/verse&lt;/code&gt; なども同様の方法でできると思う．&lt;/p&gt;
&lt;p&gt;まず，イメージファイルをローカルなマシンに落とす．これは，&lt;code&gt;docker pull&lt;/code&gt; コマンドを用いればよい．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull rocker/tidyverse
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;イメージファイルがあるかどうかは，次のコマンドで調べられる．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker image ls | grep tidyverse
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例えば，私のマシンで実行すると以下のように出力された．確かに &lt;code&gt;rocker/tidyverse&lt;/code&gt; のイメージファイルがあることがわかる．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tcbn@tcbn-V530-15ICR:~$ docker image ls | grep tidyverse
rocker/tidyverse                                latest                  63d48e0c8338   9 days ago      2.41GB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;イメージファイルがある状態で，以下のように &lt;code&gt;docker run&lt;/code&gt; コマンドを実行すればバックグラウンドでRStudio Serverが立ち上がる．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -d -p 8787:8787 -e PASSWORD=[yourpasswordhere] -v [mountdir]:/home/rstudio rocker/tidyverse
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここで，それぞれのオプションは以下のようなものである．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--rm&lt;/code&gt;: コンテナの終了後にコンテナを削除する．&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt;: 端末から切り離してバックグラウンドで実行する．&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;: ポートマッピングを設定する．
&lt;pre&gt;&lt;code&gt;-p [port number (host)]:[port number (container)]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt;: 環境変数を設定する．&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v&lt;/code&gt;: ボリュームをマウントする．
&lt;pre&gt;&lt;code&gt;-v [host directory]:[container directory]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このコマンドの実行後，&lt;code&gt;http://localhost:8787/&lt;/code&gt; にアクセスすればユーザ名とパスワードの入力画面が出てくる．そこで，ユーザ名に &lt;code&gt;rstudio&lt;/code&gt; を入力し，パスワードに &lt;code&gt;-e&lt;/code&gt; で指定したパスワードを入力する．&lt;/p&gt;
&lt;p&gt;実際に私のマシンでやってみる．&lt;code&gt;~/r_sample&lt;/code&gt; というディレクトリをマウントする．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tcbn@tcbn-V530-15ICR:~/r_sample$ ls
requirements.r  test.r
tcbn@tcbn-V530-15ICR:~/r_sample$ docker run --rm -d -p 8787:8787 -e PASSWORD=mypassword -v $(pwd):/home/rstudio rocker/tidyverse
83136d6a3c656386e74d14899e0ad55d4b10603ade1bad0dfe7dbde88e07e75c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この状態で，&lt;code&gt;http://localhost:8787/&lt;/code&gt; にアクセスすると，以下のようにユーザ名とパスワードの入力画面が出てくる．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ユーザ名とパスワードの入力画面&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/input_userinfo.png&#34; alt=&#34;fig1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ユーザ名とパスワードの入力画面
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;ユーザ名に &lt;code&gt;rstudio&lt;/code&gt;，パスワードに指定したパスワードを入力し，サインインすると，次のような画面になる．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-rstudio-server&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/rstudio_server.png&#34; alt=&#34;fig2&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      RStudio Server
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;先程見た&lt;code&gt;~/rsample&lt;/code&gt; がマウントされていることがわかる．あとは必要なパッケージをインストールするなどしたら使えるようになる．&lt;/p&gt;
&lt;p&gt;コンテナ内のRStudio Server側でrのソースコードを書き換えるとそれがマウントしたローカルなディレクトリにも反映される．&lt;/p&gt;
&lt;p&gt;今起動しているDocker containerを &lt;code&gt;docker ps&lt;/code&gt; コマンドで見ると，&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tcbn@tcbn-V530-15ICR:~/r_sample$ docker ps
CONTAINER ID   IMAGE              COMMAND   CREATED         STATUS         PORTS                                       NAMES
83136d6a3c65   rocker/tidyverse   &amp;quot;/init&amp;quot;   7 minutes ago   Up 7 minutes   0.0.0.0:8787-&amp;gt;8787/tcp, :::8787-&amp;gt;8787/tcp   inspiring_nash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;となっている．コンテナを &lt;code&gt;docker stop&lt;/code&gt; コマンドで終了した後に &lt;code&gt;docker ps -a&lt;/code&gt; コマンドでコンテナ一覧を見る．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tcbn@tcbn-V530-15ICR:~/r_sample$ docker stop inspiring_nash 
inspiring_nash
tcbn@tcbn-V530-15ICR:~/r_sample$ docker ps -a | grep tidyverse
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;--rm&lt;/code&gt; オプションで指定したとおり，終了後のコンテナが削除されている．&lt;/p&gt;
&lt;h3 id=&#34;3-まとめ&#34;&gt;3. まとめ&lt;/h3&gt;
&lt;p&gt;今回は，RStudio ServerをDockerで使うときのやり方を簡単にまとめた．例えば，&lt;code&gt;rocker/tidyverse&lt;/code&gt; をイメージファイルに指定してDockerfileを作り，使いやすい環境を作るといったこともできる．&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://jsta.github.io/r-docker-tutorial/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Docker tutorial&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://tachibana-ai.netlify.app/post/ubuntu_docker/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ubuntu20.04にDocker Engineをインストールする&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu20.04にRとRStudioをインストールする</title>
      <link>https://tachibana-ai.netlify.app/post/ubuntu_rstudio/</link>
      <pubDate>Thu, 08 Jul 2021 18:07:46 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/ubuntu_rstudio/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;授業でRとRStudioを使う必要があったのでインストールした．
前処理がめんどくさかったので，シェルスクリプトを書いた．&lt;/p&gt;
&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yukiyanai.github.io/jp/resources/docs/install-R_ubuntu.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RとRStudioのインストールと初期設定 Linux (Ubuntu) 編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-前処理&#34;&gt;1. 前処理&lt;/h3&gt;
&lt;p&gt;次のようなシェルスクリプトを書き，&lt;code&gt;~/install_R_requirement.sh&lt;/code&gt;として保存した．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

# Written by A.Tachibana, 2021/4/28

# Objective
## To install R in Ubuntu 20
## Requirement packages

# Reference
## https://yukiyanai.github.io/jp/resources/docs/install-R_ubuntu.pdf

############ To execute ############
# chmod 755 install_R_requirement.sh
# ./install_R_requirement.sh
####################################

# Require password
printf &amp;quot;password: &amp;quot;
read -s password

# Update and Upgrade
echo &amp;quot;$password&amp;quot; | sudo -S apt update &amp;amp;&amp;amp; sudo -S apt -y upgrade

# 1. Install tools
sudo -S apt -y install gdebi-core wget 

# 2. Get fonts
sudo -S apt -y install fonts-ipaexfont
fc-cache -f -v

# 3. Install requirement tools
## requirement tools
sudo -S apt -y install build-essential libxml2-dev libssl-dev libx11-dev libglu1-mesa-dev libmagick++-dev libudunits2-0 libudunits2-dev libgdal-dev libproj-dev libgmp3-dev curl 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このファイルに実行権限を与え，実行する．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod 755 install_R_requirement.sh
./install_R_requirement.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-rとrstudioのインストール&#34;&gt;2. RとRStudioのインストール&lt;/h3&gt;
&lt;p&gt;次のようなシェルスクリプトを書き，&lt;code&gt;~/install_R.sh&lt;/code&gt;として保存した．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

# Written by A.Tachibana, 2021/4/28

# Objective
## To install R in Ubuntu 20

# Reference
## https://yukiyanai.github.io/jp/resources/docs/install-R_ubuntu.pdf

############ To execute ############
# chmod 755 install_R.sh
# ./install_R.sh
    # execute after install_R_requirement.sh
####################################

# Require password
printf &amp;quot;password: &amp;quot;
read -s password

# 1. add repository
sudo -S apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9
sudo -S add-apt-repository &#39;deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/&#39;
# 2. install R base
sudo -S apt update
sudo -S apt -y install r-base 
# 3. install RStudio
cd ~/Downloads/
# 2021/4/28
wget https://download1.rstudio.org/desktop/bionic/amd64/rstudio-1.4.1106-amd64.deb
sudo -S gdebi rstudio-1.4.1106-amd64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このファイルに実行権限を与え，実行する．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod 755 install_R.sh
./install_R.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;注意点&#34;&gt;注意点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;RStudioに関しては2021/4/28時点で最新のものをダウンロードしたが，現在はもっと新しいものが出ていると思う．
&lt;ul&gt;
&lt;li&gt;「最新版を持ってくる」ような書き方が分からなくて，頭の悪い書き方をしている．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;install_R.sh&lt;/code&gt;は，&lt;code&gt;install_R_requirement.sh&lt;/code&gt;の実行後に実行する．&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Server | 立ち話</title>
    <link>https://tachibana-ai.netlify.app/tag/server/</link>
      <atom:link href="https://tachibana-ai.netlify.app/tag/server/index.xml" rel="self" type="application/rss+xml" />
    <description>Server</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ja-jp</language><copyright>@SeeKT</copyright><lastBuildDate>Fri, 09 Jul 2021 18:39:46 +0900</lastBuildDate>
    <image>
      <url>https://tachibana-ai.netlify.app/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Server</title>
      <link>https://tachibana-ai.netlify.app/tag/server/</link>
    </image>
    
    <item>
      <title>ファイルサーバを構築したときのログ (Ubuntu18.04)</title>
      <link>https://tachibana-ai.netlify.app/post/create_server/</link>
      <pubDate>Fri, 09 Jul 2021 18:39:46 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/create_server/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;以前ファイルサーバを構築したので，そのときのログを残す．&lt;/p&gt;
&lt;p&gt;色々と怪しい部分もあるかもしれないので，一個人の記録として見ていただければ幸いである．&lt;/p&gt;
&lt;p&gt;以下，LinuxサーバをUbuntu18.04とし，クライアント側はWindows10もしくはUbuntu20.04とする．Windows10の場合はGit Bashが導入済みであるものとする．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SSH接続の設定&lt;/li&gt;
&lt;li&gt;Sambaの設定&lt;/li&gt;
&lt;li&gt;バックアップの設定&lt;/li&gt;
&lt;li&gt;CUI運用にする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という流れで実行した．&lt;/p&gt;
&lt;h3 id=&#34;1-ssh接続&#34;&gt;1 SSH接続&lt;/h3&gt;
&lt;p&gt;サーバにリモートで接続して手元で扱うときには，SSH (Secure Shell) 接続を用いることが多い．SSHは，セキュアな通信でリモートアクセスするためのプロトコルであり，強固な認証と暗号化の機能がある (詳しい説明は省略)．ここでは，LinuxサーバのSSH設定の手順について述べる．認証方式は公開鍵認証とする．&lt;/p&gt;
&lt;p&gt;以下，サーバ側のシェルに&lt;code&gt;(server)&lt;/code&gt;とし，接続するクライアント側のシェルに&lt;code&gt;(client)&lt;/code&gt;と書くものとする．&lt;/p&gt;
&lt;h4 id=&#34;1-sshdのインストールと自動起動の設定-サーバ側&#34;&gt;(1) sshdのインストールと自動起動の設定 (サーバ側)&lt;/h4&gt;
&lt;p&gt;ホスト側でsshをインストールして，自動起動の設定を行う．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) sudo apt update &amp;amp;&amp;amp; sudo apt -y upgrade
(server) sudo apt -y install ssh
(server) sudo systemctl start ssh.service
(server) sudo systemctl enable ssh.service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この後サーバを再起動し，以下のコマンドを実行．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) sudo systemctl is-enabled ssh.service
(server) sudo systemctl status ssh.service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上のコマンドを実行し，&lt;code&gt;enabled&lt;/code&gt;と出力されれば，ブート時に起動する．下のコマンドを実行し，&lt;code&gt;Active: active (running)&lt;/code&gt;と出力されれば現在sshdが起動している．&lt;/p&gt;
&lt;p&gt;この時点でサーバ側にパスワード認証で入ることができる．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(client) ssh [user]@[IP address of the server]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(userはサーバのユーザ名)とすると，特に設定が間違えていなければ接続できる．&lt;/p&gt;
&lt;p&gt;今回の目的は公開鍵認証で入ることなので，以下の手順を&lt;/p&gt;
&lt;h4 id=&#34;2-キーペアを作る-クライアント側&#34;&gt;(2) キーペアを作る (クライアント側)&lt;/h4&gt;
&lt;p&gt;クライアント側でキーペアを作る．キーペアの作り方については以下の記事を参考にした．&lt;/p&gt;
&lt;p&gt;Git Bash (Ubuntuはterminal)で，以下のコマンドを実行する．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(client) ssh-keygen -t rsa -b 4096 -C &amp;quot;comment&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記のコマンドを実行すると，鍵のパスを変えるか，パスフレーズは必要か聞かれる．鍵はデフォルトでは&lt;code&gt;&amp;lt;user&amp;gt;/.ssh&lt;/code&gt;直下に&lt;code&gt;id_rsa&lt;/code&gt;と&lt;code&gt;id_rsa.pub&lt;/code&gt;として保存されるが，複数の鍵を作る場合は新しいディレクトリを&lt;code&gt;.ssh&lt;/code&gt;以下に作るなどすれば良いと思う．&lt;/p&gt;
&lt;p&gt;commentは任意だが，複数人が管理するファイルサーバという機能を持たせると考えると，自分の名字にするのが良いように思う．&lt;/p&gt;
&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/suthio/items/2760e4cff0e185fe2db9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;お前らのSSH Keysの作り方は間違っている&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-クライアント側からホスト側に公開鍵を送信する&#34;&gt;(3) クライアント側からホスト側に公開鍵を送信する&lt;/h4&gt;
&lt;p&gt;(1)でSSH接続ができているとすると，クライアント側でscpコマンドを実行すると，サーバ側のuserのホームディレクトリ直下に公開鍵を転送できる．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(client) scp [client rsa pub key path] [user]@[IP address of the server]:/home/[user]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここで，scpはSSHを使ってリモートホストとローカルホストの通信を暗号化した上で，ファイルの送信をするコマンドであり，&lt;code&gt;scp [from] [to]&lt;/code&gt;のように書けば，fromのパスで指定したファイルがtoのパスの下に送られる．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[client rsa pub key path]&lt;/code&gt;は，キーペアを作るときに変えていなければ，(Windowsの場合は)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\Users\[user]\.ssh\id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;である．&lt;/p&gt;
&lt;h4 id=&#34;4-authorized_keysファイルを作る&#34;&gt;(4) &lt;code&gt;authorized_keys&lt;/code&gt;ファイルを作る&lt;/h4&gt;
&lt;p&gt;次に，サーバ側で鍵の設定をする．(3)で，ホームディレクトリ直下に公開鍵が送られたとする．このファイルの内容を&lt;code&gt;authorized_keys&lt;/code&gt;ファイルにコピーする．その後，&lt;code&gt;chmod&lt;/code&gt;コマンドで所有者のみが読めるようにする．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) cat id_rsa.pub &amp;gt;&amp;gt; ./.ssh/authorized_keys
(server) chmod 700 ./.ssh
(server) chmod 600 ./.ssh/authorized_keys
(server) rm -rf id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-sshd_configの設定-サーバ側&#34;&gt;(5) &lt;code&gt;sshd_config&lt;/code&gt;の設定 (サーバ側)&lt;/h4&gt;
&lt;p&gt;公開鍵認証を有効化するために，sshdの設定ファイルを編集する．一旦バックアップをとる．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) cd /etc/ssh
(server) sudo cp sshd_config sshd_config.bk
(server) sudo vim sshd_config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以下の行のコメントを外し，有効化する．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;#PubkeyAuthentication yes
#AuthorizedKeysFile .ssh/authorized_keys  .ssh/authorized_keys2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一応Rootでのログインはできないようにしておく．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;PermitRootLogin no
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;参考-1&#34;&gt;参考&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/gotohiro55/items/36a22516de2b381b3c6e&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SSHの鍵認証設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;6-sshのconfigファイルの設定-クライアント側&#34;&gt;(6) &lt;code&gt;.ssh&lt;/code&gt;のconfigファイルの設定 (クライアント側)&lt;/h4&gt;
&lt;p&gt;(5)までで公開鍵認証でSSH接続できるようになった．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;ssh -i [client rsa private key path] [user]@[IP address of the server]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接続のたびにこのコマンドを打つのはめんどくさいので，エイリアス設定をする．&lt;code&gt;.ssh/config&lt;/code&gt;ファイルに以下を追加 (Windowsの場合．秘密鍵が&lt;code&gt;.ssh&lt;/code&gt;直下にあるとする)．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Host [server name]
  HostName xxx.xxx.xxx.xxx  # IP address of the server
  User [user]               # user name of the server
  Identityfile C:\Users\[user]\.ssh\id_rsa
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このようにすると，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh [servername]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;でサーバに接続できる．&lt;/p&gt;
&lt;h3 id=&#34;2-sambaの設定&#34;&gt;2 Sambaの設定&lt;/h3&gt;
&lt;p&gt;Sambaとは，Linux上でWindowsのネットワーク機能を実現するソフトウェアである．これを使うことで，ファイルサーバの機能が実現される．&lt;/p&gt;
&lt;p&gt;以下，ホームディレクトリ直下の&lt;code&gt;Share_dir&lt;/code&gt;を共有するものとする．ここでは，同一のネットワークのホストに対してフルパーミッションで権限を与える場合を想定する．&lt;/p&gt;
&lt;h5 id=&#34;参考-2&#34;&gt;参考&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=eVVfJYXq1ug&amp;amp;list=LL&amp;amp;index=1&amp;amp;t=740s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;【Linux】Ubuntuでファイルサーバーを作って遊ぼう！(中級者～上級者向け)【世界一わかりやすい解説(かもしれない)】&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;このYouTubeの動画を参考にした．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1-sambaのインストール&#34;&gt;(1) Sambaのインストール&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) sudo apt install -y samba
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-sambaconfのバックアップと編集&#34;&gt;(2) &lt;code&gt;samba.conf&lt;/code&gt;のバックアップと編集&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) cd /etc/samba/
(server) sudo cp smb.conf smb.conf.bk
(server) sudo vim smb.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;末尾に以下を追加．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;# fileserver
[fileserver]
comment = Ubuntu FileServer
path = /home/[user]/Share_dir/
browseable = yes
read only = no
guest ok = yes
guest only = yes
create mode = 0777
directory mode = 0777
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-再起動と自動起動の設定&#34;&gt;(3) 再起動と自動起動の設定&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) sudo systemctl restart smbd nmbd
(server) sudo systemctl enable smbd nmbd
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-バックアップ&#34;&gt;3. バックアップ&lt;/h3&gt;
&lt;p&gt;共有したディレクトリをHDDなどにバックアップすることを考える．これは，突然PCが落ちてデータが飛ぶようなリスクへの対策となる．&lt;/p&gt;
&lt;p&gt;ここではHDDがマウントポイント&lt;code&gt;/mnt/Elements&lt;/code&gt;にマウントされているとし，システム起動時にマウントするように設定したとする．&lt;/p&gt;
&lt;h4 id=&#34;1-バックアップ用のディレクトリの作成&#34;&gt;(1) バックアップ用のディレクトリの作成&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Server_backup&lt;/code&gt;ディレクトリにバックアップを取るものとする．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) mkdir /mnt/Elements/Server_backup
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-バックアップの設定&#34;&gt;(2) バックアップの設定&lt;/h4&gt;
&lt;p&gt;ここでは，差分バックアップを取るものとする．このときに使うコマンドは&lt;code&gt;rsync&lt;/code&gt;である．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) sudo rsync -av /home/[user]/Share_dir/ /mnt/Elements/Server_backup
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これは，&lt;code&gt;Share_dir&lt;/code&gt;の中身を&lt;code&gt;/mnt/Elements/Server_backup&lt;/code&gt;にバックアップするというようなものである．ここで，引数&lt;code&gt;-av&lt;/code&gt;は，今どこをコピーしているのかを表示出力するためのものである．&lt;/p&gt;
&lt;h4 id=&#34;3-バックアップのスケジューラの設定&#34;&gt;(3) バックアップのスケジューラの設定&lt;/h4&gt;
&lt;p&gt;毎日バックアップを更新するために，スケジューラを用いる．crontabを編集すれば良い．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(server) sudo vim /etc/crontab
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以下を追加した．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# m h dom mon dow user	command
00 3	* * *	root    rsync -av /home/[user]/Share_dir/ /mnt/Elements/Server_backup
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4-cui運用にする&#34;&gt;4. CUI運用にする&lt;/h3&gt;
&lt;p&gt;ファイルサーバとしての運用であれば，CUI運用の方が良い．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 一時的にCUIモードにする
(server) sudo systemctl isolate multi-user.target
# デフォルトをCUIモードにする
(server) sudo systemctl set-default multi-user.target
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;GUIに戻したいときは以下のコマンドを実行．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 一時的にGUIモードにする
(server) sudo systemctl isolate graphical.target
# デフォルトをGUIモードにする
(server) sudo systemctl set-default graphical.target
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5-まとめ&#34;&gt;5. まとめ&lt;/h3&gt;
&lt;p&gt;ファイルサーバを作った際のログを残した．&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

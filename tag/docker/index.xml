<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker | 立ち話</title>
    <link>https://tachibana-ai.netlify.app/tag/docker/</link>
      <atom:link href="https://tachibana-ai.netlify.app/tag/docker/index.xml" rel="self" type="application/rss+xml" />
    <description>Docker</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ja-jp</language><copyright>@SeeKT</copyright><lastBuildDate>Tue, 07 Dec 2021 22:17:14 +0900</lastBuildDate>
    <image>
      <url>https://tachibana-ai.netlify.app/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Docker</title>
      <link>https://tachibana-ai.netlify.app/tag/docker/</link>
    </image>
    
    <item>
      <title>Docker Container として LaTeX の執筆環境を作る</title>
      <link>https://tachibana-ai.netlify.app/post/docker_latex/</link>
      <pubDate>Tue, 07 Dec 2021 22:17:14 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/docker_latex/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;現在，Ubuntu 20.04 上に TeXLive をインストールして LaTeX の文書を作成している．今後，仕事等で使うマシンが Windows になる可能性がある．そこで，OS に依らずに使える執筆環境として Docker Container を用いるものを作成した．&lt;/p&gt;
&lt;p&gt;過去に同様の環境を作ってくれていた方の Docker image やブログを参考に作成した．作成したものは，GitHub の Public リポジトリ (&lt;a href=&#34;https://github.com/SeeKT/Docker_latex&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SeeKT/Docker_latex&lt;/a&gt;) にアップロードしている．&lt;/p&gt;
&lt;h5 id=&#34;目次&#34;&gt;目次&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;1 &lt;a href=&#34;#section1&#34;&gt;採用しているコンパイルのルール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2 &lt;a href=&#34;#section2&#34;&gt;概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3 &lt;a href=&#34;#section3&#34;&gt;ディレクトリ構成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4 &lt;a href=&#34;#section4&#34;&gt;使用方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;5 &lt;a href=&#34;#section5&#34;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-a-namesection1採用しているコンパイルのルールa&#34;&gt;1. &lt;a name=&#34;section1&#34;&gt;採用しているコンパイルのルール&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;日本語文書
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;platex&lt;/code&gt; + &lt;code&gt;dvipdfmx&lt;/code&gt; (&lt;code&gt;latexmk&lt;/code&gt; として記述)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pbibtex&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;英語文書
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pdflatex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bibtex&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;スライド (beamer)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xelatex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bibtex&lt;/code&gt; or &lt;code&gt;pbibtex&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-a-namesection2概要a&#34;&gt;2. &lt;a name=&#34;section2&#34;&gt;概要&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/aruneko&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Aruneno&lt;/a&gt; 様の &lt;a href=&#34;https://hub.docker.com/r/aruneko/texlive&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;aruneko/texlive&lt;/a&gt; を使って，Docker Container として TeX の執筆環境を作成した．また，&lt;a href=&#34;https://github.com/korosuke613&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Futa HIRAKOBA&lt;/a&gt; 様の &lt;a href=&#34;https://korosuke613.hatenablog.com/entry/2019/06/24/171246&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;爆速で日本語LaTeX執筆環境を用意する&lt;/a&gt; を参考にして，VSCode の LaTeX Workshop を用いたコンパイルの効率化をしている．この2つのサイトにはとてもお世話になった．とても感謝している．&lt;/p&gt;
&lt;h3 id=&#34;3-a-namesection3ディレクトリ構成a&#34;&gt;3. &lt;a name=&#34;section3&#34;&gt;ディレクトリ構成&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/SeeKT/Docker_latex&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SeeKT/Docker_latex&lt;/a&gt; はこのようなディレクトリ構成をとっている．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;|- .devcontainer/
|   |- .latexmkrc: latexmk の設定ファイル
|   |- devcontainer.json: VSCode の Remote Container 機能を使うときの設定
|   |- docker-compose.yml: コンテナの起動に対する処理
|   |- dockerfile: コンテナを作るための処理
|
|- .vscode/
|   |- setting.json: LaTeX Workshop の設定
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;.vscode/setting.json&lt;/code&gt; でコンパイル方法を指示することで，コンパイルの効率化を図っている．&lt;/p&gt;
&lt;h3 id=&#34;4-a-namesection4使用方法a&#34;&gt;4. &lt;a name=&#34;section4&#34;&gt;使用方法&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;VSCode の Remote Development を用いて，コンテナ内に入る．そして，TeX ソースを開く．&lt;/p&gt;
&lt;p&gt;日本語文書のコンパイルには，&lt;code&gt;platex&lt;/code&gt; (&lt;code&gt;latexmk&lt;/code&gt;) を使う．LaTeX Workshop の &lt;code&gt;Recipe: pLatex&lt;/code&gt; をクリックし，&lt;code&gt;View LaTeX PDF&lt;/code&gt; をクリックすると，右側に PDF ファイルが開かれる．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-日本語文書のコンパイル&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/tex_jp.png&#34; alt=&#34;fig1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      日本語文書のコンパイル
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;英語文書のコンパイルには，&lt;code&gt;pdflatex&lt;/code&gt; を使う．LaTeX Workshop の &lt;code&gt;Recipe: pdflatex&lt;/code&gt; をクリックし，&lt;code&gt;View LaTeX PDF&lt;/code&gt; をクリックすると，右側に PDF ファイルが開かれる．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-英語文書のコンパイル&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/tex_en.png&#34; alt=&#34;fig1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      英語文書のコンパイル
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;英語文書のコンパイルには，&lt;code&gt;xelatex&lt;/code&gt; を使う．LaTeX Workshop の &lt;code&gt;Recipe: xelatex&lt;/code&gt; をクリックし，&lt;code&gt;View LaTeX PDF&lt;/code&gt; をクリックすると，右側に PDF ファイルが開かれる．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-スライドのコンパイル&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/tex_slide.png&#34; alt=&#34;fig1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      スライドのコンパイル
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.vscode/setting.json&lt;/code&gt; を工夫すれば，一部の文書に対しては &lt;code&gt;pdflatex&lt;/code&gt; みたいに設定できるらしいが，やり方がよく分からなかったので，今回はやらなかった．&lt;/p&gt;
&lt;h3 id=&#34;5-a-namesection5まとめa&#34;&gt;5. &lt;a name=&#34;section5&#34;&gt;まとめ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;何故か上手くいかなくて悩んでいたが，TeX 本体をインストールするときを思い出したらなんとかいけた．時間かかったけど．&lt;/p&gt;
&lt;p&gt;Docker Container としてプログラム (&lt;code&gt;R&lt;/code&gt;, &lt;code&gt;Python&lt;/code&gt;) の開発環境を作成した &lt;a href=&#34;https://github.com/tcbn-ai/TIL/blob/main/Study_Docker/Docker_Environment/docker_environment.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;資料&lt;/a&gt; もあるので，一応リンクを貼っておく．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>研究室に入った後今までお世話になっている神サイト/ツールたち</title>
      <link>https://tachibana-ai.netlify.app/post/good_references/</link>
      <pubDate>Sat, 04 Sep 2021 17:26:46 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/good_references/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;研究室に残す予定のものをまとめているときに，色々と参考にしたウェブサイトや記事，使ったツールなどを記録しておこうと思った．&lt;/p&gt;
&lt;h5 id=&#34;目次&#34;&gt;目次&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;1 &lt;a href=&#34;#section1&#34;&gt;Ubuntu関連&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2 &lt;a href=&#34;#section2&#34;&gt;Python関連&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3 &lt;a href=&#34;#section3&#34;&gt;Docker関連&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4 &lt;a href=&#34;#section4&#34;&gt;進捗管理関連&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;5 &lt;a href=&#34;#section5&#34;&gt;文献管理関連&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;6 &lt;a href=&#34;#section6&#34;&gt;論文関連&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;7 &lt;a href=&#34;#section7&#34;&gt;プレゼン関連&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;8 &lt;a href=&#34;#section8&#34;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-a-namesection1ubuntu関連a&#34;&gt;1. &lt;a name=&#34;section1&#34;&gt;Ubuntu関連&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kkaneko.jp/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;金子邦彦研究室&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;OSやアプリケーションのインストールの方法がとても丁寧にまとめられている (&lt;a href=&#34;https://www.kkaneko.jp/tools/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;インストール，運用&lt;/a&gt;)．&lt;/li&gt;
&lt;li&gt;個人的には，新しいアプリケーションを使おうとするときに一番苦労するのがインストールなので，このように丁寧にまとめられていてとても助かった．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stackoverflow&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;UbuntuなどのオープンソースのOSを使っているときは，エラーが出た際のトラブルシューティングは自分で何とかしなければならない．&lt;/li&gt;
&lt;li&gt;出力されたエラーログを stackoverflow で検索すると，大抵自分と同じエラーが出た人の質問が出てくるので，かなり参考になる．&lt;/li&gt;
&lt;li&gt;また，プログラムを書いているときに，パッケージの依存関係のエラーが出ることがあるが，このようなときも同様にエラーログを調べられる．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linuxfan.info/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linux Fan Info&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntuを使うときにインストール直後にやった方が良いことや，パッケージのインストールの方法などが日本語で説明されているのが良い．&lt;/li&gt;
&lt;li&gt;特にUbuntuを使い始めた頃はかなり役立った．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-a-namesection2python関連a&#34;&gt;2. &lt;a name=&#34;section2&#34;&gt;Python関連&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://python.atelierkobato.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python 数値計算プログラミング&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;数値計算のためのパッケージの解説がとても丁寧なのが良い．&lt;/li&gt;
&lt;li&gt;Matplotlibの解説もあるのが最高．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://note.nkmk.me/python-post-summary/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;note.mkmk.me Python関連記事まとめ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Pythonの基本的な使い方，特に組み込み関数の使い方が丁寧にまとめられているのが良い．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-a-namesection3docker関連a&#34;&gt;3. &lt;a name=&#34;section3&#34;&gt;Docker関連&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/minato-naka/items/e9cd026747693759800c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dockerで環境構築するための最低限の概念理解&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Dockerの概念を理解するための助けになった．&lt;/li&gt;
&lt;li&gt;図を用いて説明してくれているので，イメージしやすい．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/gold-kou/items/44860fbda1a34a001fc1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;いまさらだけどDockerに入門したので分かりやすくまとめてみた&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;とても丁寧にまとめられている．&lt;/li&gt;
&lt;li&gt;コマンドの実行例を載せてくれているので，したい処理に対してどのようなコマンドを実行すればよいかわかる．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/Yuki_Oshima/items/d3b52c553387685460b0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VS CodeでDocker開発コンテナを便利に使おう&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;VSCodeの拡張機能の使い方が書いている．&lt;/li&gt;
&lt;li&gt;この拡張機能を使うと，コンテナ内の開発をローカルで行っているようにできる (remote sshとかremote wslみたいな感じ) ので，おすすめ．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-a-namesection4進捗管理関連a&#34;&gt;4. &lt;a name=&#34;section4&#34;&gt;進捗管理関連&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Git&lt;/a&gt;, &lt;a href=&#34;https://github.co.jp/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;書いているコードの管理や執筆している論文の管理．&lt;/li&gt;
&lt;li&gt;自宅のPCと研究室内のPCでのデータの同期にも使える．&lt;/li&gt;
&lt;li&gt;VSCodeやAtomの拡張機能を使えばリポジトリの管理が楽．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://evernote.com/intl/jp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Evernote&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;私は各週や日のタスクや目標をチェックボックスに書き，やる必要があることと無理してやらなくてもいいことを区別するために使っていた．&lt;/li&gt;
&lt;li&gt;複数端末でログインできるのも良い (アプリをダウンロードせずブラウザから入れば端末制限に引っかからない)．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-a-namesection5文献管理関連a&#34;&gt;5. &lt;a name=&#34;section5&#34;&gt;文献管理関連&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elsevier.com/ja-jp/solutions/mendeley&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mendeley&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;ある程度の容量を無料で使えるのが強い．&lt;/li&gt;
&lt;li&gt;引用のためのbibファイルを作るときに楽．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.papershipapp.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PaperShip&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;iPadで論文を読むときに便利．&lt;/li&gt;
&lt;li&gt;Mendeleyとのアカウント連携ができる．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/bibtex-entry-from-url/mgpmgkhhbjgkpnanlmlhibjfgpdpgjec?hl=ja&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BibTeX entry from URL&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Chromeの拡張機能で，URLからbibtexの形式を取得できるもの．&lt;/li&gt;
&lt;li&gt;記事やウェブサイトを引用するときに重宝する．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-a-namesection6論文関連a&#34;&gt;6. &lt;a name=&#34;section6&#34;&gt;論文関連&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ocoshite.me/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;minoblog&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;研究の方向性に迷っていたときにこのブログを読み，非常に感銘を受けた．&lt;/li&gt;
&lt;li&gt;特に以下の2つの記事はおすすめ．
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ocoshite.me/how-to-read-scientific-articles&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;【超重要】研究室に配属された学生が最初に学ぶべき論文の読み方【4つのポイント】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ocoshite.me/the-importance-and-benefits-of-reading-scientific-articles&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;【なぜ論文を読むのか？】研究におけるメリットと重要性【アイデアは知識から】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/sei88888/2020-dot-06-dot-01-m1mian-qiang-hui-lun-wen-falsedu-mifang-shu-kifang-yan-jiu-shi-falseguo-gosifang&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Seitaro Shinagawa, 2020.06.01 M1勉強会 論文の読み方・書き方・研究室の過ごし方&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;論文の読み方に関しては，特に「速読」と「精読」の部分が素晴らしいと思った．本当に参考になった．&lt;/li&gt;
&lt;li&gt;論文の書き方もとても参考になる．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yoshitakaushiku.net/how_to_write_references.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;参考文献の書き方&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;恥ずかしながら，私はM1まで教授に参考文献の書き方を直されていた．&lt;/li&gt;
&lt;li&gt;このサイトは，参考文献の書き方のルールがまとめられていて，論文を執筆するときの参考になった．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://app.grammarly.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Grammarly&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Googleアカウントがあれば使うことができる優秀なスペルチェッカー．&lt;/li&gt;
&lt;li&gt;自分で書いているときにはなかなか気付けないスペルや文法のミスを指摘してくれるので，論文執筆時に重宝する．&lt;/li&gt;
&lt;li&gt;専門用語もミスとして指摘することがあるが，それ以外は素晴らしいツールだと思う．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.deepl.com/ja/translator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DeepL&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;論文執筆時に英語の表現が思いつかないときや，論文を読んでいるときに意味がつかめないときにかなり使える．&lt;/li&gt;
&lt;li&gt;精度が良い．&lt;/li&gt;
&lt;li&gt;論文をDeepLを使って書くことについて色々言われているが，全部DeepLを使うのではなく，どうしても思いつかない表現で使うというような使い方をすれば良いのではないだろうか．&lt;/li&gt;
&lt;li&gt;Grammarlyと組み合わせるとある程度マシな英語が書けると思う．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特に上2つのような素晴らしいブログやスライドを見ると，自分が底辺に思えてきます．&lt;/p&gt;
&lt;h3 id=&#34;7-a-namesection7プレゼン関連a&#34;&gt;7. &lt;a name=&#34;section7&#34;&gt;プレゼン関連&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/ShinnosukeTakamichi/ss-48987441&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;研究発表のためのプレゼンテーション技術&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;プレゼンを構成する要素が分かりやすく書かれている．&lt;/li&gt;
&lt;li&gt;私はこの記事を参考にスライドの構成を考えている．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ocoshite.me/how-to-make-a-good-presentation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;わかりやすい研究発表をするための3つの手順【スライド・話し方】&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;minonさんの記事．&lt;/li&gt;
&lt;li&gt;スライドの作り方の他，発表の仕方などもとても参考になる．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://obsproject.com/ja/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OBS Studio&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;最近はオンライン学会が増えてきたり，学会発表がビデオ投稿のみであるものが多くなったりしている．また，学会発表の練習のために，自分の発表を録音して聞くことが有効だと考えられる (これはminonさんの記事でも挙げられている)．&lt;/li&gt;
&lt;li&gt;発表の録画に役立つのがOBS Studioである．録画が非常に容易に行えるのが良い．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;8-a-namesection8まとめa&#34;&gt;8. &lt;a name=&#34;section8&#34;&gt;まとめ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;この記事では，研究室に入った後から今までお世話になっている神のウェブサイトや記事，ツールをまとめた．他にも良いものがある (見つける) と思うので，気付いたらこの記事も更新していきたいと思う．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RStudio ServerをDockerで使うときのメモ</title>
      <link>https://tachibana-ai.netlify.app/post/docker_r/</link>
      <pubDate>Mon, 30 Aug 2021 09:15:39 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/docker_r/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;RとRStudioもDocker containerとして使えれば少しめんどくさかったインストール工程 (&lt;a href=&#34;https://tachibana-ai.netlify.app/post/ubuntu_rstudio/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ubuntu20.04にRとRStudioをインストールする&lt;/a&gt;) をやらなくても良いのではないだろうか，と考えた．&lt;/p&gt;
&lt;p&gt;調べたところ，RockerというものでRStudio ServerをDockerで使えるらしい&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;．&lt;/p&gt;
&lt;p&gt;今回は備忘録として，Rockerを使ったときのメモを残すことにした．&lt;/p&gt;
&lt;h3 id=&#34;1-準備&#34;&gt;1. 準備&lt;/h3&gt;
&lt;p&gt;最低限必要なことは，Docker Engineのインストールである．UbuntuへのDocker Engineのインストールは以前記事にした&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;．WindowsやMacについては他にも様々な記事があると思う．&lt;/p&gt;
&lt;h3 id=&#34;2-使い方&#34;&gt;2. 使い方&lt;/h3&gt;
&lt;p&gt;今回は，&lt;a href=&#34;https://hub.docker.com/r/rocker/tidyverse&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;rocker/tidyverse&lt;/code&gt;&lt;/a&gt; を使う．おそらく&lt;code&gt;rocker/verse&lt;/code&gt; なども同様の方法でできると思う．&lt;/p&gt;
&lt;p&gt;まず，イメージファイルをローカルなマシンに落とす．これは，&lt;code&gt;docker pull&lt;/code&gt; コマンドを用いればよい．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull rocker/tidyverse
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;イメージファイルがあるかどうかは，次のコマンドで調べられる．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker image ls | grep tidyverse
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例えば，私のマシンで実行すると以下のように出力された．確かに &lt;code&gt;rocker/tidyverse&lt;/code&gt; のイメージファイルがあることがわかる．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tcbn@tcbn-V530-15ICR:~$ docker image ls | grep tidyverse
rocker/tidyverse                                latest                  63d48e0c8338   9 days ago      2.41GB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;イメージファイルがある状態で，以下のように &lt;code&gt;docker run&lt;/code&gt; コマンドを実行すればバックグラウンドでRStudio Serverが立ち上がる．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -d -p 8787:8787 -e PASSWORD=[yourpasswordhere] -v [mountdir]:/home/rstudio rocker/tidyverse
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここで，それぞれのオプションは以下のようなものである．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--rm&lt;/code&gt;: コンテナの終了後にコンテナを削除する．&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt;: 端末から切り離してバックグラウンドで実行する．&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;: ポートマッピングを設定する．
&lt;pre&gt;&lt;code&gt;-p [port number (host)]:[port number (container)]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt;: 環境変数を設定する．&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v&lt;/code&gt;: ボリュームをマウントする．
&lt;pre&gt;&lt;code&gt;-v [host directory]:[container directory]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このコマンドの実行後，&lt;code&gt;http://localhost:8787/&lt;/code&gt; にアクセスすればユーザ名とパスワードの入力画面が出てくる．そこで，ユーザ名に &lt;code&gt;rstudio&lt;/code&gt; を入力し，パスワードに &lt;code&gt;-e&lt;/code&gt; で指定したパスワードを入力する．&lt;/p&gt;
&lt;p&gt;実際に私のマシンでやってみる．&lt;code&gt;~/r_sample&lt;/code&gt; というディレクトリをマウントする．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tcbn@tcbn-V530-15ICR:~/r_sample$ ls
requirements.r  test.r
tcbn@tcbn-V530-15ICR:~/r_sample$ docker run --rm -d -p 8787:8787 -e PASSWORD=mypassword -v $(pwd):/home/rstudio rocker/tidyverse
83136d6a3c656386e74d14899e0ad55d4b10603ade1bad0dfe7dbde88e07e75c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この状態で，&lt;code&gt;http://localhost:8787/&lt;/code&gt; にアクセスすると，以下のようにユーザ名とパスワードの入力画面が出てくる．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ユーザ名とパスワードの入力画面&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/input_userinfo.png&#34; alt=&#34;fig1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ユーザ名とパスワードの入力画面
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;ユーザ名に &lt;code&gt;rstudio&lt;/code&gt;，パスワードに指定したパスワードを入力し，サインインすると，次のような画面になる．&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-rstudio-server&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./fig/rstudio_server.png&#34; alt=&#34;fig2&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      RStudio Server
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;先程見た&lt;code&gt;~/rsample&lt;/code&gt; がマウントされていることがわかる．あとは必要なパッケージをインストールするなどしたら使えるようになる．&lt;/p&gt;
&lt;p&gt;コンテナ内のRStudio Server側でrのソースコードを書き換えるとそれがマウントしたローカルなディレクトリにも反映される．&lt;/p&gt;
&lt;p&gt;今起動しているDocker containerを &lt;code&gt;docker ps&lt;/code&gt; コマンドで見ると，&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tcbn@tcbn-V530-15ICR:~/r_sample$ docker ps
CONTAINER ID   IMAGE              COMMAND   CREATED         STATUS         PORTS                                       NAMES
83136d6a3c65   rocker/tidyverse   &amp;quot;/init&amp;quot;   7 minutes ago   Up 7 minutes   0.0.0.0:8787-&amp;gt;8787/tcp, :::8787-&amp;gt;8787/tcp   inspiring_nash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;となっている．コンテナを &lt;code&gt;docker stop&lt;/code&gt; コマンドで終了した後に &lt;code&gt;docker ps -a&lt;/code&gt; コマンドでコンテナ一覧を見る．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tcbn@tcbn-V530-15ICR:~/r_sample$ docker stop inspiring_nash 
inspiring_nash
tcbn@tcbn-V530-15ICR:~/r_sample$ docker ps -a | grep tidyverse
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;--rm&lt;/code&gt; オプションで指定したとおり，終了後のコンテナが削除されている．&lt;/p&gt;
&lt;h3 id=&#34;3-まとめ&#34;&gt;3. まとめ&lt;/h3&gt;
&lt;p&gt;今回は，RStudio ServerをDockerで使うときのやり方を簡単にまとめた．例えば，&lt;code&gt;rocker/tidyverse&lt;/code&gt; をイメージファイルに指定してDockerfileを作り，使いやすい環境を作るといったこともできる．&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://jsta.github.io/r-docker-tutorial/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Docker tutorial&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://tachibana-ai.netlify.app/post/ubuntu_docker/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ubuntu20.04にDocker Engineをインストールする&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Python3の開発環境をDocker containerとして作る</title>
      <link>https://tachibana-ai.netlify.app/post/docker_python/</link>
      <pubDate>Thu, 08 Jul 2021 18:58:51 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/docker_python/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;この記事では，Docker containerとしてPythonの開発環境を作ったときのメモを残す．
この記事の内容は，GitHubのサブのアカウントの&lt;a href=&#34;https://github.com/tcbn-ai/Docker_python_env&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;publicリポジトリ&lt;/a&gt;で公開している．&lt;/p&gt;
&lt;h3 id=&#34;1-必要なもの&#34;&gt;1. 必要なもの&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Docker Engineのインストール&lt;/li&gt;
&lt;li&gt;VSCodeのインストール
&lt;ul&gt;
&lt;li&gt;Remote Developementの導入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-基本構成&#34;&gt;2. 基本構成&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Docker Image
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/python&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;python&lt;/a&gt;の&lt;a href=&#34;https://github.com/docker-library/python/blob/e0e01b8482ea14352c710134329cdd93ece88317/3.8/buster/Dockerfile&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;3.8.10-buster&lt;/a&gt;を使っている．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ディレクトリ構成
&lt;pre&gt;&lt;code&gt;|- test_code/   # コードを置いている
|- .devcontainer/
    |- devcontainer.json
    |- docker-compose.yml
    |- dockerfile
    |- requirements.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;各種ファイル&#34;&gt;各種ファイル&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;devcontainer.json&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;VSCodeのRemoteを使うときの設定
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
// https://github.com/microsoft/vscode-dev-containers/tree/v0.177.0/containers/docker-existing-dockerfile
{
  // 名前は任意
  &amp;quot;name&amp;quot;: &amp;quot;Docker-Python&amp;quot;,
  // dockercomposefileの場所 (同階層に置いている)
  &amp;quot;dockerComposeFile&amp;quot;: &amp;quot;docker-compose.yml&amp;quot;,
  // 使う拡張機能
  &amp;quot;extensions&amp;quot;: [
    &amp;quot;ms-python.python&amp;quot;
  ],
  // ここに記載している&amp;quot;service&amp;quot;名とdocker-compose.ymlに記載している&amp;quot;service&amp;quot;を一致させる
  &amp;quot;service&amp;quot;: &amp;quot;python&amp;quot;,
  // コンテナ内に入ったときのworkdir
  &amp;quot;workspaceFolder&amp;quot;: &amp;quot;/code&amp;quot;,
  // VSCodeを閉じたときのアクション
  &amp;quot;shutdownAction&amp;quot;: &amp;quot;stopCompose&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;複数のコンテナを定義し，実行することができる．&lt;/li&gt;
&lt;li&gt;今回は，1つのコンテナに対する処理を記述
&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;version: &amp;quot;3&amp;quot;    # 3が最新版
services: 
    python: # ここの名前とdevcontainer.jsonの&amp;quot;service&amp;quot;を一致させる
        build: .    # 同階層のdockerfileからビルドする
        command: sleep infinity
        volumes: 
            - ../:/code  # 上階層のディレクトリをDocker Container上のworkdirにマウント
        environment: 
            SHELL: /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dockerfile&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;コンテナを作るための処理
&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;########### Image file ###########
FROM python:3.8.10-buster
##################################

########### update and install packages ###########
# apt-get upgradeに-yを付けないとexit 1になります．追加しました．(5/23)
RUN apt-get update &amp;amp;&amp;amp; \
    apt-get -y upgrade &amp;amp;&amp;amp; \
    apt-get install -y vim git &amp;amp;&amp;amp; \
    rm -rf /var/lib/apt/lists*
###################################################

########### create workspace ###########
RUN mkdir /code
WORKDIR /code
ADD ./requirements.txt /code/
########################################

########### install packages via pip ###########
RUN pip3 install -r requirements.txt
ADD . /code/
################################################
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requirements.txt&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip install&lt;/code&gt;するファイル
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;############ Requirements Packages ############
pylint
numpy
scipy
sympy
matplotlib
statsmodels
sklearn
pandas
networkx
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-使用時&#34;&gt;3. 使用時&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;test_code&lt;/code&gt;と同階層に自分のコードを格納したフォルダを配置して，VSCodeの左下の&amp;quot;Open Remote Window&amp;quot;を選択．&lt;/li&gt;
&lt;li&gt;Reopen in Containerを選択．&lt;/li&gt;
&lt;li&gt;ワークスペースが開いたら，terminalを開き，&lt;code&gt;python *.py&lt;/code&gt;で実行する．&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-いろいろ変えたいとき&#34;&gt;4. いろいろ変えたいとき&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip install&lt;/code&gt;するパッケージを変更したいとき
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;requirements.txt&lt;/code&gt;を書き換える&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pythonのバージョンを3の別バージョンに変えたいとき
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dockerfile&lt;/code&gt;のイメージファイル (2行目の&lt;code&gt;FROM&lt;/code&gt;以下) を書き換える．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pythonのバージョンを2にしたいとき
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/python&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;python&lt;/a&gt;には2系がないので，イメージファイルをUbuntu等にして1からインストールする．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu20.04にDocker Engineをインストールする</title>
      <link>https://tachibana-ai.netlify.app/post/ubuntu_docker/</link>
      <pubDate>Thu, 08 Jul 2021 18:25:39 +0900</pubDate>
      <guid>https://tachibana-ai.netlify.app/post/ubuntu_docker/</guid>
      <description>&lt;h3 id=&#34;0-はじめに&#34;&gt;0. はじめに&lt;/h3&gt;
&lt;p&gt;私が学部4年から修士1年までに使っていたPythonの開発環境はUbuntu上にpipとpipenvを入れ，pipenvで仮想環境を作って使うというものだった．Ubuntuを20にアップグレードしたときにこれまで使っていた仮想環境でプログラムが動かない，ということが起こった．&lt;/p&gt;
&lt;p&gt;このように，OSに1つの環境を作って動かそうとした際には，更新に伴いプログラムが動かなくなるというリスクがある．さらに，以下のような問題が挙げられる．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OSが汚れる
&lt;ul&gt;
&lt;li&gt;OSに直接インストールするので，複数のバージョンが共存するといったことが起こる．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;問題の切り分けが難しい
&lt;ul&gt;
&lt;li&gt;OSのアップグレードの問題なのか，パッケージの問題なのか分からなくなる．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;そんなときDockerに出会う．Dockerの説明は省略するが，イメージは1つのサーバに独立した複数のサーバを同時に構築することができる，というものである．これは良いと思い，研究の開発環境をDocker container上に作ることにした．&lt;/p&gt;
&lt;p&gt;Ubuntu20.04にDocker Engineをインストールするためのシェルスクリプトを作ったので，この記事で共有する．&lt;/p&gt;
&lt;h3 id=&#34;1-dockerの利点と欠点&#34;&gt;1. Dockerの利点と欠点&lt;/h3&gt;
&lt;p&gt;私が思うDockerの利点と欠点を以下に示す．あまり詳しくないエアプ発言かもしれない．&lt;/p&gt;
&lt;h4 id=&#34;利点&#34;&gt;利点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Dockerfileに開発に必要なパッケージのインストールについて記述できるので，Dockerfileとして記述してしまえば，そのとおりに環境構築ができる．&lt;/li&gt;
&lt;li&gt;移植しやすい．&lt;/li&gt;
&lt;li&gt;Python等のバージョンが変わったときもDockerfileの内容を変えることで最新版にアップデートできる．&lt;/li&gt;
&lt;li&gt;OSのバージョンに依らない．依存関係に関する問題を，パッケージのバージョンにまで絞り込める．&lt;/li&gt;
&lt;li&gt;OSが汚れない．&lt;/li&gt;
&lt;li&gt;1つのPCの中に複数の異なる開発環境を構築できる．&lt;/li&gt;
&lt;li&gt;VSCodeの拡張機能が優秀で，使いやすい．&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;欠点&#34;&gt;欠点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Windowsでエラーが出ることが多い気がする．Windowsで同じようなことをしようと思ってもうまく動かないことがある．&lt;/li&gt;
&lt;li&gt;WindowsではWSL2をバックエンドにしているので，メモリの消費量が多い．まともに動かそうと思うとメモリ16GBはないと厳しい．&lt;/li&gt;
&lt;li&gt;導入コスト．(自分が賢くないだけだけど) 難しい．&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-インストールのためのシェルスクリプト&#34;&gt;2. インストールのためのシェルスクリプト&lt;/h3&gt;
&lt;p&gt;福山大学の&lt;a href=&#34;https://www.kkaneko.jp/tools/docker/ubuntu_docker.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;金子邦彦先生のウェブサイト&lt;/a&gt; がかなり参考になった．Docker Engineの導入以外にもかなり参考にさせていただいた．&lt;/p&gt;
&lt;p&gt;次のようなシェルスクリプトを作り，&lt;code&gt;~/install_docker.sh&lt;/code&gt;として保存した．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

# Written by A.Tachibana, 2021/3/19

# Objective
## To install docker in Ubuntu 20

# Reference
## https://www.kkaneko.jp/tools/docker/ubuntu_docker.html

############ To execute ############
# chmod 755 install_docker.sh
# ./install_docker.sh
####################################


# Require password
printf &amp;quot;password: &amp;quot;
read -s password

# Update and Upgrade
echo &amp;quot;$password&amp;quot; | sudo -S apt update &amp;amp;&amp;amp; sudo -S apt -y upgrade

# Install Docker
## Delete old version (if exists)
sudo -S apt -y remove docker docker-engine docker.io containerd docker-ce docker-ce-cli
sudo -S apt -y autoremove
## Install required software
sudo -S apt update
sudo -S apt -y install apt-transport-https ca-certificates curl software-properties-common
sudo -S apt -y install linux-image-generic
## Set docker repository
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
apt-key fingerprint 0EBFCD88
sudo -S add-apt-repository \
    &amp;quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
    $(lsb_release -sc) \
    stable&amp;quot;
sudo -S apt update
## Install docker.io
sudo -S apt -y install docker.io containerd docker-compose
## Add authority
sudo -S usermod -aG docker $USER
## Set autostart
sudo -S systemctl unmask docker.service
sudo -S systemctl enable docker
sudo -S systemctl is-enabled docker
## let user ubuntu use docker
sudo gpasswd -a $USER docker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このファイルに実行権限を与え，実行する．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod 755 install_docker.sh
./install_docker.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;なお，このシェルスクリプトは，私のサブのGitHubアカウントの&lt;a href=&#34;https://github.com/tcbn-ai/TIL/blob/main/Study_Docker/shellscript/install_docker.sh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;publicリポジトリ&lt;/a&gt;にアップロードしている．&lt;/p&gt;
&lt;h4 id=&#34;参考&#34;&gt;参考&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kkaneko.jp/cc/vm/ubuntu_docker.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker Engine のインストールと使用法（Ubuntu 上）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
